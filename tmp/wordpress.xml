<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.4.1" created="2016-01-18 03:01" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>IT运维中文博客</title>
	<link>http://www.itopers.com</link>
	<description>Beebol&#039;s &#38; Vaster&#039;s  Blog</description>
	<pubDate>Mon, 18 Jan 2016 03:01:52 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.itopers.com</wp:base_site_url>
	<wp:base_blog_url>http://www.itopers.com</wp:base_blog_url>

	<wp:author><wp:author_id>3</wp:author_id><wp:author_login><![CDATA[beebol]]></wp:author_login><wp:author_email><![CDATA[dingguoxing2009@hotmail.com]]></wp:author_email><wp:author_display_name><![CDATA[beebol]]></wp:author_display_name><wp:author_first_name><![CDATA[Guoxing]]></wp:author_first_name><wp:author_last_name><![CDATA[Ding]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>2</wp:author_id><wp:author_login><![CDATA[vaster]]></wp:author_login><wp:author_email><![CDATA[lz.710@163.com]]></wp:author_email><wp:author_display_name><![CDATA[vaster]]></wp:author_display_name><wp:author_first_name><![CDATA[Zhen]]></wp:author_first_name><wp:author_last_name><![CDATA[Liu]]></wp:author_last_name></wp:author>
	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[admin]]></wp:author_login><wp:author_email><![CDATA[ww103421245@163.com]]></wp:author_email><wp:author_display_name><![CDATA[beebol]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>https://wordpress.org/?v=4.4.1</generator>

	<item>
		<title>【shell】判断操作符-判断为真的条件</title>
		<link>http://www.itopers.com/?p=51</link>
		<pubDate>Wed, 07 Aug 2013 04:22:06 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=51</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;
<div>
<table border="0" align="center">
<tbody>
<tr>
<td><strong>判断操作符</strong></td>
<td><strong>判断为真的条件</strong></td>
</tr>
<tr>
<td><strong>字符串判断</strong></td>
<td> </td>
</tr>
<tr>
<td>[ stringA=stringB ]</td>
<td>stringA等于stringB</td>
</tr>
<tr>
<td>[ stringA==stringB ]</td>
<td>stringA等于stringB</td>
</tr>
<tr>
<td>[ stringA!=stringB ]</td>
<td>stringA不等于stringB</td>
</tr>
<tr>
<td>[ string ]</td>
<td>string不为空</td>
</tr>
<tr>
<td>[ -z string ]</td>
<td>string长度为0</td>
</tr>
<tr>
<td>[ -n string ]</td>
<td>string长度不为0</td>
</tr>
<tr>
<td><strong>逻辑判断</strong></td>
<td> </td>
</tr>
<tr>
<td>[ stringA -a stringB ]</td>
<td>stringA和stringB都是真</td>
</tr>
<tr>
<td>[ stringA -o stringB ]</td>
<td>stringA或stringB是真</td>
</tr>
<tr>
<td>[ !string ]</td>
<td>string不为真</td>
</tr>
<tr>
<td><strong>逻辑判断(复合判断)</strong></td>
<td> </td>
</tr>
<tr>
<td>[[ pattern1 &amp;&amp; pattern2 ]]</td>
<td>pattern1和pattern2都是真</td>
</tr>
<tr>
<td>[[ pattern1 || pattern2 ]]</td>
<td>pattern1或pattern2是真</td>
</tr>
<tr>
<td>[[ !pattern ]]</td>
<td>pattern不为真</td>
</tr>
<tr>
<td><strong>整数判断</strong></td>
<td> </td>
</tr>
<tr>
<td>[ intA -eq intB ]</td>
<td>intA等于intB</td>
</tr>
<tr>
<td>[ intA -ne intB ]</td>
<td>intA不等于intB</td>
</tr>
<tr>
<td>[ intA -gt intB ]</td>
<td>intA大于intB</td>
</tr>
<tr>
<td>[ intA -ge intB ]</td>
<td>intA大于等于intB</td>
</tr>
<tr>
<td>[ intA -lt intB ]</td>
<td>intA小于intB</td>
</tr>
<tr>
<td>[ intA -le intB ]</td>
<td>intA小于等于intB</td>
</tr>
<tr>
<td><strong>文件判断中的二进制操作</strong></td>
<td> </td>
</tr>
<tr>
<td>[ fileA -nt fileB ]</td>
<td>fileA比fileB新</td>
</tr>
<tr>
<td>[ fileA -ot fileB ]</td>
<td>fileA比fileB旧</td>
</tr>
<tr>
<td>[ fileA -ef fileB ]</td>
<td>fileA和fileB有相同的设备或者inode值</td>
</tr>
<tr>
<td><strong>文件检验</strong></td>
<td> </td>
</tr>
<tr>
<td>[ -d $file ] or [[ -d $file ]]</td>
<td>file为目录且存在时为真</td>
</tr>
<tr>
<td>[ -e $file ] or [[ -e $file ]3]</td>
<td>file为文件且存在时为真</td>
</tr>
<tr>
<td>[ -f $file ] or [[ -f $file ]]</td>
<td>file为非目录普通文件存在时为真</td>
</tr>
<tr>
<td>[ -s $file ] or [[ -s $file ]]</td>
<td>file文件存在, 且长度不为0时为真</td>
</tr>
<tr>
<td>[ -L $file ] or [[ -L $file ]]</td>
<td>file为链接符且存在时为真</td>
</tr>
<tr>
<td>[ -r $file ] or [[ -r $file ]]</td>
<td>file文件存在且可读时为真</td>
</tr>
<tr>
<td>[ -w $file ] or [[ -w $file ]]</td>
<td>file文件存在且可写时为真</td>
</tr>
<tr>
<td>[ -x $file ] or [[ -x $file ]]</td>
<td>file文件存在且可执行时为真</td>
</tr>
</tbody>
</table>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>51</wp:post_id>
		<wp:post_date><![CDATA[2013-08-07 12:22:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 04:22:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shell%e5%88%a4%e6%96%ad%e6%93%8d%e4%bd%9c%e7%ac%a6-%e5%88%a4%e6%96%ad%e4%b8%ba%e7%9c%9f%e7%9a%84%e6%9d%a1%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<category domain="post_tag" nicename="shell-2"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="shell%e7%bc%96%e7%a8%8b"><![CDATA[shell编程]]></category>
		<category domain="post_tag" nicename="%e5%88%a4%e6%96%ad"><![CDATA[判断]]></category>
		<category domain="post_tag" nicename="%e6%9d%a1%e4%bb%b6"><![CDATA[条件]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[24]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[495]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【shell】在while Read中ssh提前中断解决办法</title>
		<link>http://www.itopers.com/?p=65</link>
		<pubDate>Wed, 07 Aug 2013 06:41:14 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=65</guid>
		<description></description>
		<content:encoded><![CDATA[ 在写while read循环时，只执行到第一行就中断了，这是为什么呢？

while read line
<div>

do

ssh xxxx 

done  &lt;file

问题原因是由于： ssh需要用到stdin，当ssh推出，＂顺便＂就把当前stdin中断了.既然stdin中断，自然read也读不进来新数据，while read就断了，只要在ssh连接的时候加上一个-n参数就可以了。具体写法如下：

cat file | while read line

do

ssh -n xxxx

done

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date><![CDATA[2013-08-07 14:41:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 06:41:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90shell%e3%80%91%e5%9c%a8while-read%e4%b8%adssh%e6%8f%90%e5%89%8d%e4%b8%ad%e6%96%ad%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<category domain="post_tag" nicename="shell-2"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="ssh"><![CDATA[ssh]]></category>
		<category domain="post_tag" nicename="while-read"><![CDATA[while read]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1251]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>28219</wp:comment_id>
			<wp:comment_author><![CDATA[beebol]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ww103421245@163.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://itopers.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[103.230.2.141]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-29 23:24:00]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-29 15:24:00]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[或者ssh后面加上&lt;/dev/null ,如ssh $ip &quot;df -h&quot; &lt;/dev/null]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1438183440.4115970134735107421875;s:7:"message";s:31:"Akismet检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【linux】ipmitool无法使用Could not open device at /dev/ipmi0 </title>
		<link>http://www.itopers.com/?p=69</link>
		<pubDate>Wed, 07 Aug 2013 07:35:53 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=69</guid>
		<description></description>
		<content:encoded><![CDATA[[root@server ~]# ipmitool sensor list
<span style="color: #ff0000;">Could not open device at /dev/ipmi0 or /dev/ipmi/0 or /dev/ipmidev/0: No  such file or directory</span>
Get Device ID command failed
Unable to open SDR for reading

需要添加如下：

[root@server~]# modprobe ipmi_watchdog
[root@server~]# modprobe ipmi_poweroff
[root@server~]# modprobe ipmi_devintf
[root@server~]# modprobe ipmi_si
[root@server~]# modprobe ipmi_msghandler]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>69</wp:post_id>
		<wp:post_date><![CDATA[2013-08-07 15:35:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 07:35:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91ipmitool%e6%97%a0%e6%b3%95%e4%bd%bf%e7%94%a8could-not-open-device-at-devipmi0-or-devipmi0-or-devipmidev0-no]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="ilo"><![CDATA[ILO]]></category>
		<category domain="post_tag" nicename="ipmitool"><![CDATA[ipmitool]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e7%ae%a1%e7%90%86%e5%8d%a1"><![CDATA[管理卡]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[5894]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】ERROR 145 (HY000):Table &#039;$table&#039; is marked as...解决</title>
		<link>http://www.itopers.com/?p=77</link>
		<pubDate>Wed, 07 Aug 2013 07:46:00 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=77</guid>
		<description></description>
		<content:encoded><![CDATA[之前人数工具突然之间无法使用了，人数全服下降，打开发现人数工具访问数据库失败。

<strong>具体的报错信息如下：</strong>
<div>
<div>ERROR 145 (HY000): Table ’***biling_tl' is marked as crashed and should be repaired</div>
<div> 数据库是MYISAM引擎，所以用如下方法试了一下，修改成功了。并在这里记录了一下。</div>
<div> 解决方法如下：（用此方法修复成功）</div>
<div>mysql&gt; repair table monitor.billing_tl;</div>
<div>+-------------------+--------+----------+----------+</div>
<div>| Table             | Op     | Msg_type | Msg_text |</div>
<div>+-------------------+--------+----------+----------+</div>
<div>| cmxt.cm_user_pref | repair | status   | OK       |</div>
<div>+-------------------+--------+----------+----------+</div>
<div></div>
<div><strong>故障产生的原因（结合网上资料和以往经验）：</strong></div>
<div>

    就这个人数据工具来说，导致这个错误极大可以的原因是由于频繁地查询和更新数据表，而造成的索引错误。

另外，还有可能是受到外部的某种因素而造成损坏，如服务器发生断电、程序意外中断等某些不可测的问题造成表损坏。

&nbsp;

</div>
<div></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>77</wp:post_id>
		<wp:post_date><![CDATA[2013-08-07 15:46:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 07:46:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91error-145-hy000table-table-is-marked-as-%e8%a7%a3%e5%86%b3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="myisa"><![CDATA[myisa]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="repair"><![CDATA[repair]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[24]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[684]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux】Linux虚拟机克隆后网络问题</title>
		<link>http://www.itopers.com/?p=85</link>
		<pubDate>Wed, 07 Aug 2013 16:47:19 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=85</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center">问题描述：</p>
<p align="left"><b>环境：Virtualbox+RHEL 6 x64</b></p>
<p align="left">用VirtualBox的vboxmanager克隆的虚拟机，操作系统RHEL6，启动后发现网卡不能用了。</p>
<p align="left">重启网络服务，报以下错误:</p>
<p align="left"><span style="color: #ff0000;">Bringing up interface eth0: Device eth0 does not seem to be present, delaying initialization. [FAILED]</span></p>
<p align="left">或者ifconfig时，看不到eth0,都有可能是如下原因造成。</p>
<p align="left"><strong>原因分析：</strong>因为复制虚拟机MAC会重新生成，但是操作系统的MAC却写在ifcfg-ethx里，造成了不一致，所以不能启动网络接口，在RHEL5里可以使用kudzu或者注释网卡配置文件的MAC字段来解决这个问题。但是在RHEL6里，kudzu已经被hal服务取代了。虽然lspci能够正常认到网卡，但是却无法使用/etc/init.d/network restart来启动服务。尝试注释ifcfg-eth0的MAC字段，还是报错。</p>
<p align="left"><span style="color: #800000;"><b>方法1：</b></span></p>
<p align="left">查看了下udev的规则，发现了问题的所在。</p>
<p align="left">[root@Oracle ~]# cat /etc/udev/rules.d/70-persistent-net.rules</p>
<p align="left"># net device () (custom name provided by external tool)</p>
<p align="left">SUBSYSTEM==”net”, ACTION==”add”, DRIVERS==”?*”, ATTR{address}==”08:00:27:16:31:11″, ATTR{type}==”1″, KERNEL==”eth*”, NAME=”eth0″</p>
<p align="left"># net device ()</p>
<p align="left">SUBSYSTEM==”net”, ACTION==”add”, DRIVERS==”?*”, ATTR{address}==”08:00:27:32:66:63″, ATTR{type}==”1″, KERNEL==”eth*”, NAME=”eth1″</p>
<p align="left">[root@Oracle ~]#</p>
<p align="left">原来UDEV这里把克隆前的MAC当成了当前虚拟机的eth0 MAC，而重新生成的08:00:27:32:66:63是eth1的MAC。</p>
<p align="left">解决这个问题，只要删除旧的UDEV配置，修改为：</p>
<p align="left">[root@Oracle ~]# cat /etc/udev/rules.d/70-persistent-net.rules</p>
<p align="left"># net device () (custom name provided by external tool)</p>
<p align="left">SUBSYSTEM==”net”, ACTION==”add”, DRIVERS==”?*”, <span style="color: #ff0000;">ATTR{address}==”08:00:27:32:66:63″</span>, ATTR{type}==”1″, KERNEL==”eth*”, <span style="color: #ff0000;">NAME=”eth0″</span></p>
<p align="left">重启network服务有时可以有时不行，重启系统就一切OK！试过多次！</p>
<p align="left">[root@Oracle ~]# /etc/init.d/network restart</p>
<p align="left">[root@Oracle ~]# ifconfig eth0</p>
<p align="left"><span style="color: #ff0000;">eth0 Link encap:Ethernet HWaddr 08:00:27:32:66:63</span></p>
<p align="left">inet addr:172.16.100.3 Bcast:172.16.100.255 Mask:255.255.255.0</p>
<p align="left">inet6 addr: fe80::a00:27ff:fe32:6663/64 Scope:Link</p>
<p align="left">UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1</p>
<p align="left">RX packets:206 errors:0 dropped:0 overruns:0 frame:0</p>
<p align="left">TX packets:203 errors:0 dropped:0 overruns:0 carrier:0</p>
<p align="left">collisions:0 txqueuelen:1000</p>
<p align="left">RX bytes:21157 (20.6 KiB) TX bytes:24515 (23.9 KiB)</p>
<p align="left"><span style="color: #800000;"><b>方法2：</b></span></p>
<p align="left">最简单的解决办法是直接删除70-persistent-net.rules配置文件</p>
<p align="left">rm -rf /etc/udev/rules.d/70-persistent-net.rules</p>
<p align="left">reboot</p>
<p align="left">重启系统就ok了，系统会自动生成一个新的。</p>
<p align="left"><span style="color: #800000;"><b>方法3：</b></span></p>
<p align="left">首先：查看vmx文件中ethernet0.generatedAddress(VMX给这台虚拟机生成的Mac)</p>
<p align="left">然后：把/etc/sysconfig/network-scripts/ifcfg-eth0文件中的HWADDR修改为第一步查看的</p>
<p align="left">最后：service network restart</p>
<p align="left">ifconfig命令可以查看到eth0的信息</p>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>85</wp:post_id>
		<wp:post_date><![CDATA[2013-08-08 00:47:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 16:47:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linuxlinux%e8%99%9a%e6%8b%9f%e6%9c%ba%e5%85%8b%e9%9a%86%e5%90%8e%e7%bd%91%e7%bb%9c%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2740]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>27621</wp:comment_id>
			<wp:comment_author><![CDATA[pwx]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[pwxailww@qq.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://bsbm.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[58.20.54.62]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-06-18 17:26:44]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-06-18 09:26:44]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[最简单的是把设备名字改为eth0，博主相信我吧！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1434619604.856008052825927734375;s:7:"message";s:31:"Akismet检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1437480855.631805896759033203125;s:7:"message";s:35:"beebol修改评论状态为approved";s:5:"event";s:15:"status-approved";s:4:"user";s:6:"beebol";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28039</wp:comment_id>
			<wp:comment_author><![CDATA[beebol]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dingguoxing2009@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.itopers.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[111.206.12.22]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-07-21 20:18:18]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-07-21 12:18:18]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[上面不是在改设备名吗？这里的场景是eth1已经存在，如果不改掉是会有问题的，另外mac对应的不是eth1]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>27621</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1437481098.5324170589447021484375;s:7:"message";s:31:"Akismet检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:6:"beebol";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【shell】md5校验及多级较验</title>
		<link>http://www.itopers.com/?p=91</link>
		<pubDate>Wed, 07 Aug 2013 16:55:45 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=91</guid>
		<description></description>
		<content:encoded><![CDATA[我们常常会有一种需要，需要记录某个文件或某个目录及子目录下所有文件的MD5,以后需要用时，还要比对MD5是否统一，这时需要用于md5sum这个命令和它的反校验功能了

<strong>生成MD5码：</strong>
<div>
<pre class="lang:default decode:true">[root@host100 ~]# find ./ -name "*.txt" |xargs md5sum &gt;a
[root@host100 ~]# cat a
d04b4ac51bece9f4408c981f6f448399  ./md5.txt
d41d8cd98f00b204e9800998ecf8427e  ./b.txt
a918319d873c314e80520c6e20d1a6a8  ./a.txt
d7d47580f32d05073b8c54d79e9acf57  ./result.txt
d41d8cd98f00b204e9800998ecf8427e  ./ss/m.txt //看到这里了吗？有子目录哦~
6dce8838b88fca09004b5f9fcf00e7ea  ./file.txt</pre>
</div>
<div><strong>进行校验：</strong>
<pre class="lang:default decode:true">[root@host100 ~]# md5sum -c a
./md5.txt: OK
./b.txt: OK
./a.txt: OK
./result.txt: OK
./ss/m.txt: OK
./file.txt: OK</pre>
</div>
<div><strong>需要注意的情况：</strong></div>
<div>如果你要反校验的目录里面在a文件里面没有，最后的结果会是Fail,但是，单个的校验结果可以通过文件后的OK和Fail来确定结果的正确性！</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>91</wp:post_id>
		<wp:post_date><![CDATA[2013-08-08 00:55:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 16:55:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90shell%e3%80%91md5%e6%a0%a1%e9%aa%8c%e5%8f%8a%e5%a4%9a%e7%ba%a7%e8%be%83%e9%aa%8c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<category domain="post_tag" nicename="shell-2"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="%e5%91%bd%e4%bb%a4"><![CDATA[命令]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[970]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>248</wp:comment_id>
			<wp:comment_author><![CDATA[beebol]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ww103421245@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.149.157.21]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-10 11:51:52]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-10 03:51:52]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[如果查找的文件名、目录里包含空格和中文字符,md5sum 需要把文件名加上双引号。这个还得用上xargs中的-i参数,具体为：find a/ b/  -type f |xargs -i md5sum "{}" >>Server_Encrypt_ding.txt]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>250</wp:comment_id>
			<wp:comment_author><![CDATA[vaster]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lz.710@163.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://vaster.itopers.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.149.157.78]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-10 21:21:51]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-10 13:21:51]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[soga.学习啦，下次知道啦！]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>【Linux】umask默认权限</title>
		<link>http://www.itopers.com/?p=94</link>
		<pubDate>Wed, 07 Aug 2013 17:00:55 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div><span style="font-family: 微软雅黑;">对每一个新创建的文件或目录，系统都会自动赋予一个默认的权限。可以使用umask命令设置文件或目录的默认权限。</span></div>
<div><span style="font-family: 微软雅黑;">umask命令的格式如下所示：</span></div>
<div><span style="font-family: 微软雅黑;">umask [mask]</span></div>
<div><span style="font-family: 微软雅黑;">其中[mask]可以是由4个8进制数字组成的权限掩码，直接使用umask命令可以显示系统默认的权限掩码：</span></div>
<div><span style="font-family: 微软雅黑;"> #umask</span></div>
<div><span style="font-family: 微软雅黑;">  0022</span></div>
<div></div>
<div><b><span style="font-family: 微软雅黑;">如何计算默认权限？</span></b></div>
<div><span style="font-family: 微软雅黑;">通常新建文件的默认权限为0666，新建目录的权限为0777，与当前的权限的权限掩码（二进制）作与运算，再将默认权限与得到的权限相减，即可得到创建文件的最终权限。</span></div>
<div></div>
<div><span style="font-family: 微软雅黑;">实例1：umask 0022</span></div>
<div><span style="font-family: 微软雅黑;">实例2：umask  0031/umask u=rwx,g=r,o=rw</span></div>
<div><span style="font-family: 微软雅黑;"># umask  </span></div>
<div><span style="font-family: 微软雅黑;">0031  </span></div>
<div><span style="font-family: 微软雅黑;"># touch  p  </span></div>
<div># mkdir  M</div>
<div># ls  -l</div>
<div>drwxr--rw- 2 root root 4096 07-26 09:15 M</div>
<div>-rw-r--rw- 1 root root    0 07-26 09:14 p</div>
<div></div>
<div>031的二进制（000，011，001）</div>
<div>777的二进制（111，111，111）</div>
<div>666的二进制（110，110，110）</div>
<div><span style="font-family: 微软雅黑;">目录权限计算：</span></div>
<div><span style="font-family: 微软雅黑;">777 &amp; 031 = 031  相减=777-031=746</span></div>
<div><span style="font-family: 微软雅黑;">666 &amp; 031 = 020  </span>相减=666-020=646</div>
<div></div>
<div><span style="font-family: 微软雅黑;">还有一个简单的方法，如果是目录或umask各者为偶数的话，直接相减，</span></div>
<div><span style="font-family: 微软雅黑;">                                如果是文件且umask有部分位数为奇数，则将奇数位的数减1，再相减</span></div>
<div></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date><![CDATA[2013-08-08 01:00:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 17:00:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91umask%e9%bb%98%e8%ae%a4%e6%9d%83%e9%99%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e6%9d%83%e9%99%90"><![CDATA[权限]]></category>
		<category domain="post_tag" nicename="%e7%b3%bb%e7%bb%9f%e5%9f%ba%e7%a1%80"><![CDATA[系统基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[569]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【程序安全】Fork炸弹</title>
		<link>http://www.itopers.com/?p=99</link>
		<pubDate>Wed, 07 Aug 2013 17:07:26 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=99</guid>
		<description></description>
		<content:encoded><![CDATA[<div>          Fork炸弹是一个非常经典的递归程序，程序所做的事情只有一样：以极快的速度创建大量进程（进程数呈以2为底数的指数增长趋势），并以此消耗系统分配予进程的可用空间使进程表饱和，而系统在进程表饱和后就无法运行新程序，除非进程表中的某一进程终止；但由于fork炸弹程序所创建的所有实例都会不断探测空缺的进程槽并尝试取用以创建新进程，因而即使在某进程终止后也基本不可能运行新进程。fork炸弹生成的子程序在消耗进程表空间的同时也会占用CPU和内存，从而导致系统与现有进程运行速度放缓，响应时间也会随之大幅增加，以致于无法正常完成任务，从而使系统的正常运作受到严重影响

<strong>Bash中的fork炸弹：</strong>
.(){ .|.&amp; };.
乍一样，感觉像乱写的几个符号一样，实际上，它的功能大得很，千万别随便就去执行它。
bash 中的 fork 炸弹的解释
.()
{
.|.&amp;
}
;
.
第 1 行说明下面要定义一个函数，函数名为小数点，没有可选参数。
第 2 行表示函数体开始。
第 3 行是函数体真正要做的事情，首先它递归调用本函数，然后利用管道调用一个新进程（它要做的事情也是递归调用本函数），并将其放到后台执行。
第 4 行表示函数体结束。
第 5 行并不会执行什么操作，在命令行中用来分隔两个命令用。从总体来看，它表明这段程序包含两个部分，首先定义了一个函数，然后调用这个函数。
第 6 行表示调用本函数。
这样，.(){ .|.&amp; };.就很清晰了，如果有兴趣的话，可以在自己的虚拟机上试试，执行完之后，你会发现系统运行巨慢，也杀不死它，最后看到系统的服务一个个被杀死，只能重启才能真正kill它。
<strong>谁来引爆fork炸弹：</strong>
除了恶意触发fork炸弹破坏的情况外，软件开发中有时也会不慎在程序中嵌入fork炸弹，如在用于监听网络套接字（英语：Network socket）并行使客户端-服务器结构系统中服务器端职责的应用程序中可能需要无限地进行循环（loop）与派生（fork）操作，而在这种情况下源代码内的细微错误就可能在测试中“引爆”fork炸弹。
如何杀死fork炸弹：
在系统中成功“引爆”fork炸弹后，我们可重启来使系统恢复正常运行；而若要以手动的方法使fork炸弹“熄火”，那前提就是必须杀死fork炸弹产生的所有进程。为此我们可以考虑使用程序来杀死fork炸弹产生的进程，但由于这一般需要创建新进程，且由于fork炸弹一直在探测与占用进程槽与内存空间，因而这一方法几乎不可能实现，而且用kill命令杀死进程后，释放出的进程槽又会被余下的fork炸弹线程所产生的新进程占用，
在Windows下，用户可以退出当前用户会话的方式使系统恢复正常，但此法奏效的前提是fork炸弹是在该用户的特定会话内触发的。
如何预防fork炸弹：
1.     写程序尽量严谨
2.     使用ulimit限制每个用户能够创建的进程数

实际上，fork 炸弹只是一个非常简单的递归函数，它并不涉及参数传递、返回值等问题，fork 炸弹让我们认识到了递归函数的强大功能，同时也意识到一旦使用不当，递归函数所造成的破坏将是巨大的。

<a href="http://zh.wikipedia.org/wiki/Fork%E7%82%B8%E5%BC%B9">http://zh.wikipedia.org/wiki/Fork%E7%82%B8%E5%BC%B9</a>
<div><a href="http://blog.sina.com.cn/s/blog_703f59920100n50y.html">http://blog.sina.com.cn/s/blog_703f59920100n50y.html</a></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date><![CDATA[2013-08-08 01:07:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 17:07:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e7%a8%8b%e5%ba%8f%e5%ae%89%e5%85%a8%e3%80%91fork%e7%82%b8%e5%bc%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<category domain="post_tag" nicename="shell-2"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="%e5%ae%89%e5%85%a8"><![CDATA[安全]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[36]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[808]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux系统文件】etc/hosts.allow和/etc/hosts.deny</title>
		<link>http://www.itopers.com/?p=102</link>
		<pubDate>Wed, 07 Aug 2013 17:10:14 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=102</guid>
		<description></description>
		<content:encoded><![CDATA[这两个文件是tcpd服务器的配置文件，tcpd服务器可以控制外部IP对本机服务的访问。这两个配置文件的格式如下：
<pre>#服务进程名:主机列表:当规则匹配时可选的命令操作
server_name:hosts-list[:command]</pre>
/etc/hosts.allow控制可以访问本机的IP地址，/etc/hosts.deny控制禁止访问本机的IP。

如果两个文件的配置有冲突，以/etc/hosts.deny为准。下面是一个/etc/hosts.allow的示例：
<pre>ALL:127.0.0.1         #允许本机访问本机所有服务进程
smbd:192.168.0.0/255.255.255.0     #允许192.168.0.网段的IP访问smbd服务</pre>
ALL关键字匹配所有情况，EXCEPT匹配除了某些项之外的情况，PARANOID匹配你想控制的IP地址和它的域名不匹配时(域名伪装)的情况。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date><![CDATA[2013-08-08 01:10:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 17:10:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e7%b3%bb%e7%bb%9f%e6%96%87%e4%bb%b6%e3%80%91etchosts-allow%e5%92%8cetchosts-deny]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6"><![CDATA[配置文件]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[26]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[596]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux】主机间做信任（单向和双向）</title>
		<link>http://www.itopers.com/?p=104</link>
		<pubDate>Wed, 07 Aug 2013 17:13:37 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=104</guid>
		<description></description>
		<content:encoded><![CDATA[<div>本机：192.168.137.100(localhost)</div>
<div>远程主机：192.168.137.101（host101）</div>
<div>
<ul>
	<li><b>建立本机与远程主机间的<span style="color: #328712;">单向信任</span>：</b></li>
</ul>
生成密钥文件

</div>
<div>
<pre class="lang:vim decode:true">[root@localhost ~]# ssh-keygen -b 2048 -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/root/.ssh/id_rsa):
Created directory '/root/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
af:ec:24:ef:ab:5b:6b:17:f9:e2:d2:5a:4d:cf:0c:5d root@localhost.localdomain</pre>
</div>
将本地密钥拷贝到远程主机
<pre class="lang:vim decode:true">[root@localhost ~]# cd .ssh/ 
[root@localhost .ssh]# ls id_rsa  id_rsa.pub 
[root@localhost .ssh]# ssh-copy-id -i id_rsa.pub root@192.168.137.101     
（如果有多台，内容也是被追加进去的）
</pre>
<div>
<ul>
	<li><b>建立本机与远程主机间的<span style="color: #328712;">双向信任</span>：（在单向信任的基础上再做的操作）</b></li>
</ul>
</div>
在远程主机生成密钥文件
<div>
<pre class="lang:vim decode:true">[root@localhost .ssh]# ssh 192.168.137.101 "ssh-keygen -b 2048 -t rsa"
Enter file in which to save the key (/root/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Generating public/private rsa key pair.
Your identification has been saved in /root/.ssh/id_rsa.
Your public key has been saved in /root/.ssh/id_rsa.pub.
The key fingerprint is:
46:2d:8b:8b:ba:ba:06:a5:b9:59:b6:bb:a5:72:6d:de root@host101.localdomain</pre>
将远程主机的公钥拷贝到本机

</div>
<div>
<pre class="lang:vim decode:true">[root@localhost .ssh]# scp 192.168.137.101:~/.ssh/id_rsa.pub ./authorized_keys
（scp的内容不可以直接被cat,所以，如果有多台，可以先改名为tmp.txt或其他，再追加到authorized_keys） id_rsa.pub                                     100%  406     0.4KB/s   00:00
[root@localhost .ssh]# ll
total 32
-rw-r--r-- 1 root root  406 Oct 15 18:24 authorized_keys
-rw------- 1 root root 1671 Oct 15 17:10 id_rsa
-rw-r--r-- 1 root root  408 Oct 15 17:10 id_rsa.pub
-rw-r--r-- 1 root root  397 Oct 15 18:04 known_hosts</pre>
</div>
<div>
<ul>
	<li><b>更多主机间建立<span style="color: #328712;">信任</span></b></li>
</ul>
</div>
<div>将生成的authorized_keys文件copy到其他主机的.ssh目录即可。</div>
<div></div>
<div>
<ul>
	<li><span style="color: #ff0000;"><b>无法建立信任关系时排错步骤</b></span></li>
</ul>
<span style="color: #ff0000;">1.AB主机名是默认的Localhost，如果AB之间的主机名相同，可能会导致无法成功。</span>要修改主机名用hostname 命令，修改/etc/sysconfig/network,then restart your server.
<div><span style="color: #ff0000;">2.查看SSH配置文件/etc/ssh/ssh_config,找到IdentityFile所指定的文件是什么，</span>有的不是默认的id_rsa,这里指定的文件要和第一部分生成的文件名要相同，这里是id_rsa.</div>
<div><span style="color: #ff0000;">请检查/etc/ssh/sshd_config 里面是否设置Allowusers了</span>。</div>
<div></div>
<div><span style="color: #ff0000;">3.查看B机authorized-keys的文件权限是否为600或者644 (<a href="http://blogs.thescallop.com/zhouxiuhu/?p=320" rel="nofollow"><span style="color: #ff0000;">linux文件权限详解</span></a>)，</span>如直接在server机器上vi或touch建立文件authorized_keys，可能会导致信任关系无法建立。</div>
<div>（实践证明：如果是root之间建信任，直接644就ok,如果是非root用户，644权限是不行的。必须要改成700，600好像也行）</div>
<div></div>
<div><span style="color: #ff0000;">4.查看/var/log/secure日志，里面应该有一些蛛丝马迹可以供你参考</span></div>
<div><span style="color: #ff0000;"> </span></div>
<div></div>
<div>
<ul>
	<li><b>ssh-copy-id 的缺憾</b></li>
</ul>
</div>
<div>

ssh-copy-id有一个很要命的问题，那就是缺省它仅仅支持SSH运行在22<a href="http://www.net527.com/Ciscojishu/index.html" target="_blank"><span style="text-decoration: underline;">端口</span></a>的情况，不过实际上出于<a href="http://www.net527.com/Ciscojishu/index.html" target="_blank"><span style="text-decoration: underline;">安全</span></a>的需要，我们往往都会更改服务器的SSH<a href="http://www.net527.com/Ciscojishu/index.html" target="_blank"><span style="text-decoration: underline;">端口</span></a>，比如说改成<span style="color: #ff0000;">10022</span>端口，这时候你运行ssh-copy-id就会报错了，直接修改ssh-copy-id脚本当然可以修正这个问题，但是那样显得太生硬了，实际上还有更好的办法：
<div><b>[注: ssh-copy-id 把密钥追加到远程主机的 .ssh/authorized_key 上.]</b></div>
# vi ~/.ssh/config
加上内容：
Host server
Hostname ip
Port <span style="color: #ff0000;">10022</span>
你也可以单独只加入Port一行配置，那样就是一个全局配置，保存后再运行ssh-copy-id命令就不会报错了。
补充：经网友提示，如果端口不是22，不修改config文件，按如下方式也可以：
ssh-copy-id -i ~/.ssh/id_rsa.pub "-p <span style="color: #ff0000;">10022</span> user@server"

</div>
<div></div>
<div><b>附：</b></div>
</div>
<div># ssh-keygen</div>
<div># cat ~/.ssh/id_rsa.pub | ssh user@server "cat - &gt;&gt; ~/.ssh/authorized_keys"</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>104</wp:post_id>
		<wp:post_date><![CDATA[2013-08-08 01:13:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-07 17:13:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91%e4%b8%bb%e6%9c%ba%e9%97%b4%e5%81%9a%e4%bf%a1%e4%bb%bb%ef%bc%88%e5%8d%95%e5%90%91%e5%92%8c%e5%8f%8c%e5%90%91%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6"><![CDATA[配置文件]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1567]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【shell】linux下tar命令的两个用法</title>
		<link>http://www.itopers.com/?p=107</link>
		<pubDate>Thu, 08 Aug 2013 00:51:37 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=107</guid>
		<description></description>
		<content:encoded><![CDATA[ <span style="font-family: 宋体; color: #010101; font-size: small;">使用</span> <span style="font-family: Calibri; color: #010101; font-size: small;">tar</span><span style="font-family: 宋体; color: #010101; font-size: small;">命令时，当解压文件非常大时，但又只需要压缩包中的一个文件时，解决办法：</span>

  方法一：<span style="font-family: Tahoma;">tar -zxf test.tar.gz test/f1.txt -O &gt;/root/f1.txt     -O</span> <span style="font-family: 宋体;">参数在</span><span style="font-family: Tahoma;">AIX</span> <span style="font-family: 宋体;">不能用</span>

  方法二： tar -zxvf test.tar.gz f1.txt -C /root/

&nbsp;

当需要从一个打包的日志文件里过滤出某种日志行，进行分析。下面方法将进行不解压的情况下过滤出想要的日志：

tar -zxOf    login.log.2013-07-07          O是字母O,不是数字]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>107</wp:post_id>
		<wp:post_date><![CDATA[2013-08-08 08:51:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-08 00:51:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90shell%e3%80%91linux%e4%b8%8btar%e5%91%bd%e4%bb%a4%e7%9a%84%e4%b8%a4%e4%b8%aa%e7%94%a8%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<category domain="post_tag" nicename="tar"><![CDATA[tar]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[490]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux基础】让你的命令在后台运行</title>
		<link>http://www.itopers.com/?p=198</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=198</guid>
		<description></description>
		<content:encoded><![CDATA[最常用的方法：
<div>&amp;:     使用&amp;只能是将像mysqld一样已经做成守护进程的程序有效，否则关掉终端，照样掉</div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>198</wp:post_id>
		<wp:post_date><![CDATA[2013-08-18 10:11:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SSH连接过程详解</title>
		<link>http://www.itopers.com/?p=225</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=225</guid>
		<description></description>
		<content:encoded><![CDATA[<b># ssh -v 192.168.152.134</b>

OpenSSH_4.3p2, OpenSSL 0.9.8e-fips-rhel5 01 Jul 2008

debug1: Reading configuration data /etc/ssh/ssh_config

debug1: Applying options for *

debug1: Connecting to 192.168.152.134 [192.168.152.134] port 22.

debug1: Connection established.

debug1: permanently_set_uid: 0/0

debug1: identity file /root/.ssh/identity type -1

debug1: identity file /root/.ssh/id_rsa type 1

debug1: identity file /root/.ssh/id_dsa type -1

debug1: loaded 3 keys

debug1: Remote protocol version 1.99, remote software version OpenSSH_4.3

debug1: match: OpenSSH_4.3 pat OpenSSH*

debug1: Enabling compatibility mode for protocol 2.0

debug1: Local version string SSH-2.0-OpenSSH_4.3

debug1: SSH2_MSG_KEXINIT sent

debug1: SSH2_MSG_KEXINIT received

debug1: kex: server-&gt;client aes128-cbc hmac-md5 none

debug1: kex: client-&gt;server aes128-cbc hmac-md5 none

debug1: SSH2_MSG_KEX_DH_GEX_REQUEST(1024&lt;1024&lt;8192) sent

debug1: expecting SSH2_MSG_KEX_DH_GEX_GROUP

debug1: SSH2_MSG_KEX_DH_GEX_INIT sent

debug1: expecting SSH2_MSG_KEX_DH_GEX_REPLY

debug1: Host '192.168.152.134' is known and matches the RSA host key.

debug1: Found key in /root/.ssh/known_hosts:5

debug1: ssh_rsa_verify: signature correct

debug1: SSH2_MSG_NEWKEYS sent

debug1: expecting SSH2_MSG_NEWKEYS

debug1: SSH2_MSG_NEWKEYS received

debug1: SSH2_MSG_SERVICE_REQUEST sent

debug1: SSH2_MSG_SERVICE_ACCEPT received

debug1: Authentications that can continue: publickey,gssapi-with-mic,password

debug1: Next authentication method: gssapi-with-mic

debug1: Unspecified GSS failure.  Minor code may provide more information

Unknown code krb5 195

&nbsp;

debug1: Unspecified GSS failure.  Minor code may provide more information

Unknown code krb5 195

&nbsp;

debug1: Unspecified GSS failure.  Minor code may provide more information

Unknown code krb5 195

&nbsp;

debug1: Next authentication method: publickey

debug1: Trying private key: /root/.ssh/identity

debug1: Offering public key: /root/.ssh/id_rsa

debug1: Server accepts key: pkalg ssh-rsa blen 277

debug1: read PEM private key done: type RSA

debug1: Authentication succeeded (publickey).

debug1: channel 0: new [client-session]

debug1: Entering interactive session.

debug1: Sending environment.

debug1: Sending env LANG = en_US.UTF-8]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>225</wp:post_id>
		<wp:post_date><![CDATA[2013-08-19 21:51:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Puppet】什么是Puppet——精通Puppet配置管理工具</title>
		<link>http://www.itopers.com/?p=470</link>
		<pubDate>Tue, 10 Sep 2013 05:32:50 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=470</guid>
		<description></description>
		<content:encoded><![CDATA[<b>第1章  开始使用Puppet</b>

<strong>     1.1  什么是Puppet</strong>

Puppet是一个基于Ruby，并使用GPLv2协议授权的开源软件，它即能以“客户端-服务端”的方工运行，也能独立运行。它可以用来管理Unix（包括OSX）、Linux以及Windows平台。

Puppet管理一台主机的整个生命周期：  初始化——安装——升级——维护——服务迁移/下架
<p style="text-align: center;"><strong>   Puppet模型：</strong></p>
<p style="text-align: center;"><a href="http://www.itopers.com/wp-content/uploads/2013/09/1-1_Puppet模型.png"><img class="aligncenter" alt="1-1_Puppet模型" src="http://www.itopers.com/wp-content/uploads/2013/09/1-1_Puppet模型.png" width="283" height="173" /></a></p>
1.1.1 部署

通常情况下，Puppet都是以简单的客户端-服务端模型进行部署。服务端称“Master”，客户端称“Agent”,客户端本身，被定义为一个节点。

PuppetMaster在一台主机上以守护进行的方工运行，它包含了环境所需的所有配置，PuppetAgent则通过 SSL协议进行加密和验证的连接与PuppetMaster进行通信。

当Agent已经获得需要的配置或没有任何可以被应用的配置时，就不会做任何事情，这样就意味着，它不会在重复操作的情况下，浪费服务器资源。

每个客户端都可以以守护进行的方工来运行Puppet(如使用cron),也可以手动启动。通常的做法是以守护进行的方式启动，并周期性地与Master进行通信（默认30min），以此来保证配置已符合他们的需求。

另一种部署方式：即抛开Master以独立方式运行，这种模式下，配置放置在被管理的主机上，然后通过手动运行puppet程序来执行和应用这些配置。

1.1.2 配置语言及资源抽象层

配置项在Puppet中被称为“资源”，大部分配置工具，如shell或perl脚本是命令或者过程式的(即要该如何做)，而Puppet用户只需要声明它们的主机应该处于什么状态即可，如何达到这种状态由Puppet负责。
<ul>
	<li>配置语言</li>
</ul>
example:实现在一个有RedHat、Ubuntu、Solaris的主机环境中，为所有主机安装上vim程序。

手工操作步骤：
<pre>连接到目标主机（包含输入密码或提供密钥） 
检查是否安装了vim 
没有安装则使用平台上适当的命令来安装它（yum、apt-get） 
返回安装结果</pre>
Puppet完成方法（定义vim配置资源）：
<pre>package { "vim":    
//可看作package["vim"]的资源
      ensure =&gt; present,   
      //ensure用于指定包的状态（安装/卸载）；present表示希望安装上它、absent表示希望卸载它
}</pre>
资源包的组成：类型[package]（软件包、服务或定时任务）、标题[vim]及一系列属性[ensure]资源抽象层
<ul>
	<li>资源抽象层</li>
</ul>
&nbsp;

<img title="更多..." alt="" src="http://www.itopers.com/wp-includes/js/tinymce/plugins/wordpress/img/trans.gif" /><img title="更多..." alt="" src="http://www.itopers.com/wp-includes/js/tinymce/plugins/wordpress/img/trans.gif" />

asdfasdfa

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>470</wp:post_id>
		<wp:post_date><![CDATA[2013-09-10 13:32:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-10 05:32:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="puppet"><![CDATA[puppet]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【shell命令】vimdiff</title>
		<link>http://www.itopers.com/?p=506</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=506</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>506</wp:post_id>
		<wp:post_date><![CDATA[2013-09-12 18:50:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【FAQ】Sendmail常见问题</title>
		<link>http://www.itopers.com/?p=508</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=508</guid>
		<description></description>
		<content:encoded><![CDATA[<p align="center"><b> </b></p>
<p align="center"><b>【PXE】海外PXE管理</b></p>
&nbsp;

文档信息
<div align="center">
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="133">
<p align="center">项目名称/流程名称</p>
</td>
<td width="136">
<p align="center">PXE</p>
</td>
<td width="95">
<p align="center">文档名称</p>
</td>
<td width="198">
<p align="center">【PXE】海外PXE管理</p>
</td>
</tr>
<tr>
<td width="133">
<p align="center">编辑者</p>
</td>
<td width="136">
<p align="center">刘珍</p>
</td>
<td width="95">
<p align="center">提交时间</p>
</td>
<td width="198">
<p align="center">2014.08.04</p>
</td>
</tr>
<tr>
<td width="133">
<p align="center">文档版本</p>
</td>
<td width="136">
<p align="center">1.0</p>
</td>
<td width="95">
<p align="center">文档密级</p>
</td>
<td width="198">
<p align="center"><b>内部公开</b></p>
</td>
</tr>
<tr>
<td width="133">
<p align="center">部门</p>
</td>
<td width="136">
<p align="center">系统运维部</p>
</td>
<td width="95">
<p align="center">联系方式</p>
</td>
<td width="198">
<p align="center">Liuzhen_xt@cyou-inc.com</p>
</td>
</tr>
</tbody>
</table>
</div>
&nbsp;

版本历史信息
<div align="center">
<table border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td width="89">
<p align="center">版本编号</p>
</td>
<td width="123">
<p align="center">版本提交日期</p>
</td>
<td width="113">
<p align="center">创建者/修改者</p>
</td>
<td width="85">
<p align="center">修改说明</p>
</td>
<td width="151">
<p align="center">文件名</p>
</td>
</tr>
<tr>
<td width="89">
<p align="center">1.0</p>
</td>
<td width="123">
<p align="center">2014.03.20</p>
</td>
<td width="113">
<p align="center">刘珍</p>
</td>
<td width="85">
<p align="center">创建</p>
</td>
<td width="151">
<p align="center">【PXE】海外PXE管理</p>
</td>
</tr>
</tbody>
</table>
</div>
&nbsp;

文档说明

本文件中出现的任何文字叙述、文档格式、插图、照片、方法、过程等内容，除非另有特别注明，版权均属北京畅游时代网络科技有限公司所有，受到有关产权及版权法保护。任何个人、机构未经北京畅游时代网络科技有限公司的书面授权许可，不得复制、引用或传播本文件的任何片断，无论通过电子形式或非电子形式。

<b><br clear="all" /> </b>

&nbsp;

目录

1.     PXE说明... 3

2.     PXE管理架构... 3

3.     PXE服务器信息... 4

4.     PXE服务器登录方式... 4

5.     PXE初始化项... 4

6.     PXE目录规范... 5

7.     PXE中添加一个系统... 7

&nbsp;

<b><br clear="all" /> </b>

<b> </b>
<h2>1.  PXE说明</h2>
海外PXE每个合作方均有一个，每个自建IDC各一个。合作方的PXE主要用于来安装对应项目所需要的操作系统即可，自建IDC将提前准备好几类常用操作系统。目前共有6个天龙各维护一套PXE，3个自建IDC各维护一套PXE，共8个。（北美天龙和北美IDC是同一个）

为了更好地统一管理PXE服务器，特别建立以下规范。

&nbsp;
<h2>2.  PXE管理架构</h2>
<b>当前模式：</b>

&nbsp;
<table width="100%" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>

<b>缺点：</b>某台PXE服务器有脚本或配置有改动时，同步到其他PXE服务器非常不方便

<b>优点：</b>直接利用现有的信任，不用再做修改

</div></td>
</tr>
</tbody>
</table>
&nbsp;

<b>后期模式：</b>
<table width="100%" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>

<b>缺点：</b>需要为各个PXE开通PXE中控连接的信任

<b>优点：</b>制定好数据同步方式后，有利于保持各个PXE服务器的高度一致

</div></td>
</tr>
</tbody>
</table>
&nbsp;

&nbsp;

&nbsp;
<h2>3.  PXE服务器信息</h2>
<table width="577" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td nowrap="nowrap" width="76">
<p align="center">功能</p>
</td>
<td nowrap="nowrap" width="104">
<p align="center">内网</p>
</td>
<td nowrap="nowrap" width="113">
<p align="center">外网</p>
</td>
<td valign="top" width="283">
<p align="center">目前提供的系统</p>
</td>
</tr>
<tr>
<td width="76">PXE中控</td>
<td width="104">10.127.128.7</td>
<td width="113">111.206.12.65</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">北美PXE</td>
<td width="104">10.10.81.</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">马来PXE</td>
<td width="104">10.60.145.226</td>
<td width="113">113.23.145.226</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">香港PXE</td>
<td width="104">10.52.201.26</td>
<td width="113">63.221.201.26</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">香港天龙</td>
<td width="104">&nbsp;</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">马来天龙</td>
<td width="104">&nbsp;</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">泰国天龙</td>
<td width="104">&nbsp;</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">越南天龙</td>
<td width="104">&nbsp;</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">台湾天龙</td>
<td width="104">&nbsp;</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
</tbody>
</table>
&nbsp;
<h2>4.  PXE服务器登录方式</h2>
PXE中控：直接从49段虚拟跳转机登录即可（PXE中控与GS备中控共用）

各地PXE服务器：从GS中控 à 登录各地区中控 à cat /root/ipinfo/iplist à查看得到PXE机器IP à 直接ssh到PXE服务器

&nbsp;
<h2>5.  PXE初始化项</h2>
提供的操作系统版本：

自建IDC：
<table width="577" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td nowrap="nowrap" width="76">
<p align="center">功能</p>
</td>
<td nowrap="nowrap" width="104">
<p align="center">内网</p>
</td>
<td nowrap="nowrap" width="113">
<p align="center">外网</p>
</td>
<td valign="top" width="283">
<p align="center">目前提供的系统</p>
</td>
</tr>
<tr>
<td width="76">PXE中控</td>
<td width="104">10.127.128.7</td>
<td width="113">111.206.12.65</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">北美PXE</td>
<td width="104">10.10.81.</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
</tbody>
</table>
&nbsp;

合作方IDC：
<table width="577" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td nowrap="nowrap" width="76">
<p align="center">功能</p>
</td>
<td nowrap="nowrap" width="104">
<p align="center">内网</p>
</td>
<td nowrap="nowrap" width="113">
<p align="center">外网</p>
</td>
<td valign="top" width="283">
<p align="center">目前提供的系统</p>
</td>
</tr>
<tr>
<td width="76">PXE中控</td>
<td width="104">10.127.128.7</td>
<td width="113">111.206.12.65</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">北美PXE</td>
<td width="104">10.10.81.</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
</tbody>
</table>
&nbsp;

系统初始化项：PXE中需要将常见的系统初始化含盖在内，下表为系统初始化选项。
<table width="577" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td nowrap="nowrap" width="76">
<p align="center">功能</p>
</td>
<td nowrap="nowrap" width="104">
<p align="center">内网</p>
</td>
<td nowrap="nowrap" width="113">
<p align="center">外网</p>
</td>
<td valign="top" width="283">
<p align="center">目前提供的系统</p>
</td>
</tr>
<tr>
<td width="76">&nbsp;</td>
<td width="104">&nbsp;</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">&nbsp;</td>
<td width="104">&nbsp;</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
</tbody>
</table>
&nbsp;

天龙项目初始化项：
<table width="577" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td nowrap="nowrap" width="76">
<p align="center">功能</p>
</td>
<td nowrap="nowrap" width="104">
<p align="center">内网</p>
</td>
<td nowrap="nowrap" width="113">
<p align="center">外网</p>
</td>
<td valign="top" width="283">
<p align="center">目前提供的系统</p>
</td>
</tr>
<tr>
<td width="76">&nbsp;</td>
<td width="104">&nbsp;</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
<tr>
<td width="76">&nbsp;</td>
<td width="104">&nbsp;</td>
<td width="113">&nbsp;</td>
<td valign="top" width="283">&nbsp;</td>
</tr>
</tbody>
</table>
&nbsp;
<h2>6.  PXE目录规范</h2>
<b>配置文件目录：</b>

dhcp配置文件：/etc/dhcpd.conf

tftp配置文件：/etc/xinetd.d/tftp

nfs配置文件：/etc/exports

<b> </b>

<b>PXE</b><b>主目录：/home/pxe</b>

<b>各个子目录功能：</b>

&nbsp;
<table width="100%" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>

<b>ISO</b>

用来存放镜像文件*.iso

<b>conf</b>

用于存放自动装机必备的kickstart文件

<b>init</b>

用于存放装机后的自动初始化脚本/工具

<b>softconf</b>

用于存放PXE必备服务的配置文件备份

<b>source</b>

用于存放挂载后iso源

<b>tftpboot</b>

用于存放引导文件及引导配置等

</div></td>
</tr>
</tbody>
</table>
<b>PXE</b><b>命名规范</b>

镜像文件命名：系统-版本-位数.iso; ex: CentOS-6.5-x86_64-bin-DVD1.iso

配置文件命名：系统_版本_位数.cfg; ex: centos_6.5_64.cfg

source命名：版本_系统_位数; ex: CENTOS_6.5_64

tftp系统引导目录命名：系统_版本_位数; ex: centos_6.5_64

&nbsp;
<h2>7.  PXE中添加一个系统</h2>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>508</wp:post_id>
		<wp:post_date><![CDATA[2014-09-05 00:08:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>linux AS4中的Bug 167580-post_create: setxattr failed</title>
		<link>http://www.itopers.com/?p=592</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=592</guid>
		<description></description>
		<content:encoded><![CDATA[运维博客没运行几天就无法发博客了（这是我在部门需要的博客不是我这个博客啊，主要记录）
<pre class="lang:default decode:true">[root@OA-test ~]# df -h
Filesystem            容量  已用 可用 已用% 挂载点
/dev/sda1              67G   64G     0 100% /
none                  3.9G     0  3.9G   0% /dev/shm</pre>
&nbsp;
<pre class="lang:default decode:true">[root@OA-test ~]# lsof |sort -k7 -n |tail 
xfs       31454     xfs  mem       REG                8,1  1636504    8487159 /lib64/tls/libc-2.3.4.so
xinetd     3653    root  mem       REG                8,1  1636504    8487159 /lib64/tls/libc-2.3.4.so
bash      14321    root  mem       REG                8,1 48539824    2313413 /usr/lib/locale/locale-archive
bash       8431    root  mem       REG                8,1 48539824    2313413 /usr/lib/locale/locale-archive
crond     30959    root  mem       REG                8,1 48539824    2313413 /usr/lib/locale/locale-archive
cupsd      3546    root  mem       REG                8,1 48539824    2313413 /usr/lib/locale/locale-archive
lsof      23904    root  mem       REG                8,1 48539824    2313413 /usr/lib/locale/locale-archive
lsof      23907    root  mem       REG                8,1 48539824    2313413 /usr/lib/locale/locale-archive
sort      23905    root  mem       REG                8,1 48539824    2313413 /usr/lib/locale/locale-archive
tail      23906    root  mem       REG                8,1 48539824    2313413 /usr/lib/locale/locale-archive</pre>
lsof看一下打开的文件大小并不大
<pre class="lang:sh decode:true">[root@OA-test /]# lsof |awk '{a=a+$7}END{print a}' 
3391313305</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>592</wp:post_id>
		<wp:post_date><![CDATA[2014-08-02 16:33:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Python-基础】异常处理（try...except）</title>
		<link>http://www.itopers.com/?p=1119</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1119</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>为什么要使用异常</h3>
<ol>
	<li>错误处理，当python检查以程序运行时的错误就引发异常，你可以在程序里捕捉和处理这些错误，或者忽略它们。)</li>
	<li>事件通知，异常也可以作为某种条件的信号，而不需要在程序里传送结果标志或显式地测试它们。</li>
	<li>特殊情形处理，有时有些情况是很少发生的，把相应的处理代码改为异常处理会更好一些。</li>
	<li>奇特的控制流，异常是一个高层次的"goto"，可以把它作为实现奇特的控制流的基础。如反向跟踪等。</li>
</ol>
<h3>异常的基础知识</h3>
1. python的try语句有两种风格

一种是处理异常<b>（try/except/else）</b>

一种是无论是否发生异常都将执行最后的代码<b>（try/except/finally）</b>。

2. try/except/else风格
<div>
<pre class="lang:vim decode:true">try:
&lt;语句&gt;       #运行别的代码
except &lt;名字&gt;：
&lt;语句&gt;       #如果在try部份引发了'name'异常
except &lt;名字&gt;，&lt;数据&gt;:
&lt;语句&gt;       #如果引发了'name'异常，获得附加的数据
else:
&lt;语句&gt;        #如果没有异常发生</pre>
<b>try的工作原理是</b>

</div>
<div><code>当开始一个try语句后，python就在当前程序的上下文中作标记，这样当异常出现时就可以回到这里，try子句先执行，接下来会发生什么依赖于执行时是否出现异常。</code></div>
<ul>
	<li><code>如果当try后的语句执行时发生异常，python就跳回到try并执行第一个匹配该异常的except子句，异常处理完毕，控制流就通过整个try语句（除非在处理异常时又引发新的异常）。</code></li>
	<li><code>如果在try后的语句里发生了异常，却没有匹配的except子句，异常将被递交到上层的try，或者到程序的最上层（这样将结束程序，并打印缺省的出错信息）。</code></li>
	<li><code>如果在try子句执行时没有发生异常，python将执行else语句后的语句（如果有else的话），然后控制流通过整个try语句。</code></li>
</ul>
<code>3. try/finally风格</code>
<div>
<pre class="lang:vim decode:true">try:
&lt;语句&gt;
finally:
&lt;语句&gt;    #退出try时总会执行</pre>
</div>
<code>python总会执行finally子句，无论try子句执行时是否发一异常。</code>
<ul>
	<li><code>如果没有发生异常，python运行try子句，然后是finally子句，然后继续。</code></li>
	<li><code>如果在try子句发生了异常，python就会回来执行finally子句，然后把异常递交给上层try，控制流不会通过整个try语句。</code></li>
</ul>
<code>当你想无论是否发生异常都确保执行某些代码时，try/finally是有用的。</code>

<dl><dt>4. raise: 手工地引发一个异常</dt><dt>
<pre class="lang:vim decode:true ">raise &lt;name&gt;    #手工地引发异常
raise &lt;name&gt;,&lt;data&gt;    #传递一个附加的数据</pre>
&nbsp;

</dt></dl>&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1119</wp:post_id>
		<wp:post_date><![CDATA[2015-11-12 23:50:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【算法】最大公约数和小最公倍数（辗转相除法）</title>
		<link>http://www.itopers.com/?p=1159</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1159</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1159</wp:post_id>
		<wp:post_date><![CDATA[2015-12-22 23:32:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.itopers.com/?p=1169</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1169</guid>
		<description></description>
		<content:encoded><![CDATA[<div></div>
<table style="height: 158px;" width="578">
<tbody>
<tr>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
</tr>
<tr>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
</tr>
<tr>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
</tr>
<tr>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
<td>
<div></div></td>
</tr>
</tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1169</wp:post_id>
		<wp:post_date><![CDATA[2015-12-24 23:29:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[0000-00-00 00:00:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[]]></wp:post_name>
		<wp:status><![CDATA[draft]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【windows】mstsc远程桌面挂载本地资源</title>
		<link>http://www.itopers.com/?p=116</link>
		<pubDate>Thu, 08 Aug 2013 01:27:29 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[远程登录到别的机器后，需要拷由一些本地文件到远程机器上。可以通过在远程连接时的”本地资源“中选中磁盘。

<a href="http://www.itopers.com/wp-content/uploads/2013/08/mstsc.jpg"><img class="alignnone size-full wp-image-117" alt="mstsc本地资源" src="http://www.itopers.com/wp-content/uploads/2013/08/mstsc.jpg" width="422" height="551" /></a>

选中之后就可以在远程服务器上看到本地的磁盘了。这样，本地机器就可以与远程机器进行文件共享，传输了。如果你远程连接时选中了本地资源，但在远程机器中没有显示本地资源，那么就按如下方法可以开启：

<a href="http://www.itopers.com/wp-content/uploads/2013/08/run.jpg"><img class="alignnone size-full wp-image-118" alt="run" src="http://www.itopers.com/wp-content/uploads/2013/08/run.jpg" width="408" height="231" /></a>

在运行中输入"gpedit.msc"，然后点击：“计算机配置”-“管理模板”-“windows组件”-“终端服务”（在wind7中叫“远程桌面服务”-“远程桌面会话主机”-“设备和资源重定向”-双击”不允许驱动器重定向”，然后配置成”禁用“）-“客户端/服务器数据重写向”-双击”不允许驱动器重定向”，然后配置成”禁用“就可以了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date><![CDATA[2013-08-08 09:27:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-08 01:27:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90windows%e3%80%91mstsc%e8%bf%9c%e7%a8%8b%e6%a1%8c%e9%9d%a2%e6%8c%82%e8%bd%bd%e6%9c%ac%e5%9c%b0%e8%b5%84%e6%ba%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mstsc"><![CDATA[mstsc]]></category>
		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>
		<category domain="post_tag" nicename="%e8%b5%84%e6%ba%90%e9%87%8d%e5%ae%9a%e5%90%91"><![CDATA[资源重定向]]></category>
		<category domain="post_tag" nicename="%e8%bf%9c%e7%a8%8b%e6%a1%8c%e9%9d%a2"><![CDATA[远程桌面]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[955]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【shell】linux在在脚本后台运行程序和直接在终端后台启的不同</title>
		<link>http://www.itopers.com/?p=125</link>
		<pubDate>Fri, 09 Aug 2013 14:56:23 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=125</guid>
		<description></description>
		<content:encoded><![CDATA[今天突然接到一个电话，需要确定一下某程序是否已经启服。登录服务器查看时，果然不在了。后来问了一下操作的同学（实习生），结果是直接在终端启的程序，因为终端的seession是有时间限制的，在一定的时间内没有使用就会断开。终端一断，那么程序也就掉了。这最主要的原因是在我，没有让他记住启程序的脚本在哪里？

我解释了具体的原因，不知道明白了没？在这里我详细地说明一下，并做下具体的例子：

<strong>1、先写一个简单的脚本：while.sh</strong>

#!/bin/bash
for i in `seq 100`
do
echo $i
sleep 3
done
exit 0

<strong>2、然后通过sh while.sh  &amp;这种方式来启动</strong>

[root@localhost Desktop]# sh while.sh &amp;
[1] 24945

<strong>3、查看是存在的</strong>

[root@localhost ~]# ps -eo pid,ppid,cmd | grep while.sh
24945 23533 sh while.sh
24970 24113 grep while.sh

<strong>4、然后我将终端断开，发现已经没有再运行了</strong>

[root@localhost ~]# ps -eo pid,ppid,cmd | grep while.sh
24998 24113 grep while.sh

这说明：直接以command  &amp; 这种方式启，终端断开后，程序退出。

如果我们在脚本里启动呢？先写一个a.sh脚本来启动while.sh脚本。

[root@localhost Desktop]# cat a.sh
sh while.sh &gt;/dev/null &amp;
sleep 20         <span style="color: #ff0000;"><strong>#这里的等待20秒是为了父shell慢点退出</strong></span>

<strong>1、启动a.sh </strong>

[root@localhost Desktop]# sh a.sh

<strong> 2、查看，while.sh还在25191进程下面运行</strong>

[root@localhost ~]# ps -eo pid,ppid,cmd | grep while.sh
25192 <span style="color: #ff0000;"><strong>25191</strong></span> sh while.sh
25197 24113 grep while.sh

<strong>3、当这个脚本执行完毕后，或主动断开，再看</strong>

[root@localhost Desktop]# sh a.sh
[root@localhost Desktop]#

<strong>4、它已经运行到init进程下了，就算整个终端断开也不会退出</strong>

[root@localhost ~]# ps -eo pid,ppid,cmd | grep while.sh
25192<span style="color: #ff0000;"><strong> 1</strong> </span>sh while.sh
25273 24113 grep while.sh

为什么会这样呢？<span style="color: #ff0000;">具体原因是while.sh是在subshell中启动的，当父shell结束或终止后。子进程就成了孤儿进程，它会自动转到init下运行。</span>

当然linux下后台启动的方法还有好多，如：

nohup   command  &amp;

setsid    command   &amp;

(command  &amp;)

screen  -dmS    name

screen -r  name

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date><![CDATA[2013-08-09 22:56:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-09 14:56:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90shell%e3%80%91linux%e5%9c%a8%e5%9c%a8%e8%84%9a%e6%9c%ac%e5%90%8e%e5%8f%b0%e8%bf%90%e8%a1%8c%e7%a8%8b%e5%ba%8f%e5%92%8c%e7%9b%b4%e6%8e%a5%e5%9c%a8%e7%bb%88%e7%ab%af%e5%90%8e%e5%8f%b0%e5%90%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="init"><![CDATA[init]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<category domain="post_tag" nicename="shell-2"><![CDATA[shell]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[727]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux基础】yum/rpm查找so文件在哪个rpm包</title>
		<link>http://www.itopers.com/?p=127</link>
		<pubDate>Fri, 09 Aug 2013 15:14:16 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=127</guid>
		<description></description>
		<content:encoded><![CDATA[<div><span style="color: #000000;">         我们在用源码安装相关应用的时候，经常会遇到一种情况，说不能找到某个so文件，这时，就纠结了，不知道这个so属于哪个文件，有一种好方法，可以查找到：</span></div>
<div><span style="color: #ff0000;"><b> </b><strong>yum provides so名</strong></span></div>
<div><span style="color: #000000;">         但是，有时候，列出来的包有可以装上了，如果还是不管用，那么，就用</span></div>
<div><span style="color: #ff0000;"><strong>yum list |grep so名</strong></span></div>
<div><span style="color: #000000;">          再将查找到的安装上，也许能解决问题了</span></div>
<div></div>
<div><span style="color: #000000;">一个已经安装好的rpm包中包含那些文件 ，<span style="color: #ff0000;"><strong>rpm -ql packet-name</strong></span></span></div>
<ul>
	<li><span style="color: #000000;">[vaster@cloud ~]$ rpm -ql python |less</span>
<span style="color: #000000;"> /usr/bin/pydoc</span>
<span style="color: #000000;"> /usr/bin/python</span>
<span style="color: #000000;"> /usr/bin/python2</span>
<span style="color: #000000;"> /usr/bin/python2.6</span>
<span style="color: #000000;"> /usr/include/python2.6</span>
<span style="color: #000000;"> /usr/include/python2.6/pyconfig-32.h</span>
<span style="color: #000000;"> /usr/lib/python2.6</span>
<span style="color: #000000;"> /usr/lib/python2.6/BaseHTTPServer.py</span>
<span style="color: #000000;"> /usr/lib/python2.6/BaseHTTPServer.pyc</span></li>
</ul>
<span style="color: #000000;">查看一个文件属于哪个rpm包，<span style="color: #ff0000;"><strong> rpm -qf /path/so名 ----&gt;这里面接Path</strong></span></span>
<ul>
	<li><span style="color: #000000;">[vaster@cloud ~]$ rpm -qf /usr/lib/libformw.so</span>
<span style="color: #000000;"> ncurses-devel-5.7-3.20090208.el6.i686</span></li>
</ul>
<div><span style="color: #000000;"><!--more--><span style="color: #ff0000;"><strong>yum命令的其他用法：</strong></span></span></div>
<div><span style="color: #000000;">    安装： yum install 包名</span></div>
<div><span style="color: #000000;">    卸载：yum remove 包名</span></div>
<div><span style="color: #000000;">    查看包信息：yum info 包名</span></div>
<div><span style="color: #000000;">    查找包： yum search 包名/yum list mysql*</span></div>
<div><span style="color: #000000;">    列出可以更新的包：yum list updates</span></div>
<div><span style="color: #000000;">    列出已安装的包：yum list installed</span></div>
<div></div>
<div></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>127</wp:post_id>
		<wp:post_date><![CDATA[2013-08-09 23:14:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-09 15:14:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e5%9f%ba%e7%a1%80%e3%80%91yumrpm%e6%9f%a5%e6%89%beso%e6%96%87%e4%bb%b6%e5%9c%a8%e5%93%aa%e4%b8%aarpm%e5%8c%85]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[4183]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【OpenWrt】openwrt下Coova-chilli1.2.9的安装配置</title>
		<link>http://www.itopers.com/?p=136</link>
		<pubDate>Fri, 09 Aug 2013 16:03:35 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div><span style="font-family: 微软雅黑;">实际上，1.2.5与1.2.9的安装配置没什么区别，唯一的区别在于。这里的ipk包不是通过安装源获得，而且通过在ubuntu上进行openwrt交叉编译获得的。文件包放在附件中了。</span></div>
<div></div>
<div><span style="font-family: 微软雅黑;">操作步骤：</span></div>
<div>
<div></div>
<span style="font-family: 微软雅黑;"><b>1.  网络设置是必须通过的，使openwrt机器能正常上网 。</b></span>
<div><span style="font-family: 微软雅黑;"><b>2.     Coova安装配置</b></span></div>
<blockquote>
<div><span style="font-family: 微软雅黑;">#opkg install coova-chilli_1.2.9_x86_lz.ipk</span></div>
<div><span style="font-family: 微软雅黑;">#opkg install haserl</span></div></blockquote>
<div><span style="font-family: 微软雅黑;"><b>     外网接口，编辑 defaults 文件，打开外网接口，设置radius服务器，home等</b> </span></div>
<blockquote>
<div><span style="font-family: 微软雅黑;">#vim /etc/chilli/defaults</span></div>
<div><span style="font-family: 微软雅黑;">HS_WANIF=eth1 </span></div>
<div><span style="font-family: 微软雅黑;">---根据自己的网络配置选择网卡</span></div>
<div><span style="font-family: 微软雅黑;">--同时确认内网接口的配置正确（配置client连接时的网段）</span></div>
<div>

<span style="font-family: 微软雅黑;">安装完成后，配置文件在 /etc/chilli.conf(引用文件，一般不需要修改) 和 /etc/chilli 中。</span>

<span style="font-family: 微软雅黑;">defaults 默认参数</span>

<span style="font-family: 微软雅黑;">main.conf 主配置文件</span>

<span style="font-family: 微软雅黑;">hs.conf 认证服务配置文件</span>

<span style="font-family: 微软雅黑;">www 认证网站</span>

<span style="font-family: 微软雅黑;">wwwsh cgi网关脚本</span>

<span style="font-family: 微软雅黑;">up.sh 网络接口启动脚本</span>

<span style="font-family: 微软雅黑;">down.sh 网络接口关闭脚本 </span>

</div></blockquote>
<div><span style="font-family: 微软雅黑;"><b>     指定chilli正确使用 Haserl（在这个版本里面好像没这问题）</b></span></div>
<div><span style="font-family: 微软雅黑;"><b>     /etc/Init.d/chilli文件</b>
参考：http://dev.coova.org/svn/coova-ap/packages/kamikaze/coova-chilli/files/chilli.init
<b>3.     Coova的测试</b> </span></div>
<blockquote>
<div><span style="font-family: 微软雅黑;">#/etc/init.d/chilli start</span></div>
<div><span style="font-family: 微软雅黑;">启动后用ifconfig查看一下，应该生成了一个tun0接口，配置是main.conf中的配置。</span></div></blockquote>
<blockquote>
<div><span style="font-family: 微软雅黑;">将Winxp设置成DHCP</span></div>
<div><span style="font-family: 微软雅黑;">将获取到coovachill配置文件中设置网段的ip</span></div>
<div><span style="font-family: 微软雅黑;">访问任何公网地址，将跳转到coova认证界面，通过设置的radius服务器进行认证之后，即可访问公网了。</span></div></blockquote>
</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date><![CDATA[2013-08-10 00:03:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-09 16:03:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[openwrt%e4%b8%8bcoova-chilli1-2-9%e7%9a%84%e5%ae%89%e8%a3%85%e9%85%8d%e7%bd%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%97%a0%e7%ba%bf%e6%8a%80%e6%9c%af"><![CDATA[无线技术]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[6387]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>21760</wp:comment_id>
			<wp:comment_author><![CDATA[fang05161223]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[703475498@qq.con]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[124.114.10.243]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-10-13 10:33:29]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-10-13 02:33:29]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[请问一下怎么设置radius服务器，还有radius服务器是作为电脑还是可以在openwrt上装一个相应的软件和数据库？]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413167609.406649112701416015625;s:7:"message";s:31:"Akismet检查通过了此评论";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1414152572.2915279865264892578125;s:7:"message";s:34:"admin修改评论状态为approved";s:5:"event";s:15:"status-approved";s:4:"user";s:5:"admin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【office】Word中的图片不显示，和只有一个黑框</title>
		<link>http://www.itopers.com/?p=144</link>
		<pubDate>Sat, 10 Aug 2013 03:18:38 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=144</guid>
		<description></description>
		<content:encoded><![CDATA[<div><strong>出现这个的原因：</strong>
<div>在默认情况下，office可能怕你的图片太大，或太多，影响加载速度，所以就把图片不显示出来 ，和一个黑框来占位。</div>
<div>如果设置呢？</div>
<div>
<ul>
	<li><strong>word 2013</strong></li>
</ul>
</div>
<div><span style="color: #ff0000;">文件---设置---高级</span>：去掉“<span style="color: #ff0000;">显示图片框</span>”的选项就可以啦！</div>
<div><a href="http://www.itopers.com/wp-content/uploads/2013/08/Image.png"><img class="alignnone size-full wp-image-147" alt="Image" src="http://www.itopers.com/wp-content/uploads/2013/08/Image.png" width="282" height="189" /></a></div>
<div></div>
<div>
<ul>
	<li><strong>其他低版本</strong></li>
</ul>
</div>
<div>点击菜单的<span style="color: #ff0000;">工具-选项-视图</span>，把<span style="color: #ff0000;"> "图片框</span> "前面的勾清除。</div>
<div></div>
<div></div>
<div>PS:插入的图片显示成下面这样，又是何解呢？</div>
<div></div>
<div><a href="http://www.itopers.com/wp-content/uploads/2013/08/Image2.png"><img class="alignnone size-full wp-image-148" alt="Image2" src="http://www.itopers.com/wp-content/uploads/2013/08/Image2.png" width="267" height="212" /></a></div>
<div>别人遇到这个的情况是：</div>
<div>插入的图片有150M,额，这也太大了点吧。把它压缩压缩变小点就可以显示出来喽。</div>
<div></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date><![CDATA[2013-08-10 11:18:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-10 03:18:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90office%e3%80%91word%e4%b8%ad%e7%9a%84%e5%9b%be%e7%89%87%e4%b8%8d%e6%98%be%e7%a4%ba%ef%bc%8c%e5%92%8c%e5%8f%aa%e6%9c%89%e4%b8%80%e4%b8%aa%e9%bb%91%e6%a1%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="category" nicename="windows%e5%b7%a5%e5%85%b7"><![CDATA[Windows工具]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[20]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[734]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【实时通信】将MSN的图标显示在托盘区而不是任务栏</title>
		<link>http://www.itopers.com/?p=150</link>
		<pubDate>Sat, 10 Aug 2013 03:29:51 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=150</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>习惯用MSN的童鞋可能会发现一个问题，到了Win7平台下之后，MSN最小化的时候被放在任务栏了，而不是在托盘区。</div>
<div>这样，造成任务栏的东西多，而且感觉杂乱，因为MSN可以在需要的时候再调出来的嘛~</div>
<div>下面，介绍一种好方法，可以在Win7下，让MSN的小图标显示到托盘区</div>
<div><strong>操作步骤如下：</strong></div>
<ol>
	<li><strong>找到MSN程序的位置</strong></li>
</ol>
一般在"C:\Program Files (x86)\Windows Live\Messenger\msnmsgr.exe"

或"C:\Program Files (x86)\Windows Live\Messenger\msnmsgr.exe"）
<ol>
	<li><strong>在程序上右键－属性－兼容模式选择VISTA SP2</strong></li>
</ol>
右击msnmsgr.exe,选择属性

<a href="http://www.itopers.com/wp-content/uploads/2013/08/QQ截图20130810112815.jpg">       <img class="alignnone size-full wp-image-151" alt="QQ截图20130810112815" src="http://www.itopers.com/wp-content/uploads/2013/08/QQ截图20130810112815.jpg" width="419" height="480" /></a>
<ol>
	<li><strong>重新启动MSN，就可以看到效果了</strong></li>
</ol>
<div></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date><![CDATA[2013-08-10 11:29:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-10 03:29:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%ae%9e%e6%97%b6%e9%80%9a%e4%bf%a1%e3%80%91%e5%b0%86msn%e7%9a%84%e5%9b%be%e6%a0%87%e6%98%be%e7%a4%ba%e5%9c%a8%e6%89%98%e7%9b%98%e5%8c%ba%e8%80%8c%e4%b8%8d%e6%98%af%e4%bb%bb%e5%8a%a1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="category" nicename="windows%e5%b7%a5%e5%85%b7"><![CDATA[Windows工具]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[31]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[384]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【office】取消首字母大写</title>
		<link>http://www.itopers.com/?p=155</link>
		<pubDate>Sat, 10 Aug 2013 03:37:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=155</guid>
		<description></description>
		<content:encoded><![CDATA[<div>在使用office的时候，有时候我们会遇到一个烦人的问题，每一行字符他的首字母总是默认大写了，可是，这不是我的需求，有木有~_~</div>
<div>下面来教大家一个取消首字母大写的方法：</div>
<div>
<div>
<ul>
	<li><strong>Word2003取消首字母大写方法</strong></li>
</ul>
打开Word2003文档，编辑菜单栏的<span style="color: #ff0000;">“工具”</span>下拉列表中的<span style="color: #ff0000;">“自动更正选项”</span>，

</div>
<div>        在弹出的“自动更正”窗口中将<span style="color: #ff0000;">“句首字母大写”<span style="color: #000000;">前面的钩取消</span></span>，然后确定即可！<span style="color: #339966;"><strong>   小纸条：</strong></span>大家还可以看到有有<span style="color: #339966;">表格单元格的首字母大写</span>、<span style="color: #339966;">英文日期第一个字母大写</span>、<span style="color: #339966;">更正前两个字母连续大写</span>等，这些都可以根据自己的需要来设置。
<ul>
	<li><strong>在office2007中，取消首字母大写</strong></li>
</ul>
执行---&gt;<span style="color: #ff0000;">选择-----word选项</span>，选择<span style="color: #ff0000;">校对选项</span>，单击<span style="color: #ff0000;">自动更正选项</span>
取消掉<span style="color: #ff0000;">“句首字母大写”</span>的钩

</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date><![CDATA[2013-08-10 11:37:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-10 03:37:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90office%e3%80%91%e5%8f%96%e6%b6%88%e9%a6%96%e5%ad%97%e6%af%8d%e5%a4%a7%e5%86%99]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="post_tag" nicename="office"><![CDATA[office]]></category>
		<category domain="post_tag" nicename="windows-2"><![CDATA[windows]]></category>
		<category domain="category" nicename="windows%e5%b7%a5%e5%85%b7"><![CDATA[Windows工具]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[30]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1625]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【C#】.net connector 6.3.4. failed to install on Win7 32bit</title>
		<link>http://www.itopers.com/?p=163</link>
		<pubDate>Sun, 11 Aug 2013 04:05:15 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=163</guid>
		<description></description>
		<content:encoded><![CDATA[<div>这个问题是由于在安装Connector net 6.3.4.0之前，你安装了.net 4的原因，把.net 4卸载掉，然后再安装connector net 6.3.4.0就好了</div>
<div></div>
<div>如下是浏览众多网站得到的结果：</div>
<div> .net connector 6.3.4. failed to install on Win7 32bit
<div>This is because you have to install .Net Framework 4.0 on your machine.
Install .Net 4 before install Connector/Net 6.3.4.0</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date><![CDATA[2013-08-11 12:05:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-11 04:05:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90c%e3%80%91-net-connector-6-3-4-failed-to-install-on-win7-32bit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="net-framework-4-0"><![CDATA[.Net Framework 4.0]]></category>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="connector-6-3-4"><![CDATA[connector 6.3.4]]></category>
		<category domain="post_tag" nicename="win7"><![CDATA[Win7]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[360]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【工具】各种激活码...持续更新</title>
		<link>http://www.itopers.com/?p=167</link>
		<pubDate>Sun, 11 Aug 2013 06:32:25 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=167</guid>
		<description></description>
		<content:encoded><![CDATA[Xmanager 4 激活码:   101210-450789-147200

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date><![CDATA[2013-08-11 14:32:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-11 06:32:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%b7%a5%e5%85%b7%e3%80%91%e5%90%84%e7%a7%8d%e6%bf%80%e6%b4%bb%e7%a0%81-%e6%8c%81%e7%bb%ad%e6%9b%b4%e6%96%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%ba%94%e7%94%a8%e5%b7%a5%e5%85%b7"><![CDATA[应用工具]]></category>
		<category domain="post_tag" nicename="%e6%bf%80%e6%b4%bb%e7%a0%81"><![CDATA[激活码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[401]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Case案例】NTP服务器引起的故障</title>
		<link>http://www.itopers.com/?p=170</link>
		<pubDate>Sun, 11 Aug 2013 18:23:21 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=170</guid>
		<description></description>
		<content:encoded><![CDATA[最近被要求做一个时间同步服务器，将集群内的服务器全都时间同步，因为集群内服务器总会差个几秒钟，影响数据的一致性。<!--?xml:namespace prefix = "o" /-->

这个很简单，我们的使用的是RedHat企业版5.4，一般默认是安装有ntp服务的，只要开启一下，然后做一个计划任务就可以了。

<strong>操作步骤：</strong>

1. 首先修改，vi /etc/ntpd.conf

“restrict 10.138.18.0 mask 255.255.255.0 nomodify”指定网段，也可以使用“restrict default nomodify”不指定网段；指定server  为hostname。<!--?xml:namespace prefix = "o" /-->

2. 启动服务：service ntpd start

Chkconfig ntpd on 345     设置开机启动即可

3. 到其他的服务器用root登陆

Crontab -e     输入*/5 * * * * /usr/sbin/ntpdate  10.138.18.1

每五分钟同步一次，同步server

4. 给10.138.18.1 赋时间格式如下<span style="color: #ff0000;">： //主要是这里导致的问题</span>

Date 0808080808  我本来意思是给本机赋予8月8日8时8分，年就不指定了，我认为会默认还是2013年。

当我沾沾自喜时，就下班回家了。第二天回来，突然听说所有的应用终端都连接不上了，这下好急，马上将日志发给开发，我们小组也全体来检查原因。最后开发将问题找出来问，时间怎么是2008年，因为时间和数据库时间不一致，数据无法连接。这个时间是我没做周密的检查引起的。

<span style="color: #ff0000;"><strong>正确的设置时间方法为</strong></span>：date -s 08/08/2008和date -s 08:08:08两个命令搞定。

<!--more-->

<strong>关于Date设置时间：</strong>

实际上作者设置得也没有错，他使用date的时候是：

date 0808080808  (08年08月08日08时08分)， 所以得到的时候就是2008年了，如果使用

date 08080808 (08月08日08时08分)，得到的结果就是2013年8月8日8时8分了

所以用（date -s 08/08/2008和date -s 08:08:08）或date -s 08/08/2008和date -s 08:08:08是可以得出同样的效果的

不过，最终错误产生的原因，还是因为太粗心导致，所以工作中，细心是法宝啊！！

&nbsp;

故障引用自：<a href="http://3402313.blog.51cto.com/3392313/1266850">http://3402313.blog.51cto.com/3392313/1266850</a>

&nbsp;

<style id="_clearly_component__css" type="text/css"></style>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>170</wp:post_id>
		<wp:post_date><![CDATA[2013-08-12 02:23:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-11 18:23:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90case%e6%a1%88%e4%be%8b%e3%80%91ntp%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%bc%95%e8%b5%b7%e7%9a%84%e6%95%85%e9%9a%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="case%e6%a1%88%e4%be%8b"><![CDATA[Case案例]]></category>
		<category domain="post_tag" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[22]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[422]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux基础】CentOS6配置yum源</title>
		<link>http://www.itopers.com/?p=174</link>
		<pubDate>Sun, 11 Aug 2013 19:02:59 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=174</guid>
		<description></description>
		<content:encoded><![CDATA[自从CentOS到了6版本，它默认情况下安装的是Mini版，最小化安装。所以使用一个yum源是非常有必要的，它可以在需要的时候解决很多包及依赖的问题。

CentOS使用的yum源是在/etc/yum.repos.d/目录下的两个文件中进行配置的CentOS-Base.repo和CentOS-Media.repo，其中，<span style="color: #ff0000;">CentOS-Base.repo是配置网络yum源，CentOS-Media.repo是配置本地yum源。</span>

1. 配置网络Yum源（网易yum源）

* 下载repo文件
<div>       下载地址：<a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a></div>
*  备份并替换系统的repo文件
<div>     [root@localhost ~]# cd /etc/yum.repos.d/
[root@localhost ~]# mv CentOS-Base.repo CentOS-Base.repo.bak
[root@localhost ~]# mv /root/CentOS6-Base-163.repo CentOS-Base.repo</div>
*   执行yum源更新
<div>     [root@localhost ~]# yum clean all
[root@localhost ~]# yum makecache
[root@localhost ~]# yum update</div>
*   尝试进行安装

[root@localhost ~]# yum install vim

<strong>注意(配置的前提条件)：</strong>

* 保证机器能正常上网（ping一个8.8.8.8）

* 保证机器能正常解决DNS （ping <a href="http://www.itopers.com">www.itopers.com</a>）

*  防火墙记得允许80，53，icmp等...

<!--more-->

2.配置本地Yum源

CentOS-Media.repo内容：

name=CentOS-$releasever - Media
baseurl=file:///media/CentOS/   <span style="color: #ff0000;">-----本地yum源地址</span>
<a href="file:///media/cdrom/">file:///media/cdrom/</a>
<a href="file:///media/cdrecorder/">file:///media/cdrecorder/</a>
gpgcheck=1
enabled=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-6

*   挂载你的ISO文件：

[root@localhost ~]# mount -o loop /root/centos6u3x_x64.iso /media/CentOS

<!--more-->

3.Linux常软件包及工具

*   常见压缩工具 zip unzip bzip2
<div>     [root@localhost ~]# yum -y install unzip zip bzip2 bzip2-devel</div>
*   gcc gcc++编译器（源码安装必备）、 cmake编译器
<div>     [root@localhost ~]# yum install gcc gcc-c++ -y</div>
<div>
<div>     [root@localhost ~]# yum install cmake make -y</div>
</div>
*  开发包组 development tools]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>174</wp:post_id>
		<wp:post_date><![CDATA[2013-08-12 03:02:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-11 19:02:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e5%9f%ba%e7%a1%80%e3%80%91centos6%e9%85%8d%e7%bd%aeyum%e6%ba%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="yum"><![CDATA[yum]]></category>
		<category domain="post_tag" nicename="%e7%b3%bb%e7%bb%9f%e5%9f%ba%e7%a1%80"><![CDATA[系统基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[447]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux基础】给CentOS6u3安装图形界面</title>
		<link>http://www.itopers.com/?p=176</link>
		<pubDate>Sun, 11 Aug 2013 19:15:23 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=176</guid>
		<description></description>
		<content:encoded><![CDATA[默认情况下，CentOS6安装是的文字界面，某些情况下，我们也许会需要用于它的图形界面，下面就来介绍一下如何安装图形界面，也就是它的桌面。

1. 配置好yum源

这里可以自己做本地源，也可以使用网络源，如网易的，都非常方便，具体配置方法可以查看：      《【Linux基础】CentOS6配置yum源》<a href="http://www.itopers.com/?p=174">http://www.itopers.com/?p=174</a>

如果没有网络或者网络不好的话，建议使用本地源，这里大概有500M的资源。

2. 安装Gnome图形化界面

#yum groupinstall -y “X Window System”

#yum groupinstall -y “Desktop”

（如何你安装的语言是中文的话，你还需要安装一个中文语言支持包，否则用图形界面登录后，可能会有问题）

#yum groupinstall -y “Chinese Support”

3. 修改使系统从图形界面启动

# vi /etc/inittab

将最后面的：id:3:initdefault:修改为--&gt;id:5:initdefault:

<!--more-->

<span style="color: #ff0000;"><strong>注意：</strong></span>

如果你重启的时候，发现启动不了，可能是你没安装好图形界面，但是又要求它是图形界面启动，这样会有问题；这里你可以进入修复模式或单用户模式将它改成从文字界面启动

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date><![CDATA[2013-08-12 03:15:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-11 19:15:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e5%9f%ba%e7%a1%80%e3%80%91%e7%bb%99centos6u3%e5%ae%89%e8%a3%85%e5%9b%be%e5%bd%a2%e7%95%8c%e9%9d%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="%e5%9b%be%e5%bd%a2%e6%a1%8c%e9%9d%a2"><![CDATA[图形桌面]]></category>
		<category domain="post_tag" nicename="%e7%b3%bb%e7%bb%9f%e5%9f%ba%e7%a1%80"><![CDATA[系统基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[660]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【shell】expect的使用案例</title>
		<link>http://www.itopers.com/?p=186</link>
		<pubDate>Tue, 13 Aug 2013 14:39:35 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[今天vaster问我，如何检测linux的信任做好了没？我就说直接ssh，设置超时时间，或者用expect。后来她说用不好expect,所以我在终端直接给他写了个急用。因为下班了，要回家，也没有做太多解释，写出来了，理解肯定没有什么问题。也不是她不会，主要是写得太少了。expect使用方法就不说了，网上多得很。我就直接写几个例子吧。

(一)并发检查服务器与DB的连通性：
<pre class="lang:sh decode:true">#!/bin/bash

IPLIST="/home/oper/admin/webtool/iplist.txt"

THREAD=10     #设置并发数量
TMPFIFO=/tmp/$$.fifo
mkfifo $TMPFIFO
exec 3&lt;&gt;${TMPFIFO}
rm -rf ${TMPFIFO}

for((i=1;i&lt;=$THREAD;i++))
do
echo ;
done &gt;&amp;3</pre>
#循环检查需要检测db连通性的服务器
<pre class="lang:sh decode:true">for i in $(cat ${IPLIST} | grep -v "^#" |awk '{print $1}')
do
read -u3
{

#登录到服务器，记住一定要设置超时时间，防止连接不上服务器，浪费时间。

#ConnectTimeout连接超时时间，ConnectionAttempts超时次数
ssh -oConnectTimeout=30 -oConnectionAttempts=3 $i "
for j in \$(cat /etc/odbc.ini |grep SERVER | awk '{print \$3}')    #这里获得服务器需要连接的DB服务器
do
num=\$(expect -c \"
set timeout 2;    #设置telnet超时时间
spawn telnet \$j 3306;    #这里用mysql举例
expect EOF
\" |grep Connected |wc -l)

#判断是否有Connected出现，有就表示连通性是正常的。
if [ \$num -eq 1 ];then
echo -e \"\e[1;32m$i to \${j} is OK\e[0m\"
else
echo -e \"\e[1;31m$i to \${j} is error\e[0m\"
fi
done
"
echo "" &gt;&amp;3
} &amp;
done

exec 3&gt;&amp;-
wait
exit 0</pre>
（三）下面这个例子是用自己的用户登录服务器后，所有的操作需要切换到oper用户下，每次切换太麻烦了，所以用expect写了几句脚本，然后放到~/.bash_profile,每次登录自己的用户自动切换到操作用户下。方便了许多。
<pre class="lang:sh decode:true ">$cat .bash_profile
cd ~/ &amp;&amp; ./autosu.exp

#################################

$cat autosu.exp
#!/usr/bin/expect -f
set timeout 10
spawn su - oper
expect {
"Password:" {send "123456\r"}
}
interact                #一定要加上这个，表示不中断，一直保持在oper用户下</pre>
检查连通性的时间一定要设置超时时间，有一次有个同学检测到DB的连通性，有可能脚本执行了好几次。那telnet还在，大家都知道，DB分给应用的连接数是有限制的，导致DB连接数不够。导致维护应用的时候连接不上DB。重要吧！！！！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date><![CDATA[2013-08-13 22:39:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-13 14:39:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90shell%e3%80%91expect%e7%9a%84%e4%bd%bf%e7%94%a8%e6%a1%88%e4%be%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="bash_profile"><![CDATA[bash_profile]]></category>
		<category domain="post_tag" nicename="expect"><![CDATA[expect]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[420]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【转】我们应该怎样获得加薪</title>
		<link>http://www.itopers.com/?p=190</link>
		<pubDate>Wed, 14 Aug 2013 20:54:44 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[本文件转自：<a href="http://zouhui.blog.51cto.com/3827922/1269577">http://zouhui.blog.51cto.com/3827922/1269577</a>

昨天成都C++群聚会，有群友提出这样的问题：

他刚进公司没有多久，向项目经理提出了加薪要求，项目经理将这事报告了部门经理，但部门经理一直没有给他结论，也没有找他谈话。他因为这事每天忧心忡忡，种下了心结。不知道接下来应该怎么办。

与他作了以下对话：

<strong>问：</strong>为什么你刚进公司就提出加薪要求？

<strong>答：</strong>我找工作的时候，一共得到了3个offer，我选择了薪水最低的offer，就是现在就职的这家公司，因此我觉得我可以拿更高的薪水。

<strong>问：</strong>你为什么会选择薪水最低的这家公司？

<strong>答：</strong>我觉得这家公司比较有前景，公司的技术方向也是我喜欢的。

<strong>问：</strong>如果公司给你的答复为否，你是否会考虑换工作？

<strong>答：</strong>不会。

<strong>问：</strong>如果公司给你的答复为否，你的工作态度与积极性是否会与之前一样？

<strong>答：</strong>是的。这不会影响到我的工作内容与态度。

<span style="color: #000080;">从这个故事，该群友不对的地方：</span>

不应该因为其他公司给的offer比这家公司高，就要求这家公司涨薪水，这个理由不成立。既然选择了这家公司，也接受了这份薪水，就应该履行这份合约与承诺。

部门经理做得不对的地方：

不管能不能给该群友涨薪水，都应该找这位群友好好谈一次。问清楚该群友要求涨薪水的理由，并告知公司的决定。同时需要了解这个结论对该群友工作的影响。

<span style="color: #000080;">该群友接下来应该怎么办？</span>

1，首先找项目经理，告诉他，我会因为涨薪水没有结论的事，找部门经理谈一次，并告诉他不管涨不涨薪水，都不会影响到我现在的工作。希望项目经理能同意我直接找部门经理谈这事。

2，找部门经理谈一次，同样地，告诉他你申请涨薪水的理由。并告诉他不管涨不涨薪水，都不会影响到我现在的工作，我对工作的态度与热爱一如既往。希望能尽早有结论。、

希望建议能帮助到他，并能了去他的心结。

&nbsp;

尽量不要主动提出加薪。

一般来讲，公司对主动提出加薪的员工，或多或少有一些看法。

1，上级不喜欢把薪水看得太重的员工，因为这样的员工很可能会增加管理成本。

2，主动向上级提出加薪，上级会认为你已经做好了其他的打算，对你的忠诚度就会置疑。以后一些重要的任务与好的培训升职机会首先会滤过你。

3，如果你的离职，不会对项目产生大的影响，上级不会给你涨薪水。因为人的欲望是无穷的，涨了这次，还有下次。总有一天，公司承受不了。因此还不如一开始就不涨。

4，如果你的离职，会对项目产生很大的影响，上级被迫给你涨薪水。那么上级会感觉他受到了你的威胁。这次给你涨了，接下来会想尽办法找人替代你的工作。你将不会再重要。

&nbsp;

&nbsp;

<span style="color: #ff0000;">那么，我们应该怎样获得加薪？</span>

<span style="color: #000080;">1，感情篇，抓住机会，委婉表达</span>

不管是拉家常时，还是在活动时，总之，在非工作的时间里。通过家庭压力，个人压力，生活成本，朋友圈子等方面，让上级知道你有想要加薪的诉求与愿望。上级在获得加薪指标的时候，就会想到你。不要正式提出，这会让你的上级认为是一个行政事务，会让他产生压力。

<span style="color: #000080;">2，实力篇，做好事情</span>

将上级交代的任务做到最好，尽量让其无可挑剔，尽量帮上级去分担他的工作压力。上级会觉得你是他的左膀右臂，他会想办法为你争取更多的报酬，目的是让你给他分担更多的工作。

<span style="color: #000080;">3，态度篇，做到榜样</span>

每天努力工作，经常为公司的事情加班，下班后，经常一个人最后离开。每次上级交代的任务，都体现出百分之一百二的责任心。不管你做事的结果如何，但是上级会觉得，你的态度是大家值得学习的榜样，你是一个很好的例子，为了给其他同事示范，会对你做出表扬。当然，加薪也就是顺理成章的事了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date><![CDATA[2013-08-15 04:54:44]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-14 20:54:44]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%bd%ac%e3%80%91%e6%88%91%e4%bb%ac%e5%ba%94%e8%af%a5%e6%80%8e%e6%a0%b7%e8%8e%b7%e5%be%97%e5%8a%a0%e8%96%aa]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%94%9f%e6%b4%bb%e6%84%9f%e6%82%9f"><![CDATA[生活感悟]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[426]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【推荐】shell学习视频，值得一看</title>
		<link>http://www.itopers.com/?p=193</link>
		<pubDate>Wed, 14 Aug 2013 21:11:03 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=193</guid>
		<description></description>
		<content:encoded><![CDATA[视频课程一共有15个，对刚才学习shell，或加强shell能力的人来说，是一个不错的学习资源。

网址：<span style="color: #ff0000;">http://edu.51cto.com/course/course_id-415-page-2.html</span>

<em></em>1<a href="http://edu.51cto.com/lession/id-10079.html">【第一部分】01-Shell编程需要的基础知识储备</a>

<em></em>2<a href="http://edu.51cto.com/lession/id-10080.html">【第一部分】02-Shell脚本概念介绍及第一个脚本案例</a>

<em>3</em><a href="http://edu.51cto.com/lession/id-10081.html">【第一部分】03-Shell脚本基础知识-作用地位-语言优势</a>

<em>4</em><a href="http://edu.51cto.com/lession/id-10082.html">【第一部分】04-建立一个规范的shell脚本知识</a>

<em>5</em><a href="http://edu.51cto.com/lession/id-10083.html">【第一部分】05-执行shell脚本的多种方法及重要区别精讲</a>

<em>6</em><a href="http://edu.51cto.com/lession/id-10084.html">【第一部分】06-Shell脚本开发的9点基本规范和习惯</a>

<em>7</em><a href="http://edu.51cto.com/lession/id-10136.html">【第一部分】07-Shell的变量-变量类型-全局变量相关知识讲解01</a>

<em>8</em><a href="http://edu.51cto.com/lession/id-10137.html">【第一部分】08-Shell的变量-局部变量-本地变量相关知识讲解02</a>

<em>9</em><a href="http://edu.51cto.com/lession/id-10138.html">【第一部分】09-Shell的特殊变量-位置变量详解</a>

<em>10</em><a href="http://edu.51cto.com/lession/id-10158.html">【第一部分】10-Shell的特殊变量-进程状态变量等详解</a>

<em>11</em><a href="http://edu.51cto.com/lession/id-10161.html">【第一部分】11-Shell的特殊变量-难点理论与实战剖析</a>

<em>12</em><a href="http://edu.51cto.com/lession/id-10755.html">【第一部分】12-Bash内部命令变量介绍及shift实践讲解</a>

<em>13</em><a href="http://edu.51cto.com/lession/id-10756.html">【第一部分】13-Shell变量的子串应用技术实践详解</a>

<em>14</em><a href="http://edu.51cto.com/lession/id-10758.html">【第一部分】14-批量修改文件名及扩展名多案例实践讲解</a>

<em>15</em><a href="http://edu.51cto.com/lession/id-10760.html">【第一部分】15-Shell变量替换技术实践与生产实战教训案例</a>

第一部分完了，还有更多高级内容在第 二、三、四部分！我就不拷贝了，有网址自己看吧。

网址： http://edu.51cto.com/course/course_id-487-page-1.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date><![CDATA[2013-08-15 05:11:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-14 21:11:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%8e%a8%e8%8d%90%e3%80%91shell%e5%ad%a6%e4%b9%a0%e8%a7%86%e9%a2%91%ef%bc%8c%e5%80%bc%e5%be%97%e4%b8%80%e7%9c%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<category domain="post_tag" nicename="shell%e8%a7%86%e9%a2%91"><![CDATA[shell视频]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[479]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【linux】Linux磁盘分区UUID的作用及UUID怎么获到</title>
		<link>http://www.itopers.com/?p=200</link>
		<pubDate>Sun, 18 Aug 2013 14:33:10 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=200</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>一、UUID的作用</strong>

UUID（<strong>Universally Unique IDentifiers全局唯一标识符</strong>）为系统的存储设备提供唯一的标识字符串，不管这个设备是什么类型的。如果系统增加新的设备，系统的设备顺序就会改变。也就会造成很多问题，如系统下次启动的时间导致找不到相应的设备。具体原因是：比如，原来有一块磁盘是sdb,后来增加了一块磁盘后，重新启动后，新增加的变为sdb,原来的sdb变为sdc了。那么你在挂载分区的时候就会出错了，就算挂载成功了，那么之后的数据存储就乱了。

因为设备名字不是一直不变的，它们依赖于启动时内核加载模块的顺序。

&nbsp;

<strong>二、UUID怎么获得？</strong>

用blkid命令获得UUID

[root@cloud ~]# <strong>blkid</strong>
/dev/sda1:<span style="color: #ff0000;"> UUID="63f656e2-4a3c-4b34-a59e-13358830e87b"</span> TYPE="ext4"
/dev/sda2: <span style="color: #ff0000;">UUID="dtK0fn-wMNW-wB8L-ueXq-H3Ad-cek9-5wCgac"</span> TYPE="LVM2_member"
/dev/sdb1: <span style="color: #ff0000;">UUID="d9ce1cf4-c5ce-4fa3-b8f0-32d2c8d7cedb"</span> TYPE="ext4"
/dev/mapper/vg_cloud-lv_root:<span style="color: #ff0000;"> UUID="b1b727fa-2e21-4399-8e63-d5565636c16b"</span> TYPE="ext4"
/dev/mapper/vg_cloud-lv_swap: <span style="color: #ff0000;">UUID="9464fd57-de55-47d9-9015-80dab53800b1"</span> TYPE="swap"

或者用如下方法查看。

[root@cloud ~]# <strong>ls -l /dev/disk/by-uuid/</strong>
总用量 0
lrwxrwxrwx. 1 root root 10 8月 5 21:50 63f656e2-4a3c-4b34-a59e-13358830e87b -&gt; ../../sda1
lrwxrwxrwx. 1 root root 10 8月 6 05:49 9464fd57-de55-47d9-9015-80dab53800b1 -&gt; ../../dm-1
lrwxrwxrwx. 1 root root 10 8月 6 05:49 b1b727fa-2e21-4399-8e63-d5565636c16b -&gt; ../../dm-0
lrwxrwxrwx. 1 root root 10 8月 5 23:13 d9ce1cf4-c5ce-4fa3-b8f0-32d2c8d7cedb -&gt; ../../sdb1

<strong>三、UUID获取到了，那么怎么用UUID来挂载磁盘</strong>

在<strong>/etc/fstab</strong>中输入如下内容，然后<strong>mount -a</strong>重新加载fstab文件。

UUID=63f656e2-4a3c-4b34-a59e-13358830e87b /boot                   ext4    defaults        1 2

UUID="d9ce1cf4-c5ce-4fa3-b8f0-32d2c8d7cedb"     /home ext4      defaults 1 3

[root@cloud ~]#<strong> mount</strong>

/dev/sdb1 on /home type ext4 (rw)

/dev/sda1 on /boot type ext4 (rw)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>200</wp:post_id>
		<wp:post_date><![CDATA[2013-08-18 22:33:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-18 14:33:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91linux%e7%a3%81%e7%9b%98%e5%88%86%e5%8c%bauuid%e7%9a%84%e4%bd%9c%e7%94%a8%e5%8f%8auuid%e6%80%8e%e4%b9%88%e8%8e%b7%e5%88%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="blkid"><![CDATA[blkid]]></category>
		<category domain="post_tag" nicename="ext4"><![CDATA[ext4]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="uuid"><![CDATA[UUID]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[754]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux】项目上线系统环境检查</title>
		<link>http://www.itopers.com/?p=204</link>
		<pubDate>Sun, 18 Aug 2013 15:05:37 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[系统环境：CentOS6u3

由于以往的环境都是Rhel5，而且做初始化时，只是把一些包安装后，并不太清楚如何衡量初始化后的环境是否适合项目上用。昨天Jun爷检查了环境之后，发现有些地方不符合要求，所以需要再修复一下。

主要修复项：

l  检查odbc对应的so文件     /usr/lib64/libmyodbc3_r.so

l  检查安全加固对应的so文件 /usr/lib64/libcurl.so.3

l  检查dbagent对应的so文件       /usr/lib64/libodbc.so.1

l  检查加密盘     grep /home/cyxxx/xxx

l  检查时区和时间     date –R; date
<ol>
	<li>先从简单的来，<b>修复时区</b>就比较简单了，印尼在东7区，修复方法如下：</li>
</ol>
cp /usr/share/zoneinfo/Asia/Jakarta /etc/localtime
<ol>
	<li><b>检查时间</b>是否一致，给它加上ntp服务器就好，经商讨决定放在普通用户下</li>
</ol>
Echo “10 * * * * /usr/sbin/ntpdate -s 220.181.20.114;/sbin/clock -w”&gt;&gt; /usr/spool/cron/cyxxx
<ol>
	<li><b>创建加密盘，</b>已经写好了一个初始化脚本，跑一下，基本上也就完成了，具体内容就不介绍了，创建好之后，再把它挂载到/home/cyxxx/xxx目录下就OK了</li>
	<li>最头疼的就是这三个SO文件了，/usr/lib64/libmyodbc3_r.so，/usr/lib64/libcurl.so.3，/usr/lib64/libodbc.so.1</li>
</ol>
我通过在线上正式服环境用rpm –qf /pathto/*.so 的方式查找到：

/usr/lib64/libmyodbc3_r.so        由mysql-connector-odbc-3.51.26-0.x86_64rpm生成

/usr/lib64/libcurl.so.3                       做一下/usr/lib64/libcurl.so.4.1.1的软链接

/usr/lib64/libodbc.so.1                     由unixODBC-2.2.11-7.1.x86_64.rpm生成

原本安装包这几个rpm包就可以了，但安装各个包的时候，会出现依赖的问题，如安装mysql-connector-odbc时，会提示：

libltdl.so.3 is needed by mysql-connector-odbc-3.51.12-2.2.i386

libodbcinst.so.1 is needed by mysql-connector-odbc-3.51.12-2.2.i386

unixODBC is needed by mysql-connector-odbc-3.51.12-2.2.i386

( libltdl.so.3包来自libtool-ltdl包 )

然后依次把需要的包安装上，包都存在了，但它还是会提示：

libltdl.so.3 is needed by mysql-connector-odbc-3.51.12-2.2.i386
后来，实在是没办法就用:

rpm –ivh –force mysql-connector-odbc-3.51.26-0.x86_64rpm来安装，结果还是报错

后来才发现，原来强制安装应该用—nodeps参数，--force是在包已经安装的时候用的。

最后，直接将所有的包都加上—nodeps和—force进行强制安装，再执行：

Ln –s /usr/lib64/libcurl.so.4.1.1 /usr/lib64/libcurl.so.3

做下软链接，就可以啦！！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date><![CDATA[2013-08-18 23:05:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-18 15:05:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91%e9%a1%b9%e7%9b%ae%e4%b8%8a%e7%ba%bf%e7%b3%bb%e7%bb%9f%e7%8e%af%e5%a2%83%e6%a3%80%e6%9f%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e7%8e%af%e5%a2%83%e6%a3%80%e6%9f%a5"><![CDATA[环境检查]]></category>
		<category domain="post_tag" nicename="%e9%a1%b9%e7%9b%ae%e4%b8%8a%e7%ba%bf"><![CDATA[项目上线]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[549]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】同行者社工服务中心网站</title>
		<link>http://www.itopers.com/?p=208</link>
		<pubDate>Sun, 18 Aug 2013 16:11:42 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

这是2011年8月为人文学院社工系一个老的朋友做的一个网站。网站采用asp+access制作，由于我大一开始学习的就是asp，写了不少东东，所以帮别人做的时候就方便。

网址：<a href="http://www.cscompanion.org/">http://www.cscompanion.org</a>

如下是首页

<a href="http://www.itopers.com/wp-content/uploads/2013/08/同行者社工网_index.jpg"><img class="wp-image-209 alignnone" alt="同行者社工网_index" src="http://www.itopers.com/wp-content/uploads/2013/08/同行者社工网_index.jpg" width="617" height="788" /></a>

&nbsp;

&nbsp;

&nbsp;
<p style="text-align: center;"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date><![CDATA[2013-08-19 00:11:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-18 16:11:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e5%90%8c%e8%a1%8c%e8%80%85%e7%a4%be%e5%b7%a5%e6%9c%8d%e5%8a%a1%e4%b8%ad%e5%bf%83%e7%bd%91%e7%ab%99]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-image"><![CDATA[图像]]></category>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[448]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【linux】机器的网络问题“RTNETLINK answers: Network is unreachable RTNETLINK answers: Network is unreachable”</title>
		<link>http://www.itopers.com/?p=220</link>
		<pubDate>Mon, 19 Aug 2013 09:11:42 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=220</guid>
		<description></description>
		<content:encoded><![CDATA[刚哥要我解决一下Billing机器使用内网连接不上的问题，通过配置之后，由于当前用的外网网卡连接，于是我图只将eth0(内网重启)：
<pre class="lang:default decode:true">#ifdown eth0
#ifup eth0</pre>
操作完成之后，发现通过SecureCRT连接不上机器了，赶忙叫楠哥从ilo登录将网卡再重启一次，这时得到如下信息：
<pre class="lang:default decode:true">#service network restart
Shutting down interface eth0: [ OK ]
Shutting down interface eth1: [ OK ]
Shutting down loopback interface: [ OK ]
Bringing up loopback interface: [ OK ]
Bringing up interface eth0: RTNETLINK answers: Network is unreachable RTNETLINK answers: Network is unreachable   [ OK ]
Bringing up interface eth1: [ OK ]</pre>
Eth0的配置如下（eth1的配置基本一致）：
<pre class="lang:default decode:true">#cat /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
BOOTPROTO=static
IPADDR=10.127.3.165
NETMASK=255.255.255.128
#GATEWAY=10.127.3.254
ONBOOT=yes
TYPE=Ethernet</pre>
虽然会报这个错，但是两块网卡都是正常用着的，没有问题。这时，我就郁闷了，问题会出在哪里呢？我刚开始以为是我配置的route-eth0文件导致：

文件内容：
<pre class="lang:default decode:true">#cat /etc/sysconfig/network-scripts/route-eth0
10.0.0.0/8 via 10.127.3.254</pre>
这个也没有错啊，我把文件删除后，还是会报这个错，只是启动之后route里不会加上这个10.0.0.0网段的路由了。

后来无意中发现，这个文件的存在：
<pre class="lang:default decode:true"># cat /etc/sysconfig/network-scripts/eth0.route
ADDRESS0=192.168.0.0
NETMASK0=255.255.0.0
GATEWAY0=10.127.3.126
ADDRESS1=10.0.0.0
NETMASK1=255.0.0.0
GATEWAY1=10.127.3.126</pre>
显然，这里的GATEWAY写错了，网关应该是10.127.3.254才对，于是将其改成正确的之后，果然，就不再报错了。

<strong><span style="color: #ff0000;">【扩展知识】：</span></strong>

在配置路由信息的时候，我们可以采取很多种方法：
<ul>
	<li><strong>eth0.route redhat 新推的格式 比较傻瓜一些</strong></li>
</ul>
<pre class="lang:default decode:true">/etc/sysconfig/network-scripts/eth0.route
ADDRESS0=192.168.0.0
NETMASK0=255.255.0.0
GATEWAY0=10.1.1.254
ADDRESS1=172.16.0.0
NETMASK1=255.240.0.0
GATEWAY1=10.1.1.254</pre>
<ul>
	<li><strong> route-eth0 redhat 的老的格式 对专业人士很好</strong></li>
</ul>
<pre class="lang:default decode:true">/etc/sysconfig/network-scripts/route-eth0
192.168.0.0/16 via 10.1.1.254
172.16.0.0/12 via 10.1.1.254</pre>
<ul>
	<li><strong>static-routes</strong></li>
</ul>
<pre class="lang:default decode:true">/etc/sysconfig/static-routes
eth0 net 192.168.0.0 netmask 255.255.0.0 gw 10.1.1.254</pre>
当然，我们也可以采用在rc.local里面加route add （/sbin/route add -net 192.168.0.0/16 gw 10.1.1.254）或ip route add语句，但是，这种三种方式相对会更好，在重启网络或重启网卡时都可以正常工作]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date><![CDATA[2013-08-19 17:11:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-19 09:11:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91%e6%9c%ba%e5%99%a8%e7%9a%84%e7%bd%91%e7%bb%9c%e9%97%ae%e9%a2%98rtnetlink-answers-network-is-unreachable-rtnetlink-answers-network-is-unreachable]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[4375]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>SSH连接极慢的几个原因</title>
		<link>http://www.itopers.com/?p=223</link>
		<pubDate>Mon, 19 Aug 2013 13:49:07 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=223</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

近期，协助项目上线，发现一个问题，所有机器SSH连接到目标机器都较慢。严重影响工作效率，今天上午进行启服操作时，甚至还出现了超时现象。

由于ping这些机器网络连接状态还是比较正常的，time基本在2ms左右，基本排除由于网络问题导致此现象。于是尝试将sshd_config中的UseDNS设置成no，并重启服务，但问题仍然没解决。通过ssh –v ip查看连接的详情，连接慢的时候会卡在某一处，如：有时候是debug1: Next authentication method: gssapi-with-mic，但有时候连接又非常快。

最终的解决方案：
<ol>
	<li>修改客户端/etc/ssh/ssh_config文件中修改GSSAPIAuthentication no</li>
	<li>修改服务端/etc/ssh/sshd_config文件中修改UseDNS no和GSSAPIAuthentication no</li>
	<li>重启sshd： /etc/init.d/sshd restart</li>
</ol>
PS: 这里的客户端指的是中控，服务端指的是GS

&nbsp;

【扩展阅读】

GSSAPI ( Generic Security Services Application Programming Interface) 是一套类似Kerberos 5 的通用网络安全系统接口。该接口是对各种不同的客户端服务器安全机制的封装，以消除安全接口的不同，降低编程难度。但该接口在目标机器无域名解析时会有问题。

PS: 其他建议

在/etc/hosts中文件做好本机ip和hostname的解析，将解析顺序改为先file再dns

将/etc/resolv.conf中注释掉不用的ip，如果服务器不连接公网，刚将nameserver也可注掉

实际 上进行authentication gssapi-with-mic验证时，也会先连接DNS服务器

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>223</wp:post_id>
		<wp:post_date><![CDATA[2013-08-19 21:49:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-19 13:49:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ssh%e8%bf%9e%e6%8e%a5%e6%9e%81%e6%85%a2%e7%9a%84%e5%87%a0%e4%b8%aa%e5%8e%9f%e5%9b%a0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="%e7%b3%bb%e7%bb%9f%e5%9f%ba%e7%a1%80"><![CDATA[系统基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2237]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【分享】定时任务执行失败解决方法之一</title>
		<link>http://www.itopers.com/?p=227</link>
		<pubDate>Mon, 19 Aug 2013 13:53:23 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=227</guid>
		<description></description>
		<content:encoded><![CDATA[今天下午在部署定时任务的时候，发现定时任务不能正常运行，在检查了相关日志后都没有发现问题的原因。查看定时任务：
1,6,11,16,21,26,31,36,41,46,51,56 * * * * (python /home/tlmo/stat/tongji.py &gt;&gt; /home/tlmo/stat/tongji.log)
定时任务的格式也没有什么问题，因此最容易被忽略的问题就出现在了python上面了，并不是说Python有什么问题，因为手动执行python /home/tlmo/stat/tongji.py &gt;&gt; /home/tlmo/stat/tongji.log时没有任何问题的，但是我怀疑在计划任务中找不到Python的路径导致计划任务执行失败

【解决办法】

添加了Python的绝对路径后脚本执行正常，问题解决，最终问题定位到了Python上面

【建议】
1.所有脚本的路径需要写全路径，或者使用cd $PATH &amp;&amp; /bin/bash file.sh的方式执行
2.或者在定时任务里面先加载环境变量
3.做好错误输出记录：
1,6,11,16,21,26,31,36,41,46,51,56 * * * * (python /home/tlmo/stat/tongji.py &gt;&gt; /home/tlmo/stat/tongji.log 2&gt;&gt;/home/tlmo/stat/tongji.log)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>227</wp:post_id>
		<wp:post_date><![CDATA[2013-08-19 21:53:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-19 13:53:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%88%86%e4%ba%ab%e3%80%91%e5%ae%9a%e6%97%b6%e4%bb%bb%e5%8a%a1%e6%89%a7%e8%a1%8c%e5%a4%b1%e8%b4%a5%e8%a7%a3%e5%86%b3%e6%96%b9%e6%b3%95%e4%b9%8b%e4%b8%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="%e7%b3%bb%e7%bb%9f%e5%9f%ba%e7%a1%80"><![CDATA[系统基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[480]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于mysql启动管理和配置项的一个小陷阱</title>
		<link>http://www.itopers.com/?p=231</link>
		<pubDate>Mon, 19 Aug 2013 13:58:38 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=231</guid>
		<description></description>
		<content:encoded><![CDATA[昨天协助海外排查一台linux安装Percona-5.5.20的时候，遇到了这个小陷阱，以后大家注意。
【故障现象】

mysql启动的时候死活都像没有读到我们制定的/etc/my.cnf配置文件。

【解决办法】
如果使用mysqld启动，my.cnf的配置项必须写成[mysqld]，
如果是使用mysqld_multi管理的话，即使是一个实例也需要配置成[mysqldxxxx]]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>231</wp:post_id>
		<wp:post_date><![CDATA[2013-08-19 21:58:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-19 13:58:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%85%b3%e4%ba%8emysql%e5%90%af%e5%8a%a8%e7%ae%a1%e7%90%86%e5%92%8c%e9%85%8d%e7%bd%ae%e9%a1%b9%e7%9a%84%e4%b8%80%e4%b8%aa%e5%b0%8f%e9%99%b7%e9%98%b1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[401]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>创建screen时Cannot open your terminal &#039;/dev/pts/19&#039; - please check.</title>
		<link>http://www.itopers.com/?p=234</link>
		<pubDate>Wed, 21 Aug 2013 02:40:55 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=234</guid>
		<description></description>
		<content:encoded><![CDATA[在linux中使用screen时发生的问题，当时这个问题发生在redhat系统中，相信debian,centos，其它的都会出现。

[@WEB_ZW_72.48 ~]$ screen -S ding
Cannot open your terminal '/dev/pts/19' - please check.

这句话的意思是不能打开/dev/pts/19这个终端，为 什么呢？后面才知道，我是su登录到这个用户下的，没有直接用这个用户登录。我一下就明白了，su过来后，当前这个用户是没有权限在/dev/pts/19这个终端去运行screen的。因为/dev/pts/19这个终端是之前用户登录时创建的，可以查看：

[@WEB_ZW_72.48 ~]$<strong> id</strong>
uid=500(user2) gid=500(user2) groups=500(user2)

[@WEB_ZW_72.48 ~]$ <strong>who</strong>
op_user1 <span style="color: #ff0000;"> pts/19</span> 2013-08-21 09:23 (10.6.48.18)

之前还以为是什么配置问题或screen权限什么的，其实是screen不能在su登录环境中工作。直接用这个用户和密码登录就没有问题。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>234</wp:post_id>
		<wp:post_date><![CDATA[2013-08-21 10:40:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-21 02:40:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%88%9b%e5%bb%bascreen%e6%97%b6cannot-open-your-terminal-devpts19-please-check]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="screen"><![CDATA[screen]]></category>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<category domain="post_tag" nicename="shell-2"><![CDATA[shell]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[35]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2787]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[migaole]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[migaole@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.149.157.78]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-08-21 20:47:06]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-08-21 12:47:06]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[哎呦~不错哦~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3263</wp:comment_id>
			<wp:comment_author><![CDATA[beebol]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dingguoxing2009@hotmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://www.itopers.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[114.247.160.219]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2014-01-06 21:00:46]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2014-01-06 13:00:46]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[后面找到一种方法，su之后也可以创建screen,那就是创建之前先script /dev/null]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>3</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>shell实现按任意键继续</title>
		<link>http://www.itopers.com/?p=238</link>
		<pubDate>Fri, 23 Aug 2013 16:35:00 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=238</guid>
		<description></description>
		<content:encoded><![CDATA[有一个数据库，我需要开发一个工具，由于这个数据库没有任何说明，我也不知道当时是怎么创建的。哎，需要找表，找字段,别说有多痛苦了......当然，我是根据数据来找的。我一个个数据表打开看感觉太慢慢，全部打开又会影响到其它工具使用。后来我就了个按任意键继续，没有找到就继续找。具体方法：

#!/bin/bash
get_char()
{
SAVEDSTTY=`stty -g`     <span style="color: #ff0000;"> #记录当前stty配置</span>
stty -echo                      <span style="color: #ff0000;"> #隐藏输入的字符</span>
stty raw
dd if=/dev/tty bs=1 count=1 2&gt; /dev/null        <span style="color: #ff0000;">#每次只接收一个字符</span>
stty -raw
stty echo
stty $SAVEDSTTY
}
for i in `mysql -h192.168.0.104 -ugzsy -p123456 gzsy -e "show tables;" |sed 's/[^a-z]//g'`;
do
mysql -h192.168.0.104 -ugzsy -p123456 gzsy -e "select * from $i order by idRecord desc limit 2\G";
echo $i=============================================================================
c=`get_char`
if [ "$c" = "q" ];then     <span style="color: #ff0000;"> #当输入q时就退出</span>
exit 1
fi
done

这个例子主要是学习stty，stty的学习资料

stty(settty，设置tty)命令用于检查和修改当前注册的终端的通信参数。UNIX系统为键盘的输入和终端的输出提供了重要的控制手段，可以通过stty命令对特定终端或通信线路设置选项。

可以在stty命令中使用-a查看当前注册终端的设置情况。

[root@server1 bin]#<strong> stty -a     </strong>
speed 38400 baud; rows 33; columns 132; line = 0;
intr = ^C; quit = ^\; erase = ^?; kill = ^U; eof = ^D; eol = &lt;undef&gt;; eol2 = &lt;undef&gt;; swtch = &lt;undef&gt;; start = ^Q; stop = ^S;
susp = ^Z; rprnt = ^R; werase = ^W; lnext = ^V; flush = ^O; min = 1; time = 0;
-parenb -parodd cs8 -hupcl -cstopb cread -clocal -crtscts -cdtrdsr
-ignbrk -brkint -ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl ixon -ixoff -iuclc -ixany -imaxbel -iutf8
opost -olcuc -ocrnl onlcr -onocr -onlret -ofill -ofdel nl0 cr0 tab0 bs0 vt0 ff0
isig icanon iexten echo echoe echok -echonl -noflsh -xcase -tostop -echoprt echoctl echoke

这里^表示是ctrl,如intr表示中断，ctrl+C，有时候是不是不小心按了<span style="color: #ff0000;">ctrl+s</span>(学习windows时时要保存留下来的习惯)，按了之后导致session停了，无法使用。不知道的人就直接关闭终端，重新开了。重新开很麻烦有木有？看到上面的显示了吧

stop = ^S;  表示stop,停止，那么需要再次使用呢？start = ^Q;就是<span style="color: #ff0000;">Ctrl+q。</span>

在stty中相应选项前冠以负号（-），该选项被清除（禁止）；如果无负号，该选项被设置。

具体stty资料请参考：http://study.chyangwa.com/IT/AIX/aixcmds5/stty.htm#jdfli96manu]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>238</wp:post_id>
		<wp:post_date><![CDATA[2013-08-24 00:35:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-23 16:35:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[shell%e5%ae%9e%e7%8e%b0%e6%8c%89%e4%bb%bb%e6%84%8f%e9%94%ae%e7%bb%a7%e7%bb%ad]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<category domain="post_tag" nicename="shell-2"><![CDATA[shell]]></category>
		<category domain="post_tag" nicename="stty"><![CDATA[stty]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[596]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【linux】查看网卡mac地址</title>
		<link>http://www.itopers.com/?p=247</link>
		<pubDate>Sat, 24 Aug 2013 01:29:38 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[<div> 1. ifconfig -a 其中 HWaddr字段就是<span style="text-decoration: underline;"><strong>mac</strong></span>地址

2. cat /sys/class/net/eth0/address 查看eth0的mac地址

3. cat /proc/net/arp 查看连接到本机的远端ip的mac地址

4. 程序中使用SIOCGIFHWADDR的ioctl命令获取mac地址</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date><![CDATA[2013-08-24 09:29:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-24 01:29:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91%e6%9f%a5%e7%9c%8b%e7%bd%91%e5%8d%a1mac%e5%9c%b0%e5%9d%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="%e7%b3%bb%e7%bb%9f%e5%9f%ba%e7%a1%80"><![CDATA[系统基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[152]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[766]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【SSH】Address 192.168.4.104 maps to node104.netprostech.net, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!</title>
		<link>http://www.itopers.com/?p=249</link>
		<pubDate>Sat, 24 Aug 2013 05:04:12 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=249</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>
<div>某天登录某一台线上机器，遇到了一个错误提示，但是不影响正常使用，为了满足下自己的好奇心，我还得想知道为什么会出现这个问题，并把它kill掉。</div>
<div>命令如下：</div>
<div># ssh 192.168.4.104</div>
<div>Address 192.168.4.104 maps to node104.netprostech.net, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!</div>
<b>
</b>

</div>
<div><b>解决办法：</b></div>
<div>     修改本机/etc/ssh/ssh_config文件中的为：     GSSAPIAuthentication no</div>
<div>     修改远程机/etc/ssh/sshd_config文件中的为： GSSAPIAuthentication no</div>
<div>     或者</div>
<div>     将本机IP和主机名添加到/etc/hosts文件中</div>
<div><b> </b></div>
<div><span style="font-family: Tahoma, Arial, Helvetica, sans-serif;"><b>过程分析：</b></span></div>
<div><span style="font-family: Tahoma, Arial, Helvetica, sans-serif;">     使用-v参数查看连接过程详情时，可以看到这句错误提示的位置：</span></div>
<div>debug1: Found key in /root/.ssh/known_hosts:1
debug1: ssh_rsa_verify: signature correct
debug1: SSH2_MSG_NEWKEYS sent
debug1: expecting SSH2_MSG_NEWKEYS
debug1: SSH2_MSG_NEWKEYS received
debug1: SSH2_MSG_SERVICE_REQUEST sent
debug1: SSH2_MSG_SERVICE_ACCEPT received
debug1: Authentications that can continue: publickey,gssapi-keyex,gssapi-with-mic,password
debug1: Next authentication method: gssapi-keyex
debug1: No valid Key exchange context
debug1: Next authentication method: gssapi-with-mic
<span style="color: #ff0000;">Address 192.168.4.104 maps to node104.netprostech.net, but this does not map back to the address - POSSIBLE BREAK-IN ATTEMPT!</span>
debug1: Unspecified GSS failure.  Minor code may provide more information
Credentials cache file '/tmp/krb5cc_0' not found
debug1: Unspecified GSS failure.  Minor code may provide more information
Credentials cache file '/tmp/krb5cc_0' not found
debug1: Unspecified GSS failure.  Minor code may provide more information
debug1: Unspecified GSS failure.  Minor code may provide more information</div>
<div>通过错误的位置，我们可以看到，错误是在GSSAPI认证的时候发生的。</div>
<div></div>
<div><b>问题原因：</b></div>
<div>     1.当你使用ssh或sftp连接到某台主机是，它会进行一系列的检查，以确保你连接到的是想要的机器，默认情况下，它会检查一项“reverse lookup on the IP address”确保机器名称和你要连接的机器名称的一致性，不一致就会得到一个错误信息。</div>
<div>     2.一般情况下，如果使用自己的DNS或使用hosts文件来解析的话，就不会出现该问题了</div>
<div></div>
<div></div>
<div><b>附加：</b></div>
<div>     有人出现如下错误提示：<span style="color: #ff0000;">reverse mapping checking getaddrinfo for XXX.XXXX.com failed - POSSIBLE BREAKIN ATTEMPT!</span><span style="font-family: Tahoma, Arial, Helvetica, sans-serif;"><span style="color: #ff0000;"> </span>   </span>这个错误提示是在使用域名的方式登录时，解析失败造成的，也可以通过上面的方法来解决。</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>249</wp:post_id>
		<wp:post_date><![CDATA[2013-08-24 13:04:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-24 05:04:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[address-192-168-4-104-maps-to-node104-netprostech-net-but-this-does-not-map-back-to-the-address-possible-break-in-attempt]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[157]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1475]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【转】磁盘分区对齐的重要性</title>
		<link>http://www.itopers.com/?p=254</link>
		<pubDate>Mon, 26 Aug 2013 01:48:59 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=254</guid>
		<description></description>
		<content:encoded><![CDATA[这几年新出的硬盘由于既要增加每个扇区的存储空间，又要保证和现有操作系统的兼容，所以出现了物理扇区和逻辑扇区的概念。而这样的硬盘可能会产生分区对齐问题。没有做分区对齐的硬盘性能会受到一定的影响
<div>  下面写文章来说明不做分区对齐对分区性能的影响和如何做分区对齐</div>
<div></div>
<div>先普及几个概念：</div>
<div>physical sector：磁盘的一个物理扇区，目前大硬盘一般为4096bytes(4KB)，其他的有512bytes（0.5KB）的</div>
<div>logical sector：现在physical sector是4096的硬盘往往会把一个physical sector分成8个logical sector，每个512bytes(0.5KB)，系统实际操作logical sector：划分logical sector的原因是有些系统调用还不支持sector为4096bytes（4KB）的磁盘</div>
<div>LBA:逻辑块寻址方法，实际中表现为系统中用来定位磁盘的logical sector的一个逻辑地址</div>
<div>block size:系统内对分区格式化后划分的最小磁盘单元</div>
<div></div>
<div>举例：</div>
<div>以一个2T的硬盘为例</div>
<div>查看磁盘physical sector size、logical sector size和容量</div>
<div>
<pre class="lang:default decode:true "># hdparm -I /dev/sdj|egrep -i "physical|logical|device size with M"
Logical  Sector size:                   512 bytes
Physical Sector size:                  4096 bytes
device size with M = 1024*1024:     1907729 MBytes
device size with M = 1000*1000:     2000398 MBytes (2000 GB)</pre>
说明每个physical sector 里有8个logical sector
<div>查看文件系统的block size</div>
<pre class="lang:default decode:true"># tune2fs -l /dev/sdj1|grep "Block size:"
Block size:               4096</pre>
我们在给这个磁盘做分区的时候，如果选择0-100%，则会提示”warning：<b>partition is not properly aligned for best performance</b>“，说明这种分区方法使分区的性能损失，为什么呢？
<div>如下图所示，一圈代表一个物理扇区(后来查到其实一圈有很多歌扇区，比如256个)，用黑线分割成了8个逻辑扇区。没有做分区对齐的分区就类似于把分区起始LBA放置在了红线位置。这样会导致什么后果？有100%的block跨越物理扇区，处理任何该分区下的文档都会包含至少一个跨越物理扇区的block，磁盘跨扇区访问每个block，这样势必会影响文件系统的I/O性能。0-100%的分区行为就是因为分区的起始位置没有在单个扇区的起始位置才会产生waring</div>
<div><a href="http://noops.me/wp-content/uploads/2013/07/2.jpg"><img alt="2" src="http://noops.me/wp-content/uploads/2013/07/2-300x187.jpg" width="300" height="187" /></a></div>
<div>大概明白了吧？我们需要把分区的起始位置放置在扇区的0，才能保证每个block占用一个独立的扇区，访问单独的block就不需要跨越扇区了。可不要小看这访问block跨扇区的动作，在有大量磁盘I/O操作时，对磁盘性能的影响还是很显著的。</div>
<div>对于以上磁盘的情况，我们可以如下分区</div>
<pre class="lang:default decode:true ">#parted /dev/sdj
unit s
mkpart
ext4
40s
100%</pre>
注意这里40s的意思是起始LBA位置为40 logical sector，恰好是一个physical的开始(40/8=5)
<div>对于physical sector size = logical sector size的磁盘，一般不用考虑分区对齐问题</div>
<div></div>
<div>原文来自：http://noops.me/?p=747</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>254</wp:post_id>
		<wp:post_date><![CDATA[2013-08-26 09:48:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-26 01:48:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%bd%ac%e3%80%91%e7%a3%81%e7%9b%98%e5%88%86%e5%8c%ba%e5%af%b9%e9%bd%90%e7%9a%84%e9%87%8d%e8%a6%81%e6%80%a7]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[158]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[27687]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>linux下开启core文件生成</title>
		<link>http://www.itopers.com/?p=256</link>
		<pubDate>Mon, 26 Aug 2013 04:18:38 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=256</guid>
		<description></description>
		<content:encoded><![CDATA[core文件是程序运行不正常情况下生成的，但是否生成是需要在系统中进行设置的，linux系统下，默认是关闭状态。为什么要生成core,对于自己开发的程序来说，生成core文件可以帮助解决查出程序bug。可为程序员们提供程序宕机时的调试信息。当然，使用gdb来查看core文件，可以指示出导致程序出错的代码所在文件和行数。

<strong>1.core文件的生成开关和大小限制</strong>

1)使用<span style="color: #ff0000;">ulimit -c</span>命令可查看core文件的生成开关。若结果为<span style="color: #ff0000;">0</span>，则表示关闭了此功能，不会生成core文件。

2) 使用ulimit -c filesize命令，可以限制core文件的大小(filesize的单位为kbyte)。若<span style="color: #ff0000;">ulimit -c unlimited</span>，则表示core文件的大小不受限制。如果生成的信息超过此大小，将会被裁剪，最终生成一个不完整的core文件。在调试此core文 件的时候，gdb会提示错误。

<span style="color: #ff0000;">   注意：使用ulimit -c   unlimited这种方式开启，只在当用终端生效，退出后就消失。而且不能为特定的用户开启。</span>

<strong>　　2.core文件的名称和生成路径</strong>

core文件生成路径：<span style="color: #ff0000;"><strong>/proc/sys/kernel/core_pattern</strong></span>

输入可执行文件运行命令的同一路径下。

若系统生成的core文件不带其它任何扩展名称，则全部命名为core。新的core文件生成将覆盖原来的core文件。

<span style="color: #ff0000;">1)/proc/sys/kernel/core_uses_pid</span>可以控制core文件的文件名中是否添加pid作为扩展。文件内容为1，表示添加pid作为扩展名，生成的core文件格式为core.xxxx;为0则表示生成的core文件同一命名为core。

可通过以下命令修改此文件：

echo "1" &gt; /proc/sys/kernel/core_uses_pid

<span style="color: #ff0000;">2)proc/sys/kernel/core_pattern可以控制core文件保存位置和文件名格式。</span>

可通过以下命令修改此文件：

echo "/corefile/core-%e-%p-%t" &gt; core_pattern，可以将core文件统一生成到/corefile目录下，产生的文件名为core-命令名-pid-时间戳

以下是参数列表：

%p - insert pid into filename 添加pid

%u - insert current uid into filename 添加当前uid

%g - insert current gid into filename 添加当前gid

%s - insert signal that caused the coredump into the filename 添加导致产生core的信号

%t - insert<a id="k530834966" href="http://www.chinabyte.com/keyword/unix/" target="_blank"> UNIX</a> time that the coredump occurred into filename 添加core文件生成时的unix时间

%h - insert hostname where the coredump happened into filename 添加主机名

%e - insert coredumping executable name into filename 添加命令名

3)在<span style="color: #ff0000;">/etc/sysctl.conf</span>文件中修改

<span style="color: #ff0000;">kernel.core_pattern=/tmp/core%p</span>

立即生效可执行：<span style="color: #ff0000;">sysctl -p /etc/sysctl.conf</span>

<strong>3.core文件的查看</strong>

core文件需要使用gdb来查看。

gdb ./a.out

core-file core.xxxx

<strong>4.通过配置文件来开启core文件</strong>

配置文件： /etc/security/limits.conf

在这个配置文件添加如下一条就可以在所用用户下生成core文件，且没有大小限制。

<span style="text-decoration: underline;">* soft core   unlimited</span>

<span style="color: #ff0000;"> 注意：这种方法生效是需要重启系统才行。可以为某个用户进行配置。</span>

<strong><span style="color: #ff0000;">所有的core文件打开都需要在程序启动之前，否则是无法生成core文件的。</span></strong>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>256</wp:post_id>
		<wp:post_date><![CDATA[2013-08-26 12:18:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-26 04:18:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e4%b8%8b%e5%bc%80%e5%90%afcore%e6%96%87%e4%bb%b6%e7%94%9f%e6%88%90]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="core"><![CDATA[core]]></category>
		<category domain="post_tag" nicename="gdb"><![CDATA[gdb]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[921]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>4G最快网速相当于30M宽带</title>
		<link>http://www.itopers.com/?p=262</link>
		<pubDate>Mon, 26 Aug 2013 11:14:57 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=262</guid>
		<description></description>
		<content:encoded><![CDATA[在4G年内已成定局的背景下，各运营商都在加快布局，北京移动近期就推出了4G友好用户体验活动。4G的信号覆盖情况怎样？4G业务的下载速度到底有多快？带着消费者最为关心的问题，近日记者在多个地点对北京移动的4G终端进行了一番体验。

京华时报记者古晓宇

<strong>　　□体验任务之终端</strong>

&nbsp;

<strong>　　三种终端可供使用</strong>

目前，北京移动对外提供的4G体验终端有三种，分别是4G上网卡（与3G上网卡相似，通过USB插在电脑上使用）、MiFi（将4G网络信号转换成手机、iPad、笔记本电脑都通用的WiFi信号）和CPE（4G无线网关，与常用的无线路由器相似，但更方便，可随时移动）。

记者此次体验使用的终端是MiFi，从3G时代WiFi设备的普及程度可以预见，当4G业务真正来临后，MiFi终端肯定会成为人们使用最多的4G设备之一。

<strong>　　4G手机尚未现身</strong>

遗憾的是，在目前的体验产品中并没有4G手机的踪影。不过据记者了解，在下个月初，有一家知名手机厂商就会在国内发布一款支持中国移动TD-LTE网络的4G手机，而这款手机的原型机也是一款在国内普及度很高的手机，究竟是哪款呢？谜底还要等到下月揭晓。

<strong>站在用户的角度看</strong>

4G业务最为关键的终端自然是手机，因此记者也希望能有越来越多支持4G网络的手机产品尽快上市。毕竟，3G时代的发展经验证明，好的终端才是决定成败的关键。从目前记者了解到的信息看，受4G手机终端上市速度的影响，4G的大规模商用可能要到后年才会开始。

<strong>　　□体验任务之信号</strong>

&nbsp;

<strong>　　发现</strong>

&nbsp;

<strong>　　覆盖可达东五环</strong>

据北京移动方面介绍，目前其4G网络的覆盖范围包括：东西北三环、南至两广路以内的地区；清华北大、国贸CBD及园博会等地区。

此次记者的体验测试范围主要集中在东部地区，记者一路从东二环至东五环对4G网络信号的覆盖情况进行测试后发现，在北京东部

地区，4G网络覆盖情况要好于北京移动公布的情况，不仅三环之内都有4G网络覆盖，而且在东四环范围内，MiFi都能够稳定地提供信号。即便在东四环以外，大部分区域依然可以搜索到4G信号，甚至在接近东五环的姚家园地区还能够正常使用MiFi。直到出了东五环，信号才彻底消失。

<strong>　　发现</strong>

&nbsp;

<strong>　　室外信号优于室内</strong>

记者在测试中发现，目前北京移动4G试验网的室外信号覆盖要优于室内。例如姚家园地区，在室外可以稳定地使用4G网络，但进入室内后信号便时有时无。同样，即使是在三环之内的左家庄地区，尽管室内室外都有信号覆盖，但室内的网速要远远低于在室外使用时的网速。不过，在位于大望路的万达广场内，4G信号在室内室外都表现不错，且室内外的下行网速也相差不多。

对此，电信行业分析师付亮解释说，目前TD—LTE所使用的频段基本在2000MHz以上，这个频段的穿透力不强，通过基站进行室外覆盖没问题，但在楼宇密集地带，如果没有经过室内覆盖的优化，在室内的信号就会受到影响。“GSM网络使用频段比LTE的低，穿透性更好，但也是经过了十几个阶段的优化之后才达到现在的覆盖效果，而4G网络要做到这一步显然是一个艰巨的工程。”

此外，记者还发现，MiFi会自动在2G、3G和4G网络之间切换，如果4G网络覆盖不佳时，也可以使用3G甚至2G网络进行连接，当然，网络速度与4G相比差距非常明显。

<strong>试验网表现不错</strong>

通过体验，记者发现，至少在北京城区的东部，TD-LTE网络的覆盖范围已较为广泛，虽然距离正式商用还有差距，但仅就试验网来说已经是相当不错了。下一阶段，补点完善覆盖范围、加强室外信号的覆盖和优化应该成为4G网络建设的重点。

<strong>□体验任务之网速</strong>

<strong>　　发现</strong>

&nbsp;

<strong>　　最快相当于30M宽带</strong>

4G网络的下载速率到底能达到多快？记者体验后发现，在信号覆盖比较理想的室外，使用手机测速软件显示出的下行速率基本都在2MB/s到3MB/s之间，其中下行网速最快时能够达到4MB/s左右，这大概相当于30M左右的带宽水平（注：下行速率×8为对应的带宽水平）。从测试的平均值来看，目前北京移动4G网络的基本下行速率在3MB/s左右。

另外，记者还用笔记本电脑接入MiFi的无线网络，使用迅雷下载了一段大小约100M的视频，只用了不到1分钟就下载完毕，下载速率峰值达到3MB/s左右，与记者家中使用的10M光纤宽带下载速度很接近。

&nbsp;

<strong>　　发现</strong>

&nbsp;

<strong>　　室内网速参差不齐</strong>

由于室内信号覆盖不及室外，记者在几个室内场所测试时，4G网络的下行速率表现参差不齐。在大望路的万达广场室内，4G网络信号稳定，下行速率可达3MB/s左右，与同一地点的室外值相同；在姚家园的活力东方广场内，信号覆盖不稳定，有的地方完全没有信号，而有信号的地方下行速率为2MB/s左右。

奇怪的是，在位于二环和三环之间的左家庄地区，虽然位置更加靠近市中心，但室内的实际下行速率并不高。在4G网络下，记者使用手机下载应用软件的实时速率在200KB/s-300KB/s之间，这与记者同时使用一台联通制式3G手机下载相同应用的速率相比差不多。不过，这样的网速基本可以满足正常的使用需求。

<strong>　　结论</strong>

&nbsp;

<strong>　　总体优于3G网络</strong>

目前北京地区3G网络速率最快的是联通的WCDMA网络，带宽可达21M。而从记者体验的情况来看，北京移动的4G网络在下行速率和实际带宽上的表现是要优于包括联通在内的3G网络的。不过需要指出的是，这是在试验网特定情况下得出的数据，比如，现在的4G用户数量极少，当记者测试时，周边只有记者这一台设备在使用4G网络，不存在多个用户竞争带宽的情况，所以，现在的测试情况并不能代表4G网络正式商用后的水平，仅供参考。

(责任编辑：GH)

文章来源：http://news.ccidnet.com/art/1032/20130826/5141823_2.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>262</wp:post_id>
		<wp:post_date><![CDATA[2013-08-26 19:14:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-26 11:14:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[4g%e6%9c%80%e5%bf%ab%e7%bd%91%e9%80%9f%e7%9b%b8%e5%bd%93%e4%ba%8e30m%e5%ae%bd%e5%b8%a6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<category domain="category" nicename="%e8%a1%8c%e4%b8%9a%e8%b5%84%e8%ae%af"><![CDATA[行业资讯]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[486]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>微软警告Win XP用户：若不升级将遭“零日漏洞”攻击</title>
		<link>http://www.itopers.com/?p=266</link>
		<pubDate>Mon, 26 Aug 2013 11:33:24 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=266</guid>
		<description></description>
		<content:encoded><![CDATA[<img alt="" src="http://www.itnews001.com/wp-content/uploads/2013/08/2315_rdn_520ed58fc757a.jpg" width="400" height="300" />

Windows XP启动画面

据国外科技网站PCWorld报道，日前微软向Windows XP用户发出警告，如果不尽快远离Windows XP、升级到更高系统，那么今后将永难摆脱遭受“零日漏洞”攻击的可能。

微软此前多次提醒、劝导和恳请用户，在明年微软对Windows XP这款老的操作系统结束支持之前要离开这一操作系统。而如今，微软一改劝导和恳请语气，正式警告用户：如用户不尽快将Windows XP升级到新的操作系统，他们在Windows XP剩下的时日里可能会遭受“零日漏洞”攻击。

微软将在2014年4月8日结束对Windows XP系统的支持，这意味着至此微软将再发布相关补丁或其他安全解决方案。

就安全方面而言，微软结束对Windows XP系统的支持意味着什么？微软可信赖计算部门（Trustworthy Computing）主管蒂姆·瑞恩斯（Tim Rains）表示，“在微软为其支持的Windows版本发布安全更新程序的第一个月，攻击者就开始对这些更新实施逆向工程，试图寻找漏洞，他们测试Windows XP是否存在这些漏洞。”

瑞恩斯还表示，“如果Windows XP上存在这些漏洞，攻击者将尝试利用这些漏洞编写一些攻击代码。由于微软将不会再为Windows XP提供安全升级支持，因而Windows XP用户从理论上来讲将永远有遭受‘零日漏洞’攻击的可能。”

“零日漏洞”攻击是指黑客在操作系统或其他代码发布安全补丁之前实施的攻击。因在2014年4月后微软不再给Windows XP发布安全补丁程序，因此黑客最终会找到可攻击Windows XP系统的“零日漏洞”。

瑞恩斯还称，2012年7月至2013年7月间，作为受攻击产品，Windows XP系统曾45次出现在微软的安全威胁公告中。其中有30个安全威胁同时影响到了Windows 7和Windows 8。

瑞恩斯承认Windows XP自身的部分保护功能将有助于减少攻击，以及第三方反恶意程序软件也可能会提供一些保护。但他表示，“面临的挑战是，你永远不会知道该系统的可信赖计算基础是否仍然可信，因为攻击者已掌握了Windows XP的漏洞，随时可运行他们自己的代码、发动零日攻击。”

但有人辩称，黑客近期不会针对Windows XP发动“零日攻击”，反而选择蓄势待发、直至明年4月份后，届时将对大量未受保护的XP电脑发起全面攻击。瑞恩斯指出，诡异的恶意软件技术只会提高，这意味着你的XP电脑会变得更加脆弱。PCWorld栏目Answer Line的专栏作家林肯·斯佩克特(Lincoln Spector)赞同这一观点。

问题在于，部分XP电脑用户真正太喜欢Windows XP系统了，他们不愿迁移到其他系统，尤其是Windows 8。专家建议，用户可以选择Windows 7，其功能与Windows XP功能类似。

对于Windows XP用户来说，尽管微软劝说消费者升级是为了得利，但它们的确提供了安全保障。因此，如果你仍然在使用Windows XP，的确该考虑进行升级，现在就升级。

via:凤凰科技

文章来源：http://www.itnews001.com/archives/4614

<span style="color: #ff0000;">“<strong>零日漏洞</strong>”(zero-day)又叫<a href="http://baike.baidu.com/view/534234.htm" target="_blank"><span style="color: #ff0000;">零时差攻击</span></a>，是指被发现后立即被恶意利用的安全漏洞。通俗地讲，即安全补丁与瑕疵曝光的同一日内，相关的恶意程序就出现。这种攻击往往具有很大的突发性与破坏性。</span>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>266</wp:post_id>
		<wp:post_date><![CDATA[2013-08-26 19:33:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-26 11:33:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%be%ae%e8%bd%af%e8%ad%a6%e5%91%8awin-xp%e7%94%a8%e6%88%b7%ef%bc%9a%e8%8b%a5%e4%b8%8d%e5%8d%87%e7%ba%a7%e5%b0%86%e9%81%ad%e9%9b%b6%e6%97%a5%e6%bc%8f%e6%b4%9e%e6%94%bb%e5%87%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-image"><![CDATA[图像]]></category>
		<category domain="post_tag" nicename="windows-xp"><![CDATA[windows xp]]></category>
		<category domain="category" nicename="%e8%a1%8c%e4%b8%9a%e8%b5%84%e8%ae%af"><![CDATA[行业资讯]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[53911]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux】LinuxPAE内核</title>
		<link>http://www.itopers.com/?p=272</link>
		<pubDate>Wed, 28 Aug 2013 15:08:23 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=272</guid>
		<description></description>
		<content:encoded><![CDATA[<p align="center"></p>
<p align="left">         由于线上机经常发生网卡宕掉的情况，所以需要对所有机器在初始化阶段对其进行驱动检查，对于版本较低的进行升级，在升级到某一台机器时，发生了错误。</p>
<p align="left">         提示/lib/modules/2.6.18-164.el5PAE/build：No such file or directory的错误</p>
<p align="left"> <a href="http://www.itopers.com/wp-content/uploads/2013/08/103.6.152.png"><img class="alignnone size-full wp-image-273" alt="103.6.152" src="http://www.itopers.com/wp-content/uploads/2013/08/103.6.152.png" width="645" height="269" /></a></p>
<p align="left">        这个操作系统版本是Rhel5u4，之前对同版本的系统升级过，一直没出现过错误，</p>
<p align="left">        于是开始查看一下系统相关信息，</p>
<p align="left"> <a href="http://www.itopers.com/wp-content/uploads/2013/08/103.6.152-2.png"><img class="alignnone size-full wp-image-274" alt="103.6.152-2" src="http://www.itopers.com/wp-content/uploads/2013/08/103.6.152-2.png" width="643" height="173" /></a></p>
<p align="left">内存：6G</p>
<p align="left">内核是：2.6.18-164.el5PAE</p>
<p align="left">系统位数：32位</p>
<p align="left">          看到这里，不太清楚的小伙伴们可能会不明白了，在32位操作系统上安装6G的内存，不是有2G浪费了吗？实际上，PAE已经将这个问题解决了。PAE是物理地址扩展（Physical Address Extension），它的出现就是要让32位的操作系统突破只能使用4G内存的限制，它可以使系统最大支持到64G。内核从2.6开始就可以支持PAE了，但是，要安装PAE内核也需要CPU的支持。如果你的系统现在是32位，非PAE系统，而想升级成这个版本，实际上也很简单，安装Linux-Generic-PAE这个包。据同事说，这个系统之所有会安装上这个PAE内核，是由于系统安装时，就已经有6G内存，这时，系统自动就安装了PAE内核。</p>
<p align="left"></p>
<p align="left"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>272</wp:post_id>
		<wp:post_date><![CDATA[2013-08-28 23:08:23]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-28 15:08:23]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91linuxpae%e5%86%85%e6%a0%b8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="case%e6%a1%88%e4%be%8b"><![CDATA[Case案例]]></category>
		<category domain="category" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="pae"><![CDATA[PAE]]></category>
		<category domain="post_tag" nicename="%e5%86%85%e6%a0%b8"><![CDATA[内核]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90linux%e3%80%91%e5%86%85%e6%a0%b8%e5%af%bc%e8%87%b4%e7%bd%91%e5%8d%a1%e5%8d%87%e7%ba%a7%e5%a4%b1%e8%b4%a5]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[532]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>linux下find不查找子目录或只查找到指定深度的子目录</title>
		<link>http://www.itopers.com/?p=280</link>
		<pubDate>Fri, 30 Aug 2013 05:43:58 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=280</guid>
		<description></description>
		<content:encoded><![CDATA[今天需要删除一些不需要的文件，个人习惯是先找出来，然后再进行删除，防止勿删除。所以用到了find命令，但是如何才能只找出当前目录的文件，不到子目录里找呢？默认是查找当前目录及当前所有子目录的。

实现方法是一个参数搞定：<span style="color: #ff0000;">-maxdepth</span>

我是man找了好一会儿，才找到，之前是知道有这么个功能，但就不记得怎么写了。

$<strong>find ./  -name \"tlbb*.tgz\"  -type f -maxdepth 1</strong>
find: warning: you have specified the -maxdepth option after a non-option argument -name, but options are not positional (-maxdepth affects tests specified before it as well as those specified after it).  Please specify options before other arguments.
./a.tgz
./b.tgz

命令下面多了好多不需要信息，显示不影响正常查找，如果想去掉，只要把参数顺序调整一下就可以了。
$<strong>find ./ -maxdepth 1 -name \"tlbb*.tgz\"  -type f</strong>
./a.tgz
./b.tgz

“男人”一把的时候，解释一下其它的比较常用的参数：

-name   filename             #查找名为filename的文件
-perm                        #按执行权限来查找
-user    username             #按文件属主来查找
-group groupname            #按组来查找
-mtime   -n +n                #按文件更改时间来查找文件，-n指n天以内，+n指n天以前
-atime    -n +n               #按文件访问时间来查GIN: 0px"&gt;

-ctime    -n +n              #按文件创建时间来查找文件，-n指n天以内，+n指n天以前
<div>-nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在
-nouser                     #查无有效属主的文件，即文件的属主在/etc/passwd中不存
-newer   f1 !f2              找文件，-n指n天以内，+n指n天以前
-ctime    -n +n               #按文件创建时间来查找文件，-n指n天以内，+n指n天以前
-nogroup                     #查无有效属组的文件，即文件的属组在/etc/groups中不存在
-nouser                      #查无有效属主的文件，即文件的属主在/etc/passwd中不存
-newer   f1 !f2               #查更改时间比f1新但比f2旧的文件
-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件
-size      n[c]               #查长度为n块[或n字节]的文件
-depth                       #使查找在进入子目录前先行查找完本目录
-fstype                     #查更改时间比f1新但比f2旧的文件
-type    b/d/c/p/l/f         #查是块设备、目录、字符设备、管道、符号链接、普通文件
-size      n[c]               #查长度为n块[或n字节]的文件
-depth                       #使查找在进入子目录前先行查找完本目录
-fstype                      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到
-mount                       #查文件时不跨越文件系统mount点
-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件
-cpio                %;      #查位于某一类型文件系统中的文件，这些文件系统类型通常可 在/etc/fstab中找到
-mount                       #查文件时不跨越文件系统mount点
-follow                      #如果遇到符号链接文件，就跟踪链接所指的文件
-cpio                        #对匹配的文件使用cpio命令，将他们备份到磁带设备中
-prune                       #忽略某个目录</div>
<div><span style="color: #ff0000;">-mindepth levels     #这个与maxdepth相反，从levels级子目录开始查找所有子目录</span></div>
<div><strong>如：find ./ -mindepth 2 -name "*.sh"  -type f    查找当里的子目录所有以.sh结尾的文件，不包括当前目录。</strong></div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>280</wp:post_id>
		<wp:post_date><![CDATA[2013-08-30 13:43:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-30 05:43:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e4%b8%8bfind%e4%b8%8d%e6%9f%a5%e6%89%be%e5%ad%90%e7%9b%ae%e5%bd%95%e6%88%96%e5%8f%aa%e6%9f%a5%e6%89%be%e5%88%b0%e6%8c%87%e5%ae%9a%e6%b7%b1%e5%ba%a6%e7%9a%84%e5%ad%90%e7%9b%ae%e5%bd%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="find"><![CDATA[find]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[831]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】湖南农大关心下一代工作委员会</title>
		<link>http://www.itopers.com/?p=284</link>
		<pubDate>Sat, 31 Aug 2013 17:54:46 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=284</guid>
		<description></description>
		<content:encoded><![CDATA[2010年10月份，为学校关工委做了一次网站改版，现在还可以访问：<a href="http://www.hauggw.cn/">http://www.hauggw.cn/</a>，采用的是：.net+sqlserver。

截了首页一个小图：
<p style="text-align: center;"><a href="http://www.itopers.com/wp-content/uploads/2013/09/湖南农业大学关心下一代工作委员会-Google-Chrome_2013-09-01_01-49-40.jpg"><img class="size-full wp-image-285 aligncenter" alt="湖南农业大学关心下一代工作委员会 - Google Chrome_2013-09-01_01-49-40" src="http://www.itopers.com/wp-content/uploads/2013/09/湖南农业大学关心下一代工作委员会-Google-Chrome_2013-09-01_01-49-40.jpg" width="825" height="605" /></a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>284</wp:post_id>
		<wp:post_date><![CDATA[2013-09-01 01:54:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-08-31 17:54:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e6%b9%96%e5%8d%97%e5%86%9c%e5%a4%a7%e5%85%b3%e5%bf%83%e4%b8%8b%e4%b8%80%e4%bb%a3%e5%b7%a5%e4%bd%9c%e5%a7%94%e5%91%98%e4%bc%9a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[393]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>netstat中Send -Q Recv -Q的意思</title>
		<link>http://www.itopers.com/?p=298</link>
		<pubDate>Wed, 04 Sep 2013 10:12:58 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>Send -Q Recv -Q</strong>

Send -Q 对方没有收到的数据或者说没有Ack的,还是本地缓冲区.

Recv -Q 数据已经在本地接收缓冲,但是还没有recv().
<strong>CLOSE_WAIT</strong>

对方主动关闭连接或者网络异常导致连接中断，这时我方的状态会变成CLOSE_WAIT 此时我方要调用close()来使得连接正确关闭

<strong>TIME_WAIT</strong>

我方主动调用close()断开连接，收到对方确认后状态变为TIME_WAIT。TCP协议规定TIME_WAIT状态会一直持续2MSL(即两倍的分 段最大生存期)，以此来确保旧的连接状态不会对新连接产生影响。处于TIME_WAIT状态的连接占用的资源不会被内核释放，所以作为服务器，在可能的情 况下，尽量不要主动断开连接，以减少TIME_WAIT状态造成的资源浪费。

目前有一种避免TIME_WAIT资源浪费的方法，就是关闭socket的LINGER选项。但这种做法是TCP协议不推荐使用的，在某些情况下这个操作 可能会带来错误。

<strong>/proc/sys/net/ipv4/tcp_fin_timeout</strong>
如 果套接字由本端要求关闭，这个参数决定了它保持在FIN-WAIT-2 状态的时间。对端可以出错并永远不关闭连接，甚至意外当机。缺省值是60 秒。2.2 内核的通常值是180 秒，你可以按这个设置，但要记住的是，即使你的机器是一个轻载的WEB 服务器，也有因为大量的死套接字而内存溢出的风险，FIN- WAIT-2 的危险性比FIN-WAIT-1 要小，因为它最多只能吃掉1.5K 内存，但是它们的生存期长些。参见tcp_max_orphans 。
<pre class="lang:default decode:true crayon-selected">/proc/sys/net/ipv4/tcp_keepalive_time
当keepalive 起用的时候，TCP 发送keepalive 消息的频度。缺省是2 小时。

/proc/sys/net/ipv4/tcp_keepalive_intvl
当 探测没有确认时，重新发送探测的频度。缺省是75 秒。

/proc/sys/net/ipv4/tcp_keepalive_probes
在 认定连接失效之前，发送多少个TCP 的keepalive 探测包。缺省值是9 。这个值乘以tcp_keepalive_intvl 之后决定了，一个连接发送了keepalive 之后可以有多少时间没有回应。</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date><![CDATA[2013-09-04 18:12:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-04 10:12:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[netstat%e4%b8%adsend-q-recv-q%e7%9a%84%e6%84%8f%e6%80%9d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1390]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】正良合作社</title>
		<link>http://www.itopers.com/?p=382</link>
		<pubDate>Sun, 08 Sep 2013 03:53:16 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=382</guid>
		<description></description>
		<content:encoded><![CDATA[2009年10月，一个朋友工作的地方需要做一个网站用来宣传自己的产品，帮他们做了一个网站，权当练练手了，也木有筹劳...

<a href="http://www.itopers.com/wp-content/uploads/2013/09/供销合作社-small.jpg"><img class="size-full wp-image-416 alignleft" alt="供销合作社-small" src="http://www.itopers.com/wp-content/uploads/2013/09/供销合作社-small.jpg" width="1000" height="1500" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>382</wp:post_id>
		<wp:post_date><![CDATA[2013-09-08 11:53:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 03:53:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e6%ad%a3%e8%89%af%e5%90%88%e4%bd%9c%e7%a4%be]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[354]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】优美家具网</title>
		<link>http://www.itopers.com/?p=419</link>
		<pubDate>Sun, 08 Sep 2013 04:56:20 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=419</guid>
		<description></description>
		<content:encoded><![CDATA[2010年3月份，一个已经毕业的学长要我做的，现在感觉做得好俗气啊，还是发上来留作纪念吧！

<a href="http://www.itopers.com/wp-content/uploads/2013/09/优美家具网.jpg"><img class="size-full wp-image-415 alignleft" alt="优美家具网" src="http://www.itopers.com/wp-content/uploads/2013/09/优美家具网.jpg" width="1000" height="1500" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>419</wp:post_id>
		<wp:post_date><![CDATA[2013-09-08 12:56:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 04:56:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e4%bc%98%e7%be%8e%e5%ae%b6%e5%85%b7%e7%bd%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[396]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】古贝网-校园歌手大赛</title>
		<link>http://www.itopers.com/?p=423</link>
		<pubDate>Sat, 07 Sep 2013 18:02:37 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=423</guid>
		<description></description>
		<content:encoded><![CDATA[2011年3月份，那时候加入古贝网一起搞创业，举办了校园歌手大赛，做的一个抽奖专题。

<a href="http://www.itopers.com/wp-content/uploads/2013/09/校园歌手大赛-small.jpg"><img class="size-full wp-image-411 alignleft" alt="校园歌手大赛-small" src="http://www.itopers.com/wp-content/uploads/2013/09/校园歌手大赛-small.jpg" width="1200" height="1380" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>423</wp:post_id>
		<wp:post_date><![CDATA[2013-09-08 02:02:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-07 18:02:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e5%8f%a4%e8%b4%9d%e7%bd%91-%e6%a0%a1%e5%9b%ad%e6%ad%8c%e6%89%8b%e5%a4%a7%e8%b5%9b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[364]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】农产品深加工</title>
		<link>http://www.itopers.com/?p=429</link>
		<pubDate>Fri, 06 Sep 2013 18:09:57 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=429</guid>
		<description></description>
		<content:encoded><![CDATA[2009年12月，用于练练手的一个小作品~~

<a href="http://www.itopers.com/wp-content/uploads/2013/09/农业深加工.jpg"><img class="size-full wp-image-383 alignleft" alt="农业深加工" src="http://www.itopers.com/wp-content/uploads/2013/09/农业深加工.jpg" width="1000" height="1100" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date><![CDATA[2013-09-07 02:09:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-06 18:09:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e5%86%9c%e4%ba%a7%e5%93%81%e6%b7%b1%e5%8a%a0%e5%b7%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[371]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】科创项目</title>
		<link>http://www.itopers.com/?p=431</link>
		<pubDate>Fri, 06 Sep 2013 18:11:59 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=431</guid>
		<description></description>
		<content:encoded><![CDATA[2010年5月份，为科创项目做的，不过后来这个也没用上了。

<a href="http://www.itopers.com/wp-content/uploads/2013/09/下载首页-small.jpg"><img class="size-full wp-image-413 alignleft" alt="下载首页-small" src="http://www.itopers.com/wp-content/uploads/2013/09/下载首页-small.jpg" width="1000" height="1700" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>431</wp:post_id>
		<wp:post_date><![CDATA[2013-09-07 02:11:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-06 18:11:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e7%a7%91%e5%88%9b%e9%a1%b9%e7%9b%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[359]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】亿豆网</title>
		<link>http://www.itopers.com/?p=433</link>
		<pubDate>Fri, 06 Sep 2013 18:22:02 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=433</guid>
		<description></description>
		<content:encoded><![CDATA[亿豆网这个项目，是我从2010年8月份就开始做的，一直做了大约1年多，后来由于快毕业了，我去参加Linux方面的学习，所以就没做了。不过这个项目现在也没再做下去了。

当时，做这个花了很多时间和 经历，所以，对它还是比较有感情的哦~由于页面实在是太多了，所以象征性地传2个上来吧~

进入页：

<a href="http://www.itopers.com/wp-content/uploads/2013/09/亿豆-enter2.jpg"><img class="alignleft" alt="亿豆 enter2" src="http://www.itopers.com/wp-content/uploads/2013/09/亿豆-enter2.jpg" width="605" height="405" /></a>

&nbsp;

&nbsp;

下载首页：

<a href="http://www.itopers.com/wp-content/uploads/2013/09/亿豆网index2-small.jpg"><img class="size-full wp-image-435 alignleft" alt="亿豆网index2-small" src="http://www.itopers.com/wp-content/uploads/2013/09/亿豆网index2-small.jpg" width="1046" height="2296" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date><![CDATA[2013-09-07 02:22:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-06 18:22:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e4%ba%bf%e8%b1%86%e7%bd%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[390]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】师范院网站</title>
		<link>http://www.itopers.com/?p=287</link>
		<pubDate>Sun, 08 Sep 2013 18:07:32 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=287</guid>
		<description></description>
		<content:encoded><![CDATA[2011年3月份，在离开工作室之前为学院做最后一次网站改版，感觉这一次做得相对还比较满意，可惜现在已经被学弟学妹们再次改下去了，发几个图，纪念一下吧。

首页图片：

<a href="http://www.itopers.com/wp-content/uploads/2013/09/院网最新改版.jpg"><img class="alignnone" alt="院网最新改版" src="http://www.itopers.com/wp-content/uploads/2013/09/院网最新改版.jpg" width="627" height="443" /></a>

文章列表和文章显示的两个子页面：

<a href="http://www.itopers.com/wp-content/uploads/2013/09/院网最新改版-sub2.jpg"><img class="alignnone size-full wp-image-291" alt="院网最新改版-sub2" src="http://www.itopers.com/wp-content/uploads/2013/09/院网最新改版-sub2.jpg" width="1131" height="800" /></a>

<a href="http://www.itopers.com/wp-content/uploads/2013/09/院网最新改版-sub.jpg"><img class="alignnone size-full wp-image-290" alt="院网最新改版-sub" src="http://www.itopers.com/wp-content/uploads/2013/09/院网最新改版-sub.jpg" width="1131" height="800" /></a>

用户中心页面：

<a href="http://www.itopers.com/wp-content/uploads/2013/09/院网-个人中心-index.jpg"><img class="alignnone size-full wp-image-288" alt="院网-个人中心-index" src="http://www.itopers.com/wp-content/uploads/2013/09/院网-个人中心-index.jpg" width="1000" height="765" /></a>

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>287</wp:post_id>
		<wp:post_date><![CDATA[2013-09-09 02:07:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 18:07:32]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e5%b8%88%e8%8c%83%e9%99%a2%e7%bd%91%e7%ab%99]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[post_views_count]]></wp:meta_key>
			<wp:meta_value><![CDATA[27]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[429]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>puppet试验之puppet配置方法</title>
		<link>http://www.itopers.com/?p=357</link>
		<pubDate>Sun, 08 Sep 2013 16:42:21 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=357</guid>
		<description></description>
		<content:encoded><![CDATA[<div>Puppet是开源的基于Ruby的一种Linux、Unix平台的集中配置管理工具，相对cfengine来说，使用更为简单和配置功能更全面。开始实验吧。</div>
<div>当然，第一要准备的是实验环境，准备两台虚拟机，我用的系统是redhat 5U5的。一台192.168.0.201（master）,主机名为：Hadoop1.cyou-inc.com；另一台为192.168.0.202 （agnet）主机名为：Hadoop2.cyou-inc.com。好master到agent的ssh无密码登录，方法见<a href="http://www.itopers.com/?p=104">&lt;&lt;【Linux】主机间做信任（单向和双向）&gt;&gt;</a>。由于没有dns服务器，就用/etc/hosts代替。hosts文件内容为：</div>
<div>
<pre class="lang:default decode:true">[root@Hadoop1 manifests]# cat /etc/hosts
# Do not remove the following line, or various programs
# that require network functionality will fail.
127.0.0.1        localhost.localdomain localhost
::1             localhost6.localdomain6 localhost6
192.168.0.201   Hadoop1.cyou-inc.com Hadoop1
192.168.0.202   Hadoop2.cyou-inc.com Hadoop2</pre>
环境准备差不多了，现在可以开始部署配置puppet了。。。

</div>
<div>1、首先准备一些源码包（最好不推荐使用源码包，因为在多台服务器安装时就会感觉得到了）</div>
<div>
<pre class="lang:default decode:true"> yaml-0.1.4.tar.gz
 facter-1.6.11.tar
 puppet-2.7.19.tar
 ruby-1.9.3-p327.tar.gz</pre>
2、安装yaml
<pre class="lang:default decode:true ">[root@Hadoop1 puppet]# tar yaml-0.1.4
[root@Hadoop1 puppet]# tar -zxvf yaml-0.1.4.tar.gz 
[root@Hadoop1 puppet]# cd yaml-0.1.4
[root@Hadoop1 yaml-0.1.4]# ./configure 
[root@Hadoop1 yaml-0.1.4]# make &amp;&amp; make install</pre>
3、先安装ruby
<pre class="lang:default decode:true">[root@Hadoop1 puppet]# tar -zxvf ruby-1.9.3-p327.tar.gz 
[root@Hadoop1 puppet]# cd ruby-1.9.3-p327
[root@Hadoop1 ruby-1.9.3-p327]# ./configure
[root@Hadoop1 ruby-1.9.3-p327]# make &amp;&amp; make install</pre>
4、再安装facter
<pre class="lang:default decode:true ">[root@Hadoop1 puppet]# tar -xvf facter-1.6.11.tar 
[root@Hadoop1 puppet]# cd facter-1.6.11
[root@Hadoop1 facter-1.6.11]# ./install.rb</pre>
5、安装puppet
<pre class="lang:default decode:true ">[root@Hadoop1 puppet]# tar -xvf puppet-2.7.19.tar 
[root@Hadoop1 puppet]# cd puppet-2.7.19
[root@Hadoop1 puppet-2.7.19]# ./install.rb</pre>
6、配置puppet master端
<pre class="lang:default decode:true">[root@Hadoop1 puppet-2.7.19]# cp conf/redhat/server.init /etc/init.d/puppetmaster  #启动脚本
[root@Hadoop1 puppet-2.7.19]# cp conf/redhat/puppet.conf /etc/puppet/              #配置文件</pre>
7、安装agent端与上面差不多，也需要安装facter\ruby\puppet

8、启动puppetmaster
<pre class="lang:default decode:true ">[root@Hadoop1 puppet]# /etc/init.d/puppetmaster start</pre>
9、在客户端(agent)中执行如下命令进行签名授权
<pre class="lang:default decode:true ">[root@Hadoop2 puppet]# puppetd --server Hadoop1.cyou-inc.com --test</pre>
10、在master进行通过agent的证书
<pre class="lang:default decode:true">puppetca –list     #查看所有需要签证的agent
puppetca –s Hadoop1.cyou-inc.com     #对单个agent进行签证授权，所有的agent执行：<strong>puppetca -s -a</strong></pre>
<div>11、在master中的/etc/puppet/manifests/创建site.pp</div>
<div>
<pre class="lang:default decode:true ">[root@Hadoop1 manifests]# cat site.pp
node 'Hadoop2.cyou-inc.com'
{
        file
        { "/tmp/test.html":
                content=&gt;"puppet test.";
        }
}</pre>
12、然后到agent中执行如下命令，第一创建pp文件，需要重启一下master:<strong> /etc/init.d/puppetmaster restart</strong>

</div>
<div>
<pre class="lang:default decode:true">[root@Hadoop2 puppet]# puppetd --server Hadoop1.cyou-inc.com --test
info: Caching catalog for hadoop2.cyou-inc.com
info: Applying configuration version '1378657707'
notice: /Stage[main]//Node[hadoop2.cyou-inc.com]/File[/tmp/test.html]/ensure: defined content as '{md5}030c4c784a23319f3c14933b193a76e9'
notice: Finished catalog run in 0.10 seconds</pre>
13、在agent中查看有test.html文件
<pre class="lang:default decode:true">[root@Hadoop2 puppet]# cd /tmp/
[root@Hadoop2 tmp]# cat test.html 
puppet test.[root@Hadoop2 tmp]#</pre>
如上，在agent的能看到test.html文件，并能有“puppet test.”内容，表示配置完成。

</div>
&nbsp;

&nbsp;

</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>357</wp:post_id>
		<wp:post_date><![CDATA[2013-09-09 00:42:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 16:42:21]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[puppet%e8%af%95%e9%aa%8c%e4%b9%8bpuppet%e9%85%8d%e7%bd%ae%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="facter"><![CDATA[facter]]></category>
		<category domain="category" nicename="linux%e5%ba%94%e7%94%a8"><![CDATA[linux应用]]></category>
		<category domain="post_tag" nicename="puppet"><![CDATA[puppet]]></category>
		<category domain="post_tag" nicename="ruby"><![CDATA[ruby]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[513]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】院影网</title>
		<link>http://www.itopers.com/?p=365</link>
		<pubDate>Sun, 08 Sep 2013 16:02:38 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=365</guid>
		<description></description>
		<content:encoded><![CDATA[2009年暑假，学习了一点关于流媒体技术的东东，于是利用学院的电影资源库，创建了一个供大家观看电影的网站，主要是练习练习利用流媒体实现在线观看电影的功能，页面做得有点粗燥了，做功能什么的都还挺好。

登录页面：

<a href="http://www.itopers.com/wp-content/uploads/2013/09/login.jpg"><img class="alignleft" alt="login" src="http://www.itopers.com/wp-content/uploads/2013/09/login.jpg" width="630" height="441" /></a>

首页展示：

<a href="http://www.itopers.com/wp-content/uploads/2013/09/index电影网.jpg"><img class="wp-image-366 alignleft" alt="index(电影网)" src="http://www.itopers.com/wp-content/uploads/2013/09/index电影网.jpg" width="630" height="847" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>365</wp:post_id>
		<wp:post_date><![CDATA[2013-09-09 00:02:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 16:02:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e9%99%a2%e5%bd%b1%e7%bd%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[405]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】后台管理页面</title>
		<link>http://www.itopers.com/?p=374</link>
		<pubDate>Sun, 08 Sep 2013 16:16:33 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=374</guid>
		<description></description>
		<content:encoded><![CDATA[09年，大学期间，业余时间做的几个后台管理页面。纪念一下喽！^_^

Style1:

<a href="http://www.itopers.com/wp-content/uploads/2013/09/后台登陆-2.jpg"><img class="alignnone size-full wp-image-375" alt="后台登陆 2" src="http://www.itopers.com/wp-content/uploads/2013/09/后台登陆-2.jpg" width="1000" height="750" /></a> <a href="http://www.itopers.com/wp-content/uploads/2013/09/后台登陆index1-2.jpg"><img class="alignnone size-full wp-image-376" alt="后台登陆index1-2" src="http://www.itopers.com/wp-content/uploads/2013/09/后台登陆index1-2.jpg" width="1000" height="750" /></a>Style2:

<a href="http://www.itopers.com/wp-content/uploads/2013/09/后台登陆-4.jpg"><img class="alignnone size-full wp-image-377" alt="后台登陆-4" src="http://www.itopers.com/wp-content/uploads/2013/09/后台登陆-4.jpg" width="1000" height="750" /></a>

<a href="http://www.itopers.com/wp-content/uploads/2013/09/后台登陆index1-4.jpg"><img class="alignnone size-full wp-image-378" alt="后台登陆index1-4" src="http://www.itopers.com/wp-content/uploads/2013/09/后台登陆index1-4.jpg" width="1000" height="750" /></a>

还有几个风格整体上都差不多，就不发啦~~VPS空间什么的，是非常宝贵的！

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>374</wp:post_id>
		<wp:post_date><![CDATA[2013-09-09 00:16:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 16:16:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e5%90%8e%e5%8f%b0%e7%ae%a1%e7%90%86%e9%a1%b5%e9%9d%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bb%83%e4%b9%a0%e4%bd%9c"><![CDATA[练习作]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[385]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】人文院-社会工作系</title>
		<link>http://www.itopers.com/?p=393</link>
		<pubDate>Sun, 08 Sep 2013 17:40:51 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=393</guid>
		<description></description>
		<content:encoded><![CDATA[2010年暑假，为人文学院社会工作系做的网站，也小赚了一笔，暑假的生活费不愁啦，哈哈~~

做了2个色调，后来选择了绿色版的。

蓝色调：

<img class="alignnone size-full wp-image-385" alt="人文院-社会工作系" src="http://www.itopers.com/wp-content/uploads/2013/09/人文院-社会工作系.jpg" width="1024" height="1000" />

&nbsp;

绿色调：<img class="alignnone size-full wp-image-384" alt="人文院-社会工作系（green）" src="http://www.itopers.com/wp-content/uploads/2013/09/人文院-社会工作系（green）.jpg" width="1024" height="1000" />

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>393</wp:post_id>
		<wp:post_date><![CDATA[2013-09-09 01:40:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 17:40:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e4%ba%ba%e6%96%87%e9%99%a2-%e7%a4%be%e4%bc%9a%e5%b7%a5%e4%bd%9c%e7%b3%bb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[417]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>puppet配置出现的问题一</title>
		<link>http://www.itopers.com/?p=399</link>
		<pubDate>Sun, 08 Sep 2013 16:55:55 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=399</guid>
		<description></description>
		<content:encoded><![CDATA[在做puppet实现过程当中遇到如下问题，具体如下：
<pre class="lang:default decode:true">[root@Hadoop2 puppet]# puppetd --server Hadoop1.cyou-inc.com --test
err: Could not retrieve catalog from remote server: Error 400 on SERVER: Could not parse for environment production: Syntax error at 'Hadoop2' at /etc/puppet/manifests/site.pp:1 on node hadoop2.cyou-inc.com
warning: Not using cache on failed catalog
err: Could not retrieve catalog; skipping run</pre>
上面的问题主要是master配置文件语法错误，错误显示在第1行，而master中site.pp中的每一行是：node Hadoop2.cyou-inc.com

错误的原因是：主机名必须用单引号引起来才行。具体的解决方法为，将site.pp中改为如下：
<pre class="lang:default decode:true">node 'Hadoop2.cyou-inc.com'     #引号是必须的哦！！！！！
{
        file
        { "/tmp/test.html":
                content=&gt;"puppet test.";
        }
}</pre>
puppet的配置方法见<a href="http://www.itopers.com/?p=357"><strong>《puppet试验之puppet配置方法》</strong></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>399</wp:post_id>
		<wp:post_date><![CDATA[2013-09-09 00:55:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 16:55:55]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[puppet%e9%85%8d%e7%bd%ae%e5%87%ba%e7%8e%b0%e7%9a%84%e9%97%ae%e9%a2%98%e4%b8%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux%e5%ba%94%e7%94%a8"><![CDATA[linux应用]]></category>
		<category domain="post_tag" nicename="puppet"><![CDATA[puppet]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[5006]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】义乌绿康生物科技有限公司</title>
		<link>http://www.itopers.com/?p=400</link>
		<pubDate>Sun, 08 Sep 2013 18:27:36 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=400</guid>
		<description></description>
		<content:encoded><![CDATA[2011年6月份，为外面公司做的公司官网，主要用于宣传他们的产品，感觉好好吃哈...

Enter页：

<a href="http://www.itopers.com/wp-content/uploads/2013/09/义乌绿康生物科技有限公司enter2-副本2.jpg"><img class=" wp-image-388 alignleft" alt="义乌绿康生物科技有限公司enter2 - 副本2" src="http://www.itopers.com/wp-content/uploads/2013/09/义乌绿康生物科技有限公司enter2-副本2.jpg" width="620" height="444" /></a>

主页：

<a href="http://www.itopers.com/wp-content/uploads/2013/09/义乌绿康生物科技有限公司index.jpg"><img class=" wp-image-386 alignleft" alt="义乌绿康生物科技有限公司index" src="http://www.itopers.com/wp-content/uploads/2013/09/义乌绿康生物科技有限公司index.jpg" width="648" height="506" /></a>

子页：

<a href="http://www.itopers.com/wp-content/uploads/2013/09/义乌绿康生物科技有限公司sub.jpg"><img class=" wp-image-387 alignleft" alt="义乌绿康生物科技有限公司sub" src="http://www.itopers.com/wp-content/uploads/2013/09/义乌绿康生物科技有限公司sub.jpg" width="648" height="448" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>400</wp:post_id>
		<wp:post_date><![CDATA[2013-09-09 02:27:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 18:27:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e4%b9%89%e4%b9%8c%e7%bb%bf%e5%ba%b7%e7%94%9f%e7%89%a9%e7%a7%91%e6%8a%80%e6%9c%89%e9%99%90%e5%85%ac%e5%8f%b8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[392]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】园丁辩-喷绘</title>
		<link>http://www.itopers.com/?p=421</link>
		<pubDate>Sun, 08 Sep 2013 17:59:51 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=421</guid>
		<description></description>
		<content:encoded><![CDATA[2010年5月，学院组织园丁工程活动，做的园丁辩喷绘。

<a href="http://www.itopers.com/wp-content/uploads/2013/09/园丁辩2-small.jpg"><img class="size-full wp-image-414 alignleft" alt="园丁辩2-small" src="http://www.itopers.com/wp-content/uploads/2013/09/园丁辩2-small.jpg" width="1417" height="1134" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>421</wp:post_id>
		<wp:post_date><![CDATA[2013-09-09 01:59:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 17:59:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e5%9b%ad%e4%b8%81%e8%be%a9-%e5%96%b7%e7%bb%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%96%b7%e7%bb%98"><![CDATA[喷绘]]></category>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[397]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】欧美风的交友网</title>
		<link>http://www.itopers.com/?p=425</link>
		<pubDate>Sun, 08 Sep 2013 12:05:31 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=425</guid>
		<description></description>
		<content:encoded><![CDATA[2011年4月份，一个老师的朋友的儿子，在国外上学，要做毕业设计，可能由于平时忙别的去了，于是，要我们帮忙开发一个社交网站，作为作业了。忙了一周才忙完~~

<a href="http://www.itopers.com/wp-content/uploads/2013/09/交友网站（欧美风）.jpg"><img class="size-full wp-image-410 alignleft" alt="交友网站（欧美风）" src="http://www.itopers.com/wp-content/uploads/2013/09/交友网站（欧美风）.jpg" width="1200" height="954" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>425</wp:post_id>
		<wp:post_date><![CDATA[2013-09-08 20:05:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 12:05:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e6%ac%a7%e7%be%8e%e9%a3%8e%e7%9a%84%e4%ba%a4%e5%8f%8b%e7%bd%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[421]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【大学作品】师范青年网</title>
		<link>http://www.itopers.com/?p=427</link>
		<pubDate>Sun, 08 Sep 2013 12:07:54 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=427</guid>
		<description></description>
		<content:encoded><![CDATA[2010年5月份，又是一个为学院做贡献的网站....自我感觉还不错，不过现在也没有用了，已经改版N次了。

<a href="http://www.itopers.com/wp-content/uploads/2013/09/师范青年-small.jpg"><img class="size-full wp-image-412 alignleft" alt="师范青年-small" src="http://www.itopers.com/wp-content/uploads/2013/09/师范青年-small.jpg" width="1200" height="1470" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>427</wp:post_id>
		<wp:post_date><![CDATA[2013-09-08 20:07:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-08 12:07:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%a4%a7%e5%ad%a6%e4%bd%9c%e5%93%81%e3%80%91%e5%b8%88%e8%8c%83%e9%9d%92%e5%b9%b4%e7%bd%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[359]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>.net4.0到.net3.5 ResGen.exe退出解决</title>
		<link>http://www.itopers.com/?p=443</link>
		<pubDate>Mon, 09 Sep 2013 09:48:39 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=443</guid>
		<description></description>
		<content:encoded><![CDATA[在windows 7  -  64位中将.net 4.0转到.net 3.5编译出现如下图错误，出现ResGen.exe已退出。代码为2。

<a href="http://www.itopers.com/wp-content/uploads/2013/09/csharp.jpg"><img class="alignnone size-full wp-image-444" alt="csharp" src="http://www.itopers.com/wp-content/uploads/2013/09/csharp.jpg" width="276" height="114" /></a>

网上找了好久，在官方中找到了，看到了尝试，结果可以了。

1、关闭打开的程序visual studio

2、用管理员打开visual studio命令提示符

3、切换到目录<b>&lt;system_drive&gt;:\Program Files (x86)\Microsoft SDKs\Windows\v&lt;x.xx&gt;\bin\</b>

4、执行如下命令
<pre class="lang:default decode:true ">corflags /32bit+ ResGen.exe /force</pre>
5、用记事本打开*.csproj文件

6、在PropertyGroup属性下面（不是里面哦），添加如下属性：
<pre class="lang:default decode:true ">&lt;ResGenToolArchitecture&gt;Managed32Bit&lt;/ResGenToolArchitecture&gt;</pre>
7、保存后，重新编译，就可以了。

http://support.microsoft.com/kb/2028833

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>443</wp:post_id>
		<wp:post_date><![CDATA[2013-09-09 17:48:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-09 09:48:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[net4-0%e5%88%b0-net3-5-resgen-exe%e9%80%80%e5%87%ba%e8%a7%a3%e5%86%b3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="c"><![CDATA[C#]]></category>
		<category domain="post_tag" nicename="resgen-exe"><![CDATA[resgen.exe]]></category>
		<category domain="post_tag" nicename="visual-studio"><![CDATA[visual studio]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_e28574884e82d2950cc2de0ce622ec58]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[918]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>IT运维之“想当然”</title>
		<link>http://www.itopers.com/?p=446</link>
		<pubDate>Mon, 09 Sep 2013 16:55:25 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=446</guid>
		<description></description>
		<content:encoded><![CDATA[IT运维旅途中总有很多“想当然的事”，幸运的人会以为自己想得很周全，所有的事情都在自己的考虑当中、准备当中；悲剧的人，还需要加班加点解决故障，还需要招领导的责备和不信任，更重要的是这个季度的绩效或奖金没有了。

两者都是在“想当然”地工作，总觉得已经做好了，想全了。结果呢，上面两种情况一样。这里最主要的是总结一下我的“想当然”。

一天代理服务器文件系统只读，由于目前的游戏架构及代理架构，一直还没有解决代理服务器单点故障。（原因是游戏配置需要记录代理服务器入口及出口的IP及端口）。周二监控报警文件系统只读，检查转发关系正常，商定周四维护日重启代理服务器。

当时定为两种方案：

<strong>1、代理服务器重启后能正常，检查没有问题后，继续使用；</strong>

<strong>2、如果重启失败，将准备好的备机配置成故障机的ip，配置好防火墙转发规则。</strong>（<span style="color: #ff0000;">这样做是为了不需要更改游戏配置</span>）

备机准备好了，故障机防火墙规则提前放到了备机上，路由、IP配置文件、nat转发开关等都已经准备。

这次更换什么list都没有做，按照准备的东东肯定没有问题。周四维护日重启服务器后，服务器无法启动。只能按第二种方法实现了，结果还是出现了问题。问题主要为：

<strong> 1、重启后，配置上ip地址、路由后，网络一直通（<span style="color: #ff0000;">原因是没有考虑到备机和故障机不在同一网段，所以VLAN不同</span>）</strong>

<strong>        2、临时紧急联系网络同学，调试网络后，由于更新维护日时间比较紧张。想当然地直接把防火墙规则生效，后来ssh无法登录。(<span style="color: #ff0000;">当时很郁闷，ip地址没有变，规则都是以前的默认对我访问的机器是允许的</span>)</strong>

<strong>        3、只能连接ILO访问，由于浏览器问题无法连接到终端（<span style="color: #ff0000;">没有提前检查ILO登录是否正常导致</span>），后来到别人机器上登录ILO正常查看防火墙规则，发现eth0和eth1对应的内外网卡与原来不一致，导致被防火墙规则阻止。（<span style="color: #ff0000;">原因没有提前认真检查规则文件，没有考虑周全</span>）</strong>

<strong>        4、规则、路由配置完毕后，测试还是无法正常使用，后检查网关IP填写出错了。（<span style="color: #ff0000;">当时准备太粗心，没有细节检查</span>）</strong>

最后还好，在指定的时间正常使用了。这次事故主要是把做有的事情都相当然地想很简单。拿到备机、ip地址、规则后没有认真考虑，生效这些配置文件会有哪些影响。

面对这种情况，一定需要准备好一切，提前列出操作list，在操作list中，需要详细写出操作步骤。在写操作list过程中，就会去思考、想到会缺少什么，会影响什么？然后缺少什么立即补充上去。每一步操作需要指定的操作完成时间，防止计划推迟。

另，操作list可简单用execl进行，第一列为序列，第二列操作list,第三为详细步骤，第四列为日期。操作时可打印或对照操作。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>446</wp:post_id>
		<wp:post_date><![CDATA[2013-09-10 00:55:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-09 16:55:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[it%e8%bf%90%e7%bb%b4%e4%b9%8b%e6%83%b3%e5%bd%93%e7%84%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="case%e6%a1%88%e4%be%8b"><![CDATA[Case案例]]></category>
		<category domain="post_tag" nicename="%e8%bf%90%e7%bb%b4"><![CDATA[运维]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[456]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Puppet】初识Puppet</title>
		<link>http://www.itopers.com/?p=447</link>
		<pubDate>Tue, 10 Sep 2013 05:07:09 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=447</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="color: #800000;"><strong>结缘Puppet</strong></span>

很久之前，就听说过Puppet了，同事也有人调研过它，感觉挺好用。拥护它的人很多，但是，之前一直都没有过多地接触业务，所以也没把它当一回事。最近，开始接触业务，发现急需要一套对大批服务器进行统一化管理的工具。正好一个朋友说她们公司用到了Puppet，感觉相当强大，还可以做非常多的自定义设置。顿时觉得是时候好好研究一下Puppet了，于是立马在京东上买了<span style="color: #800000;">《精通Puppet配置管理工具》</span>一书。

<strong><span style="color: #800000;">Puppet之旅</span></strong>

我需要的Puppet是一个能够帮助我很方便地统一服务器的工具，主要是“统一”，让所有线上环境都保持高度的一致性。我需要利用它设计一套能适用于工作环境，并且非常轻松地实现统一管理的架构，Let's Go~

<span style="color: #800000;"><strong>读书笔记《精通Puppet配置管理工具》</strong></span>

第1章 开始使用puppet
<div>
<pre class="lang:default decode:true">1.1 什么是puppet
1.2 选择正确的puppet版本
1.3 我能混用puppet的版本吗
1.4 安装puppet
1.5 配置puppet
1.6 连接第一个agent
1.7 创建第一个配置
1.8 创建第一个模块
1.9 应用第一个配置</pre>
<p class="lang:default decode:true crayon-selected">第2章 使用puppet构建主机</p>

<pre class="lang:default decode:true">2.1 入门
2.2 魔术般的模块
2.3 创建一个模块管理ssh
2.4 创建一个模块来管理postfix
2.5 使用mysql模块管理mysql
2.6 管理apache和网站
2.7 使用puppet模块管理puppet</pre>
<p class="lang:default decode:true crayon-selected">第3章 使用puppet环境</p>

<pre class="lang:default decode:true crayon-selected">3.1 配置puppet环境
3.2 使用puppet agent测试新的环境
3.3 环境分支和合并
3.4 生产环境版本</pre>
<p class="lang:default decode:true crayon-selected">第4章 puppet的可扩展性</p>

<pre class="lang:default decode:true">4.1 明确面临的挑战
4.2 使用apache和passenger运行puppet master
4.3 对多个puppet master使用负载均衡
4.4 测量性能</pre>
<p class="lang:default decode:true crayon-selected">第5章 外部puppet配置</p>

<pre class="lang:default decode:true">5.1 enc
5.2 在ldap中存储节点配置</pre>
<p class="lang:default decode:true crayon-selected">第6章 配置的导出与存储</p>

<pre class="lang:default decode:true  crayon-selected">6.1 虚拟资源
6.2 导出资源与配置存储
6.3 使用导出资源
6.4 扩展配置存储
6.5 过期的资源</pre>
<p class="lang:default decode:true crayon-selected">第7章 puppet控制台：puppet dashboard和foreman</p>

<pre class="lang:default decode:true">7.1 puppet dashboard
7.2 the foreman</pre>
<p class="lang:default decode:true crayon-selected">第8章 工具和集成</p>

<pre class="lang:default decode:true">8.1 puppet forge和模块工具
8.2 puppet ruby dsl
8.3 cucumber puppet</pre>
</div>
<div>
<p class="lang:default decode:true crayon-selected">第9章 puppet的报告系统</p>

<pre class="lang:default decode:true">9.1 入门
9.2 配置报告系统
9.3 报告处理器
9.4 自定义报告</pre>
<p class="lang:default decode:true crayon-selected">第10章 扩展facter和puppet</p>

<pre class="lang:default decode:true">10.1 编写并分发自定义的fact
10.2 开发自定义的类型、提供者和函数</pre>
<p class="lang:default decode:true crayon-selected">第11章 marionette collective</p>

<pre class="lang:default decode:true">11.1 安装和配置rabbitmq
11.2 mcollective的插件
11.3 使用元数据定位主机</pre>
</div>
<div>

附录a 和puppet一起工作

</div>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>447</wp:post_id>
		<wp:post_date><![CDATA[2013-09-10 13:07:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-10 05:07:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90puppet%e3%80%91%e5%88%9d%e8%af%86puppet]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux%e5%ba%94%e7%94%a8"><![CDATA[linux应用]]></category>
		<category domain="post_tag" nicename="puppet"><![CDATA[puppet]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[758]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【茶余饭后】湖南康瑞生物科技有限公司</title>
		<link>http://www.itopers.com/?p=484</link>
		<pubDate>Tue, 10 Sep 2013 12:30:10 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=484</guid>
		<description></description>
		<content:encoded><![CDATA[2012年12月，帮Beebol's brother的公司设计的公司主页。其实，我做的东东一直都挺传统，都没有一种突破和创新。如果有这方面的能力的话，估计我就做设计去鸟~~哈哈~~把这个特长和爱好发挥下去吧。有时间我也得多拍点照，给自己PP啦。不然太浪费啦，呵呵~~

<a href="http://www.itopers.com/wp-content/uploads/2013/09/index_zhong_small.jpg"><img class="size-full wp-image-485 alignleft" alt="index_zhong_small" src="http://www.itopers.com/wp-content/uploads/2013/09/index_zhong_small.jpg" width="1089" height="792" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>484</wp:post_id>
		<wp:post_date><![CDATA[2013-09-10 20:30:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-10 12:30:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%8c%b6%e4%bd%99%e9%a5%ad%e5%90%8e%e3%80%91%e6%b9%96%e5%8d%97%e5%ba%b7%e7%91%9e%e7%94%9f%e7%89%a9%e7%a7%91%e6%8a%80%e6%9c%89%e9%99%90%e5%85%ac%e5%8f%b8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%ab%99"><![CDATA[网站]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[685]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【茶余饭后】一站式服务(CYOU)</title>
		<link>http://www.itopers.com/?p=486</link>
		<pubDate>Tue, 10 Sep 2013 12:46:20 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=486</guid>
		<description></description>
		<content:encoded><![CDATA[部门今年一直在宣传一站式服务，今年3月，为Web平台中部做了一个宣传，不知道有没有很明显地体现出主题呢？

提出一站式服务的最初想法是想要在为外部门同学提供服务时，减少沟通成本，从而提升工作效率。

外面定义的“一站式服务”，其实就是只要客户有需求，一旦进入卡特的某个服务站点，所有的问题都可以解决，没有必要再找第二家。而部门提出的这个一站式服务，实际上是指，当外部门同学有需求提给某位同学，即使他不能够帮这位同学解决问题，他可能通过有效的指引，帮助这个同学找到解决问题的有效途径或方法，而不是直接把需求refuse掉。

好吧，看图吧！业余级，勿喷！^_^

<a href="http://www.itopers.com/wp-content/uploads/2013/09/平台中部一站式服务_fin1-small-small.jpg"><img class="size-full wp-image-488 alignleft" alt="平台中部一站式服务_fin1 - small-small" src="http://www.itopers.com/wp-content/uploads/2013/09/平台中部一站式服务_fin1-small-small.jpg" width="800" height="569" /></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>486</wp:post_id>
		<wp:post_date><![CDATA[2013-09-10 20:46:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-10 12:46:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%8c%b6%e4%bd%99%e9%a5%ad%e5%90%8e%e3%80%91%e4%b8%80%e7%ab%99%e5%bc%8f%e6%9c%8d%e5%8a%a1cyou]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="cyou"><![CDATA[cyou]]></category>
		<category domain="post_tag" nicename="%e4%b8%80%e7%ab%99%e5%bc%8f%e6%9c%8d%e5%8a%a1"><![CDATA[一站式服务]]></category>
		<category domain="category" nicename="%e6%88%91%e4%bb%ac%e7%9a%84%e4%bd%9c%e5%93%81"><![CDATA[我们的作品]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[14053]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>255</wp:comment_id>
			<wp:comment_author><![CDATA[vaster]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[lz.710@163.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://vaster.itopers.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.149.157.21]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2013-09-13 16:32:15]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2013-09-13 08:32:15]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[小朱好，嘻嘻~]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>【FAQ】Outlook 禁止访问下列具有潜在不安全因素的附件的解决方法  </title>
		<link>http://www.itopers.com/?p=499</link>
		<pubDate>Tue, 10 Sep 2013 13:29:09 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=499</guid>
		<description></description>
		<content:encoded><![CDATA[今天收一封邮件的时候，发现邮件附件被OUTLOOK屏蔽。“Outlook 禁止访问下列具有潜在不安全因素的附件”

上网查找，发现虽然附件被屏蔽了；其实文件依然存在，可以通过以下的方法来重新召回附件。

1. 如果 Outlook 正在运行，请退出该程序。

2. 单击“开始”，然后单击“运行”。

3. 在“打开”框中，键入 regedit，然后单击“确定”。

4. 针对您的 Outlook 版本，验证以下相应的注册表项是否存在。如果存在，请转到步骤 5。

<strong>Microsoft Outlook 2000：</strong>

HKEY_CURRENT_USERSoftwareMicrosoftOffice9.0OutlookSecurity

<strong>Microsoft Outlook 2002：</strong>

HKEY_CURRENT_USER\Software\Microsoft\Office\10.0\Outlook\Security

<strong>Microsoft Office Outlook 2003：</strong>

HKEY_CURRENT_USER\Software\Microsoft\Office\11.0\Outlook\Security

<strong>Microsoft Office Outlook 2010：</strong>

HKEY_CURRENT_USER\Software\Microsoft\Office\14.0\Outlook\Security

5.在Security下新建串值Level1Remove，键值.EXE(如果有多个键值用;隔开)

5.保存注册表，重新启动

6.进入Outlook，你会发现原来无法打开的附件现在可以打开了。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>499</wp:post_id>
		<wp:post_date><![CDATA[2013-09-10 21:29:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-10 13:29:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90faq%e3%80%91outlook-%e7%a6%81%e6%ad%a2%e8%ae%bf%e9%97%ae%e4%b8%8b%e5%88%97%e5%85%b7%e6%9c%89%e6%bd%9c%e5%9c%a8%e4%b8%8d%e5%ae%89%e5%85%a8%e5%9b%a0%e7%b4%a0%e7%9a%84%e9%99%84%e4%bb%b6%e7%9a%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="post_tag" nicename="outlook"><![CDATA[outlook]]></category>
		<category domain="category" nicename="%e5%ba%94%e7%94%a8%e5%b7%a5%e5%85%b7"><![CDATA[应用工具]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[705]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>puppet的配置之iptable</title>
		<link>http://www.itopers.com/?p=514</link>
		<pubDate>Thu, 19 Sep 2013 17:30:11 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=514</guid>
		<description></description>
		<content:encoded><![CDATA[现在来做一个通过puppet来管理远程agent上的防火墙。puppet已经安装完毕，具体方法见<a href="http://www.itopers.com/?p=357">《puppet试验之puppet配置方法》</a>。

首先，在/etc/puppet/manifests目录下创建site.pp文件，这个文件必须存在。如果不存在puppet就启动不了。site.pp是puppet的入口文件。

然后，在/etc/puppet/manifests创建一个nodes目录来放置所有的节点配置，如/etc/puppet/manifests/nodes/hadoop2.pp。hadoop2.pp这个文件里配置关于hadoop2这个主机的配置。具体内容如下：
<pre class="lang:default decode:true">node 'Hadoop2.cyou-inc.com' {
        include iptable::status       #这里表示hadoop2节点的配置，加载了iptable::status模块
}</pre>
其中一个节点配置好了，那么怎么在入口文件中引用这个节点呢？看下site.pp文件内容吧。
<pre class="lang:default decode:true">import "nodes/*.pp"   #导入nodes目录下的所有节点配置
$fileserver="Hadoop1.cyou-inc.com"   #设置文件同步服务器给指定变量,后面就可以使用这个变量。
$puppetmaster="Hadoop1.cyou-inc.com"  
$puppetbucket="Hadoop1.cyou-inc.com"
node default
{
}</pre>
在节点中加载了iptable::status模块，那么这个模块如何创建呢？模块都放到了/etc/puppet/modules目录下，见如下：

1、创建一个iptable目录，这个目录里包含如下目录：
<pre class="lang:default decode:true">backup     #这个目录用来备份的，不是必需的，按需求创建
files      #这个目录用来存入传输文件的，不是必需的，按需求创建
manifests  #这个目录是必须的，这个目录是模块的入口目录，里面必需有一个init.pp入口文件</pre>
2、init.pp可以进行相关资源的配置，如下：
<pre class="lang:default decode:true">class iptable::status    #创建一个类，节点加载的就是这个
{
        service     #定义了一个服务
        {
                "iptable":
                name =&gt;iptables,
                ensure =&gt;running,
        }
        file     #定义了一个文件资源
        {
                "/etc/sysconfig/iptables":
                source =&gt;"puppet://$fileserver/iptable/iptables",
                owner =&gt;"root",
                group =&gt;"root",
                mode =&gt;"600",
                require =&gt;Exec["remote_back"],
                backup =&gt;".bak_$uptime_seconds",
                #backup =&gt;main
        }
        exec 
        {
                "remote_back":
                command =&gt;"/bin/bash /etc/sysconfig/rsync.sh",
                user =&gt;"root",
                path =&gt;["/usr/local/sbin","/usr/local/bin","/sbin","/bin","/usr/sbin","/usr/bin"]
        }
        exec
        {
                "restore":
                command =&gt;"/sbin/iptables-restore &lt; /etc/sysconfig/iptables",
                user =&gt;"root",
                subscribe =&gt;File["/etc/sysconfig/iptables"],
                refreshonly =&gt;true
        }
        filebucket
        {
                "main":
                server =&gt;"Hadoop1.cyou-inc.com",
                port =&gt;"8140",
                path =&gt;false
        }
}</pre>
3、这个模块主要的功能是：

1）监控iptable服务状态，保证是running的。

2）当iptables规则文件改变之前在本地进行备份，名称是：
<pre>.bak_$uptime_seconds    #如iptables.bak_时间戳</pre>
3）还执行rsyn.sh脚本进行远程备份。

4）当文件规则文件改动后，进行生效。

4、在file的puppet://$fileserver/iptable/iptables配置是什么意思呢？就是每次从$fileserver服务器中去拿这个文件配置到agent上的/etc/sysconfig/iptables中，如果没有改动就不会拷贝。$fileserver就是上面的变量。在本例当中就是到hadoop1.cyou-inc.com/iptable下拿iptables文件。这个目录是在哪里配置的呢？是在/etc/puppet/fileserver.conf 文件进行配置的，文件内容为：
<pre class="lang:default decode:true"># This file consists of arbitrarily named sections/modules
# defining where files are served from and to whom

# Define a section 'files'
# Adapt the allow/deny settings to your needs. Order
# for allow/deny does not matter, allow always takes precedence
# over deny
# [files]
#  path /var/lib/puppet/files
#  allow *.example.com
#  deny *.evil.example.com
#  allow 192.168.0.0/24
[cron]
        path /etc/puppet/modules/cron/files
        allow *.cyou-inc.com

[iptable]   #和rsync有点类似，引用的就是这个名字
        path /etc/puppet/modules/iptable/files    #定义了真实的文件存储路径
        allow *.cyou-inc.com    #这个是哪些主机可以访问这个路径
[fileback]
        path /etc/puppet/modules/iptable/backup
        allow *.cyou-inc.com</pre>
5、一切OK后，开始测试,先把iptable服务停了。测试方法，在hadoop2.cyou-inc.com这个agent上执行：
<pre class="lang:default decode:true ">puppetd --server hadoop1.cyou-inc.com --test</pre>
执行成功后，发现agent上的iptable已经启来了。

然后，fileserver中<span style="font-family: 'Courier 10 Pitch', Courier, monospace; font-size: 12px; line-height: 18px;">/etc/puppet/modules/iptable/files的iptables文件增加或减少一条规则。然后在agent上执行上面那条命令。发现agent上的防火墙规则变了，且生效。在/etc/sysconfig/下有一个备份，远程也有一个备份。</span>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>514</wp:post_id>
		<wp:post_date><![CDATA[2013-09-20 01:30:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-19 17:30:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[puppet%e7%9a%84%e9%85%8d%e7%bd%ae%e4%b9%8biptable]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="itpable"><![CDATA[itpable]]></category>
		<category domain="post_tag" nicename="puppet"><![CDATA[puppet]]></category>
		<category domain="category" nicename="%e5%ba%94%e7%94%a8%e5%b7%a5%e5%85%b7"><![CDATA[应用工具]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[793]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux-服务】proxychains+socks5快速搭建代理</title>
		<link>http://www.itopers.com/?p=519</link>
		<pubDate>Sun, 22 Sep 2013 16:10:54 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=519</guid>
		<description></description>
		<content:encoded><![CDATA[<p align="left"><span style="color: #ff6600;"><b>代理服务器</b></span></p>
<p align="left">Socks是个电路级网关，由David Koblas在1990年开发。此后，就一直作为Internet RFC（Request for Comments）中的开放标准。Socks在协议栈的TCP层上运行。Socks代理只是简单地传递数据包，而不必关心是何种应用协议（比如FTP、HTTP和NNTP请求）。Socks5代理支持TCP和UDP协议，而且还支持各种身份验证机制、服务器端域名解析等，socks5通过配置可以支持socks4。我们平时使用的Internet Explorer、QQ等软件都支持socks代理设置。</p>
<p align="left">　　下载socks5-v1.0r11.tar.gz和socks5-v1.0r11.patch (这个补丁对此版本很重要)拷贝到/tmp目录下</p>

<pre class="lang:default decode:true">#cd /tmp　　
#tar -xvzf socks5-v1.0r11.tgz
#cd socks5-v1.0r11/include
#patch -p0 &lt; /tmp/socks5-v1.0r11.patch
#cd /tmp/socks5-v1.0r11 //回到socks5-v1.0r11目录开始编译
#./configure --with-threads
# make &amp;&amp; make install</pre>
<p align="left">　　拷贝配置文件，并进行配置</p>

<pre class="lang:default decode:true"># cp src/ssocksd.conf /etc
# cp src/ssocksd.auth /etc</pre>
<p align="left">　配置/etc/ssocksd.conf 文件的以下选项</p>

<pre class="lang:default decode:true"># ssocksd configuration file
# More info man 5 ssocksd.conf
# listening port
port = 1080 
# If is decomment authentification is on, need to 
# have more then credential in file 
# auth = /etc/ssocksd.auth
# Log file if is comment no log of connection
log = /var/log/ssocksd.log
# enable secure version socks5 with ssl
# to use this you need a certificate file 
# and a private key
# ssl = 1
# cert = /etc/ssocksd/server.crt
# key = /etc/ssocksd/server.pem
# Daemon mode if init script start the server 
# is automatically in daemon mode
daemon = 1
# You don't need this just for test
#verbosity = 0</pre>
<p align="left">　配置/etc/ssocksd.auth 文件的以下选项</p>

<pre class="lang:default decode:true"># Password file for ssocksd
# Format username:password
# Actually in plain text, kill me!
# More info man 5 ssocksd.auth
admin:abcde</pre>
<p align="left">测试，执行</p>

<pre class="lang:default decode:true">#/usr/local/bin/ssocksd</pre>
<p align="left">　若仅显示：XXXXX: Socks5 starting at Mon Jun 21 01:23:45 2002 in normal mode 则表示成功，</p>
<p align="left">　如果显示：XXXXX：Bind failed for serverip:1080:address already in use 则换一个不常用的port试试。</p>
<p align="left">　系统起动时自动运行，在/etc/rc.d/rc.local里加入下面这一行</p>

<pre class="lang:default decode:true">/usr/local/bin/ssocksd</pre>
<p align="left"><span style="color: #ff6600;"><b>代理客户端proxychains</b></span></p>
<p align="left">它同时支持http代理和socks4与socks5代理。可以从<a href="http://proxychains.sourceforge.net/">http://proxychains.sourceforge.net/</a>轻松下载到proxychains-3.*.tar.gz文件，目前最新版本是3.1版，它可以支持几乎所有程序的代理，包括ssh，telnet，ftp，cvs等，只要在命令前多输一个proxychains命令。</p>
<p align="left">l  安装</p>

<pre class="lang:default decode:true">#tar –zxvf proxychains-3.0.tar.gz
#cd proxychains-3.0
#./configure &amp;&amp; make &amp;&amp; make install</pre>
<p align="left">l  配置</p>
<p align="left">它的配置文件是按照以下顺序寻找的：</p>

<pre class="lang:default decode:true">1. ./proxychains.conf
2. $(HOME).,proxychains/proxychains.conf
3. /etc/proxychains.conf</pre>
<p align="left">找到该文件后，就可以在里面添加代理服务器列表，可以选择三种代理方式：dynamic_chain, strict_chain,random_chain</p>
<p align="left">第一种方式是动态的，它按照代理服务器在列表中出现的先后顺序（A,B,C,...）将这些代理服务器串成一条链，但是不要求链上每一台代理服务器都是在线的，至少有一台代理服务器在线即可；</p>
<p align="left">第二种方式是严格的，它按照代理服务器在列表中出现的先后顺序（A,B,C,...）将这些代理服务器串成一条链，要求链上每一台代理服务器都是在线的；</p>
<p align="left">第三种方式是随机的，链中的代理服务器的任何一台都可以成为所使用的代理服务器（链长有chain_len指定），这种方式很适合网络扫描操作（参数chain_len只对random_chain有效）。</p>
<p align="left">l  配置random_chain的配置实例：</p>

<pre class="lang:default decode:true">random_chain
chain_len=1
tcp_read_time_out 15000
tcp_connect_time_out 10000
[ProxyList]
http        ***.***.***.*** 808
socks5      ***.***.***.*** 1080</pre>
<p align="left">l  使用也非常方便：</p>
<p align="left">如通过代理ssh：   # proxychains ssh abc.efg.com</p>
<p align="left">通过代理telnet：  # proxychains telnet abc.efg.com</p>
<p align="left">通过代理ftp：       # proxychains ftp</p>
<p align="left"><span style="color: #ff6600;"><strong>FAQ：</strong></span></p>
<p align="left">执行命令时，出现以下错误提示：ERROR: ld.so: object 'libproxychains.so' from LD_PRELOAD cannot be preloaded: ignored.</p>
<p align="left">修复方案：</p>

<pre class="lang:default decode:true "># cat /bin/proxychains
#!/bin/sh
echo "ProxyChains-3.1 (http://proxychains.sf.net)"
if [ $# = 0 ] ; then
        echo "  usage:"
        echo "          proxychains &lt;prog&gt; [args]"
        exit
fi
#将这里的so路径修改成so的绝对路径
export LD_PRELOAD=/lib/libproxychains.so
exec "$@"</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>519</wp:post_id>
		<wp:post_date><![CDATA[2013-09-23 00:10:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-22 16:10:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[proxychainssocks5%e5%bf%ab%e9%80%9f%e6%90%ad%e5%bb%ba%e4%bb%a3%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%ba%94%e7%94%a8"><![CDATA[linux应用]]></category>
		<category domain="post_tag" nicename="proxychains"><![CDATA[proxychains]]></category>
		<category domain="post_tag" nicename="socks5"><![CDATA[socks5]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2399]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何删除sendmail 在var/spool/clientmqueue/目录下产生的大量文件</title>
		<link>http://www.itopers.com/?p=524</link>
		<pubDate>Sun, 22 Sep 2013 16:39:48 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=524</guid>
		<description></description>
		<content:encoded><![CDATA[如何删除sendmail 在var/spool/clientmqueue/目录下产生的大量文件

<strong>故障现象：</strong>
今天早上一过来，运维同学就告诉我，TW_LDJ项目机器的/var分区已经使用超过85%

<strong>原因分析：</strong>
为什么这个目录会这么大呢？这要从/var/spool/clientmqueue/这个目录的作用谈起。当你使用简单的sendmail发邮件的时候， 或者系统默认要发一些邮件（比如cron发的邮件）的时候，首先会把邮件拷贝到这个目录里，然后等待MTA(mail transfer agent) 来处理，MTA做的事情通常是把这个目录中的邮件弄到/var/spool/mqueue里，然后再发送到真正的目的地。出现/var/spool /clientmqueue/非常大的情况通常因为没有合适的MTA发送邮件，就都积累在这里了，假如这里的邮件并不是你需要的，比如是系统默认发的每分 钟跑一次的什么什么cron的信，你可以简单的删掉他们。

<strong>解决办法:</strong>
1、 将crontab里面的命令后面加上&gt; /dev/null 2&gt;&amp;1
2、清除/var/spool/clientmqueue/目录下的文件：
# cd /var/spool/clientmqueue
# rm -rf * 或 ls | xargs rm –f
如果文件太多的话，这两条命令都有可能出现参数太多的错误提示，可以采用下面的方法:
# find /var/spool/clientmqueue | xargs rm –f //这样的缺点是非常占系统资源
# rm –rf /var/spool/clientmqueue //删除完之后，再手动创建一个，并设置好属主及权限
<p align="left"><b>注意事项：</b></p>
<p align="left">        我们在删除这个目录下的文件前，最好应先将sendmail停掉，否则，直接删除可能空间不能直接释放掉，需要再卸载掉/var目录对应的分区，这样就会非常麻烦了。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>524</wp:post_id>
		<wp:post_date><![CDATA[2013-09-23 00:39:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-22 16:39:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e5%88%a0%e9%99%a4sendmail-%e5%9c%a8varspoolclientmqueue%e7%9b%ae%e5%bd%95%e4%b8%8b%e4%ba%a7%e7%94%9f%e7%9a%84%e5%a4%a7%e9%87%8f%e6%96%87%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[54405]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rsync导致网卡宕掉或机器宕机</title>
		<link>http://www.itopers.com/?p=526</link>
		<pubDate>Wed, 25 Sep 2013 13:20:29 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=526</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center">        今天早上一过来，运维同学就跟我说越南TLBB的日志备份服务器登录不上去了，经过查看，确实ping和telnet都不通，看着像机器宕掉的情况（当然，也有可能是网卡宕）。由于我们自己没有ilo，只能试着将机器重启，看能不能解决问题。结果重启之后，机器还是连不上，后来想起可能是防火墙重启后，规则有问题。于是只能将密码告诉越南合作方，要他们在机房登录，将防火墙停了后再看情况。防火墙停了之后，果然能登录了。</p>
<p style="text-align: left;">我从这边登录机器后，马上将密码改好，重新设置好规则，并存放到/etc/sysconfig/iptables文件中。再查看相关日志，在/var/log/message中发现以下所示日志：</p>

<pre class="wrap:false wrap-toggle:false lang:sh decode:true crayon-selected">Sep 24 08:43:18 YN_TLBB_LOG rsyncd[8966]: connect from UNKNOWN (192.168.132.67)
Sep 24 08:43:18 YN_TLBB_LOG rsyncd[8966]: rsync to 192.168.132.67 from unknown (192.168.132.67)
Sep 24 08:58:56 YN_TLBB_LOG rsyncd[8958]: rsync: writefd_unbuffered failed to write 4 bytes [generator]: Broken pipe (32)
Sep 24 08:58:56 YN_TLBB_LOG rsyncd[8958]: rsync error: error in rsync protocol data stream (code 12) at io.c(1119) [generator=2.6.8]
Sep 24 08:59:06 YN_TLBB_LOG rsyncd[8962]: rsync: writefd_unbuffered failed to write 4 bytes [generator]: No route to host (113)
Sep 24 08:59:08 YN_TLBB_LOG rsyncd[8966]: rsync: writefd_unbuffered failed to write 4 bytes [generator]: No route to host (113)
Sep 24 08:59:08 YN_TLBB_LOG rsyncd[8966]: rsync error: error in rsync protocol data stream (code 12) at io.c(1119) [generator=2.6.8]
Sep 24 09:04:58 YN_TLBB_LOG rsyncd[8944]: rsync: read error: Connection timed out (110)
Sep 24 09:04:58 YN_TLBB_LOG rsyncd[8944]: rsync error: error in rsync protocol data stream (code 12) at io.c(614) [receiver=2.6.8]
Sep 24 09:04:58 YN_TLBB_LOG rsyncd[8944]: rsync: connection unexpectedly closed (425169 bytes received so far) [generator]</pre>
<p style="text-align: left;">在网上搜了一番，发现有人遇到类似的错误输出，但是他的日志有一行为Disconnecting: Corrupted MAC on input.这样可以初步断定为网卡问题。但是，我这里没有这样的提示，但是，猜测也可能是由于用rsync一时间传送太大量的日志导致网卡过载，造成这种问题。</p>
<p style="text-align: left;">所以在做日志同步时，还需要控制并发数，考虑更多系统性能相关的东东，防止此类事故再次发生。</p>
<p style="text-align: left;">发生rsync: writefd_unbuffered failed to write 1 bytes [sender] 的错误</p>
<p style="text-align: left;">有网友总结的规律如下：</p>
<p style="text-align: left;">1）日志文件越大，越有可能发生上述错误</p>
<p style="text-align: left;">2）rsync并发数量越多，越有可能发生上述错误</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>526</wp:post_id>
		<wp:post_date><![CDATA[2013-09-25 21:20:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-25 13:20:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rsync%e5%af%bc%e8%87%b4%e7%bd%91%e5%8d%a1%e5%ae%95%e6%8e%89%e6%88%96%e6%9c%ba%e5%99%a8%e5%ae%95%e6%9c%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="rsync"><![CDATA[rsync]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[803]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【转】关于SSH Server Log 和 Error Messages</title>
		<link>http://www.itopers.com/?p=532</link>
		<pubDate>Wed, 25 Sep 2013 13:31:14 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=532</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-size: 13px;">上周末正式将VPS环境从BurstNET切换到了Linode，还没来得及做密码登陆功能的取消工作，今天上去一查ssh的log发现很多可疑行为：</span>
<pre>Jun 4 02:50:27 li409-245 sshd[2615]: reverse mapping checking getaddrinfo for ip223.hichina.com [223.4.25.38] failed – POSSIBLE BREAK-IN ATTEMPT!
Jun 4 02:50:27 li409-245 sshd[2615]: Invalid user marc from 223.4.25.38
Jun 4 02:50:50 li409-245 sshd[2655]: reverse mapping checking getaddrinfo for ip223.hichina.com [223.4.25.38] failed – POSSIBLE BREAK-IN ATTEMPT!
Jun 4 02:50:50 li409-245 sshd[2655]: Invalid user matt from 223.4.25.38
Jun 4 02:53:05 li409-245 sshd[2813]: reverse mapping checking getaddrinfo for ip223.hichina.com [223.4.25.38] failed – POSSIBLE BREAK-IN ATTEMPT!
Jun 4 02:53:05 li409-245 sshd[2813]: Invalid user sam from 223.4.25.38</pre>
查了下hichina.com是中国万网，我基本上能想象上述的ssh日志代表了什么意思。于是乎，马上取消密码登陆，把ssh2的秘钥登陆做好。

然后我抽时间查了下ssh日志里的几种错误信息的意思，这里做下笔记。所有下述内容全部译自：<a href="http://scottlinux.com/2012/03/07/troubleshooting-ssh-server-logs-and-error-messages/" target="_blank">http://scottlinux.com/2012/03/07/troubleshooting-ssh-server-logs-and-error-messages/</a>，因本人的linux功底不深，翻译难免有错漏，请读者不吝指出问题。
<h2>1. 错误1：</h2>
<pre>Mar 5 00:44:32 li166-66 sshd[11455]: Invalid user kristina from 192.168.57.214</pre>
上述的错误表示的是：来自IP192.168.57.214的某人，在使用非法的/随机的用户名来尝试登陆你的系统
<h2>2. 错误2：</h2>
<pre>Mar 5 05:46:48 li166-66 sshd[12350]: Did not receive identification string from 192.168.144.206</pre>
上述的错误表示的是：ssh服务器没能在时限内得到需求的内容。这种问题出现的普遍情况是网络连接问题。在一次ssh连接中，服务器首先提供它的认证字串，然后等待客户端提供它的认证字串。如果这时候连接断开了，或者客户端直接下线了，你就会看到上述错误。
如果某人尝试使用telnet或netcat来连接你的ssh，或者其他某种扫描，你也会看到上述日志。
<h2>3. 错误3：</h2>
<pre class="crayon-selected">Mar 5 05:50:03 li166-66 sshd[12317]: error: connect_to 172.16.198.59 port 80: Invalid argument
Mar 5 05:50:03 li166-66 sshd[12317]: error: connect_to 172.16.198.59 port 80: failed.</pre>
上述错误表示的是：某人正在尝试攻击你的服务器、扫描你服务器的端口或检测你服务器正在运行的ssh服务器的转发功能。
<h2>4. 错误4：</h2>
<pre>Mar 5 08:36:35 li166-66 sshd[24856]: reverse mapping checking getaddrinfo for ip144.hichina.com [122.70.144.206] failed - POSSIBLE BREAK-IN ATTEMPT!</pre>
上述错误表示的是：连接进来的客户端没有或有一个错误的反向DNS服务。这种错误信息并不一定代表你的服务器收到”break-in attempt”，也就是遭到攻击。
<h2>5. 错误5：</h2>
<pre>Mar 7 09:38:31 li166-66 sshd[25687]: refused connect from 192.168.210.80 (192.168.210.80)</pre>
如果你看到上述的错误日志，表示你使用denyhosts屏蔽了某些IP地址。这意味着上述的IP地址在/etc/hosts.deny中有被描述到，服务器拒绝了这些地址来的连接。
<h2>6. 错误6：</h2>
<pre>Mar 7 09:38:31 li166-66 sshd[25687]: Bad protocol version identification 'unknown' from 192.168.4.10</pre>
在握手开始的手，服务器会检查客户端的ssh版本。如果客户端提供的字符串是非法的，或者协议中其他某些内容不正确，你就会在你的日志中看到上述内容。

&nbsp;

转自：<a href="http://xenojoshua.com/2012/06/ssh-server-log-and-error-messages/">http://xenojoshua.com/2012/06/ssh-server-log-and-error-messages/</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>532</wp:post_id>
		<wp:post_date><![CDATA[2013-09-25 21:31:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-09-25 13:31:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%bd%ac%e3%80%91%e5%85%b3%e4%ba%8essh-server-log-%e5%92%8c-error-messages]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%ae%89%e5%85%a8"><![CDATA[Linux安全]]></category>
		<category domain="post_tag" nicename="ssh"><![CDATA[ssh]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[950]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql常用查询</title>
		<link>http://www.itopers.com/?p=538</link>
		<pubDate>Fri, 04 Oct 2013 07:36:46 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=538</guid>
		<description></description>
		<content:encoded><![CDATA[<table width="803" border="1" cellspacing="0" cellpadding="0"><colgroup> <col span="2" width="401" /> </colgroup>
<tbody>
<tr>
<td width="401" height="48">SELECT VERSION()</td>
<td width="401">显示版本号</td>
</tr>
<tr>
<td width="401" height="48">SELECT CURRENT_DATE</td>
<td width="401">显示当前日期</td>
</tr>
<tr>
<td width="401" height="48">SELECT NOW()</td>
<td width="401">显示当前时间</td>
</tr>
<tr>
<td width="401" height="48">SELECT USER()</td>
<td width="401">显示当前用户</td>
</tr>
<tr>
<td width="401" height="48">SHOW DATABASES</td>
<td width="401">显示所有数据库</td>
</tr>
<tr>
<td width="401" height="48">SHOW TABLES IN DATABASE</td>
<td width="401">显示某个数据库中的表</td>
</tr>
<tr>
<td width="401" height="48">USE DATABASE</td>
<td width="401">使用某个数据库</td>
</tr>
<tr>
<td width="401" height="48">DESCRIBE TABLE_NAME</td>
<td width="401">显示表的详细信息</td>
</tr>
</tbody>
</table>
<pre class="lang:mysql decode:true">mysql&gt; SELECT VERSION();
+------------+
| VERSION()  |
+------------+
| 5.5.15-log |
+------------+
1 row in set (0.00 sec)</pre>
显示当前时间，如下
<pre class="lang:mysql decode:true">mysql&gt; SELECT CURRENT_DATE();
+----------------+
| CURRENT_DATE() |
+----------------+
| 2013-10-04     |
+----------------+
1 row in set (0.00 sec)</pre>
CURRENT_DATE()和NOW()的区别前者只显示年月日，没有显示时间。后者显示了时间
<pre class="lang:default decode:true">mysql&gt; SELECT NOW();
+---------------------+
| NOW()               |
+---------------------+
| 2013-10-04 15:19:02 |
+---------------------+
1 row in set (0.00 sec)</pre>
显示当前登录的用户，如下表示我用root从本地登录。
<pre class="lang:mysql decode:true">mysql&gt; SELECT USER();
+----------------+
| USER()         |
+----------------+
| root@localhost |
+----------------+
1 row in set (0.00 sec)</pre>
显示一个数据库的所有表
<pre class="lang:mysql decode:true">mysql&gt; SHOW TABLES IN mysql;     
+---------------------------+
| Tables_in_mysql           |
+---------------------------+
| columns_priv              |
| db                        |
| event                     |
| func                      |
| general_log               |
| help_category             |
| help_keyword              |
| help_relation             |
| help_topic                |
| host                      |
| ndb_binlog_index          |
| plugin                    |
| proc                      |
| procs_priv                |
| proxies_priv              |
| servers                   |
| slow_log                  |
| tables_priv               |
| time_zone                 |
| time_zone_leap_second     |
| time_zone_name            |
| time_zone_transition      |
| time_zone_transition_type |
| user                      |
+---------------------------+
24 rows in set (0.10 sec)</pre>
DESCRIBE  tablename显示表详细信息，可以简写为DESC  TABLE_NAME
<pre class="lang:mysql decode:true">mysql&gt; use mysql           
Database changed
mysql&gt; DESCRIBE db;  
+-----------------------+---------------+------+-----+---------+-------+
| Field                 | Type          | Null | Key | Default | Extra |
+-----------------------+---------------+------+-----+---------+-------+
| Host                  | char(60)      | NO   | PRI |         |       |
| Db                    | char(64)      | NO   | PRI |         |       |
| User                  | char(16)      | NO   | PRI |         |       |
| Select_priv           | enum('N','Y') | NO   |     | N       |       |
| Insert_priv           | enum('N','Y') | NO   |     | N       |       |
| Update_priv           | enum('N','Y') | NO   |     | N       |       |
| Delete_priv           | enum('N','Y') | NO   |     | N       |       |
| Create_priv           | enum('N','Y') | NO   |     | N       |       |
| Drop_priv             | enum('N','Y') | NO   |     | N       |       |
| Grant_priv            | enum('N','Y') | NO   |     | N       |       |
| References_priv       | enum('N','Y') | NO   |     | N       |       |
| Index_priv            | enum('N','Y') | NO   |     | N       |       |
| Alter_priv            | enum('N','Y') | NO   |     | N       |       |
| Create_tmp_table_priv | enum('N','Y') | NO   |     | N       |       |
| Lock_tables_priv      | enum('N','Y') | NO   |     | N       |       |
| Create_view_priv      | enum('N','Y') | NO   |     | N       |       |
| Show_view_priv        | enum('N','Y') | NO   |     | N       |       |
| Create_routine_priv   | enum('N','Y') | NO   |     | N       |       |
| Alter_routine_priv    | enum('N','Y') | NO   |     | N       |       |
| Execute_priv          | enum('N','Y') | NO   |     | N       |       |
| Event_priv            | enum('N','Y') | NO   |     | N       |       |
| Trigger_priv          | enum('N','Y') | NO   |     | N       |       |
+-----------------------+---------------+------+-----+---------+-------+
22 rows in set (0.00 sec)</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>538</wp:post_id>
		<wp:post_date><![CDATA[2013-10-04 15:36:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-04 07:36:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e5%b8%b8%e7%94%a8%e6%9f%a5%e8%af%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[424]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql创建数据库</title>
		<link>http://www.itopers.com/?p=541</link>
		<pubDate>Fri, 04 Oct 2013 08:44:46 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=541</guid>
		<description></description>
		<content:encoded><![CDATA[<pre class="lang:mysql decode:true">mysql&gt; use test     --使用test数据库，以后的操作都在这个数据库下进行
Database changed
mysql&gt; ls
    -&gt; \c           --\c表示取消运行，重新开始输入
mysql&gt; show tables;      ---显示当前数据库表
Empty set (0.00 sec)
----------如下是创建数据表语句，表名为pet，创建name,owner,species,sex,birth,death列
mysql&gt; CREATE TABLE pet (name VARCHAR(20),owner VARCHAR(20),species VARCHAR(20),sex CHAR(1),birth DATE,death DATE);
Query OK, <strong><span style="color: #ff6600;">0</span></strong> rows affected (0.04 sec)

mysql&gt; show tables;
+----------------+
| Tables_in_test |
+----------------+
| pet            |     ---已经创建成功
+----------------+
1 row in set (0.00 sec)</pre>
数据库和表已经创建完毕，现在开始向数据库插入数据。
<pre class="lang:default decode:true">mysql&gt; INSERT INTO pet (name,owner,species,sex,birth,death)VALUES('xixi','liuzhen','dog','m','2013-10-04',null);
Query OK, 1 row affected (0.05 sec)

mysql&gt; SELECT * FROM pet;    
+------+---------+---------+------+------------+-------+
| name | owner   | species | sex  | birth      | death |
+------+---------+---------+------+------------+-------+
| xixi | liuzhen | dog     | m    | 2013-10-04 | NULL  |
+------+---------+---------+------+------------+-------+
1 row in set (0.00 sec)</pre>
下面介绍另一种方法插入数据LOAD DATA 或LOAD DATA LOCAL
<pre class="lang:default decode:true">mysql&gt; LOAD DATA INFILE '/root/Desktop/pet.sql' INTO TABLE pet LINES TERMINATED BY '\n'; 
Query OK, 9 rows affected (0.05 sec)
Records: 9  Deleted: 0  Skipped: 0  Warnings: 0</pre>
LOAD DATA:是直接读取数据库服务器的文件

LOAD DATA LOCAL：是读取客户端本地文件，所以效率没有load data高。

LINES TERMINATED BY '\n' 表示每一行以\n结束，如果是windows下面需要设置为'\r\n'

那么列分隔符该怎么写？FIELDS TERMINATED BY          ---设定列分隔字符

想了下，还是把刚才load的文件显示一下
<pre class="lang:sh decode:true">[root@localhost Desktop]# cat pet.sql 
Fluffy  Harold  cat     F       1993-02-04      \N
Claws   Gwen    cat     M       1994-03-17      \N
Buffy   Harold  dog     F       1989-05-13      \N
Chirpy  Gwen    bird    F       1998-09-11      \N
Fang    Benny   dog     M       1990-08-27      \N
Bowser  Diane   dog     M       1990-08-31      1995-07-29
Whistler        Gwen    bird    \N      1997-12-09      \N
Slim    Benny   snake   M       1996-04-29      \N
Puffball        Diane   hamster F       1999-03-30      \N</pre>
其中\N表示为空

现在已经插入了数据，开始查询数据吧。
<pre class="lang:mysql decode:true">mysql&gt; SELECT name, species, birth FROM pet WHERE species = 'dog' OR species = 'cat' AND death is NULL ORDER BY name ;  
+--------+---------+------------+
| name   | species | birth      |
+--------+---------+------------+
| Bowser | dog     | 1990-08-31 |
| Buffy  | dog     | 1989-05-13 |
| Claws  | cat     | 1994-03-17 |
| Fang   | dog     | 1990-08-27 |
| Fluffy | cat     | 1993-02-04 |
| xixi   | dog     | 2013-10-04 |
+--------+---------+------------+
6 rows in set (0.00 sec)</pre>
如上查询需要注意

1、or和and的优先级，具体的优先级是：not&gt;and&gt;or

2、需要排序可以用order by

3、NULL是特殊的值，不能使用普通比较符来比较，需要用is或is not

&nbsp;
<div>•模式匹配</div>
<div>•使用“_”匹配任何单个字符，“%”匹配任意数目字符(包括零字符)</div>
<div>•注意使用SQL模式时，不能使用=或!=；而应使用LIKE或NOT LIKE比较操作符。</div>
例如：mysql&gt; SELECT * FROM pet WHERE name LIKE 'b%';
<div>•注意：作为DBA，不允许使用左模糊匹配，例如‘%fy’，也不允许使用扩展正则表达式，即REGEXP和NOT REGEXP操作符</div>
<div></div>
<div>原因是：使用左模糊和正则就无法使用索引，这样会给查询带来很大的性能问题。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>541</wp:post_id>
		<wp:post_date><![CDATA[2013-10-04 16:44:46]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-04 08:44:46]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e5%88%9b%e5%bb%ba%e6%95%b0%e6%8d%ae%e5%ba%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[593]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql数据库备份</title>
		<link>http://www.itopers.com/?p=546</link>
		<pubDate>Fri, 04 Oct 2013 11:49:53 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=546</guid>
		<description></description>
		<content:encoded><![CDATA[<div>备份主要有两种方法</div>
（1）将数据生成为可以完全重现当时数据库中数据的<span style="color: #ff0000;">INSERT</span>语句；

（2）通过软件，将数据库表的数据以特定的分隔符进行分隔后记录在文本文件中。
<div>一、生成INSERT语句备份：</div>
<div>    问题：mysqldump不停机备份时，可能有数据变更的请求产生，这样可能造成mysqldump备份出来的数据不一致，在对一致性和完整性要求比较严格的系统中，该备份可能是无效的备份。</div>
<div>

解决方法：

（1）可以把整个备份过程控制在一个事务中；

mysqldump通过--single-transaction选项支持此功能而不影响数据库的服务。

（2）通过锁表：--lock-tables每次锁定一个数据库的表；

另，--lock-all-tables一次锁定所有的表，适用于dump的表分别处于各个不同的数据库中的情况。
<div>二、生成特定格式的纯文本备份数据文件：</div>
优点：使用存储空间小，数据格式清晰，编辑方便；

缺点：每个备份文件只能备份一个表，没有数据库结构的重建命令（不过可以通过其他方式生成）；
<div>    生成特定格式的纯文本备份数据文件：</div>
（1）select ... from... into outfile [fields terminated by]

[lines terminated by]

（2）通过mysqldump，即 –T选项：结构与数据分别导出备份；

例如：mysqldump -u root -p -T /root/Desktop/test;
<pre class="lang:sh decode:true">[root@localhost Desktop]# mysqldump test -T test/</pre>
注意：<span style="color: #ff0000;">这里的test/是目录，不是文件。</span>

如果出现如下报错，一般是<span style="color: #ff0000;">当前目录的权限不够，数据为数据库运行用户才行</span>。
<pre class="lang:sh decode:true">[root@localhost Desktop]# mysqldump test -T test/
mysqldump: Got error: 1: Can't create/write to file '/root/Desktop/test/pet.txt' (Errcode: 13) when executing 'SELECT INTO OUTFILE'</pre>
chown -R mysql.mysql  test/之后，然后再进行备份，看到如下内容：
<pre class="lang:sh decode:true">[root@localhost test]# ls
pet.sql  pet.txt

[root@localhost test]# more pet.txt 
xixi    liuzhen dog     m       2013-10-04      \N
Fluffy  Harold  cat     F       1993-02-04      \N
Claws   Gwen    cat     M       1994-03-17      \N
Buffy   Harold  dog     F       1989-05-13      \N
Chirpy  Gwen    bird    F       1998-09-11      \N
Fang    Benny   dog     M       1990-08-27      \N
Bowser  Diane   dog     M       1990-08-31      1995-07-29
Whistler        Gwen    bird    \N      1997-12-09      \N
Slim    Benny   snake   M       1996-04-29      \N
Puffball        Diane   hamster F       1999-03-30      \N</pre>
<span style="color: #ff0000;">另：上面\N在数据库里为NULL</span>

mysql还有一种备份方法是用mysqlhotcopy

mysqlhotcopy –u root –p 密码 数据库名 备份目录
<pre class="lang:sh decode:true">[root@localhost Desktop]# mysqlhotcopy test data/
Locked 2 tables in 0 seconds.
Flushed tables (`test`.`food`, `test`.`pet`) in 0 seconds.
Copying 4 files...
Copying indices for 0 files...
Unlocked tables.
mysqlhotcopy copied 2 tables (4 files) in 0 seconds (0 seconds overall).
[root@localhost Desktop]# ls data/
test
[root@localhost Desktop]# cd data/test/
[root@localhost test]# ls
food.frm  food.MYD  food.MYI  pet.frm</pre>
就是把数据库目录文件全部拷贝出来
<pre class="lang:default decode:true ">[root@localhost test]# ls
food.frm  food.MYD  food.MYI  pet.frm
[root@localhost test]# pwd
/var/mysql/data/test</pre>
使用mysqlhotcopy需要提前安装perl-DBD-Mysql,安装好后才能使用，否则无法使用，会报如下错误
<pre class="lang:sh decode:true">[root@localhost Desktop]# mysqlhotcopy test data/
install_driver(mysql) failed: Can't locate DBD/mysql.pm in @INC (@INC contains: /usr/lib/perl5/site_perl/5.8.8/i386-linux-thread-multi /usr/lib/perl5/site_perl/5.8.8 /usr/lib/perl5/site_perl /usr/lib/perl5/vendor_perl/5.8.8/i386-linux-thread-multi /usr/lib/perl5/vendor_perl/5.8.8 /usr/lib/perl5/vendor_perl /usr/lib/perl5/5.8.8/i386-linux-thread-multi /usr/lib/perl5/5.8.8 .) at (eval 7) line 3.
Perhaps the DBD::mysql perl module hasn't been fully installed,
or perhaps the capitalisation of 'mysql' isn't right.
Available drivers: DBM, ExampleP, File, Proxy, Sponge.
 at /usr/local/mysql/bin/mysqlhotcopy line 197</pre>
那么，<strong><span style="color: #ff0000;">MysqlDump与MysqlHotCopy的区别是什么？</span></strong>

<span style="color: #ff0000;">mysqlhotcopy 只能用于备份 MyISAM</span>，并且只能运行在 类<span style="color: #ff0000;">Unix 和 NetWare</span> 系统上。

目前 MySQL 支持的免费备份工具有：mysqldump、mysqlhotcopy，还可以用 SQL 语法进行备份：BACKUP TABLE 或者 SELECT INTO OUTFILE，又或者备份二进制日志（binlog），还可以是直接拷贝数据文件和相关的配置文件。MyISAM 表是保存成文件的形式，因此相对比较容易备份，上面提到的几种方法都可以使用。Innodb 所有的表都保存在同一个数据文件 ibdata1 中（也可能是多个文件，或者是独立的表空间文件），相对来说比较不好备份，免费的方案可以是拷贝数据文件、备份 binlog，或者用 mysqldump。

mysqldump的调用方式：

shell&gt; mysqldump [options] db_name [tables]

shell&gt; mysqldump [options] --database DB1 [DB2 DB3...]

shell&gt; mysqldump [options] --all-database

注意：<span style="color: #ff0000;">如果没有指定任何表或使用了--database或--all-database选项，则转储整个数据库。</span>

<strong>Mysqldump的重要选项：</strong>
<table width="870" border="1" cellspacing="1" cellpadding="1"><colgroup> <col width="263" /> <col width="608" /> </colgroup>
<tbody>
<tr>
<td width="263" height="auto"><strong><span style="color: #ff0000;">Options(参数)</span></strong></td>
<td width="608"><strong><span style="color: #ff0000;">说明</span></strong></td>
</tr>
<tr>
<td width="263" height="auto">--add-drop-database</td>
<td width="608">在每个CREATE DATABASE语句前添加DROP DATABASE语句</td>
</tr>
<tr>
<td width="263" height="auto">--add-drop-tables</td>
<td width="608">在每个CREATE TABLE语句前添加DROP TABLE语句</td>
</tr>
<tr>
<td width="263" height="auto">--all-database</td>
<td width="608">转储所有数据库中的所有表，与--database相同</td>
</tr>
<tr>
<td width="263" height="auto">--allow-keywords</td>
<td width="608">允许创建关键字列名</td>
</tr>
<tr>
<td width="263" height="auto">--comments[={0|1}]</td>
<td width="608">如果设置为 0，禁止转储文件中的其它信息。 默认值为1，即包括额外信息。</td>
</tr>
<tr>
<td width="263" height="auto">--default-character-set=charset</td>
<td width="608">使用charsetas默认字符集。</td>
</tr>
<tr>
<td width="263" height="auto">--database，-B</td>
<td width="608">转储几个数据库</td>
</tr>
<tr>
<td width="263" height="auto">--quick</td>
<td width="608">该选项用于转储大的表。它强制mysqldump从服务器一次一行地检索表中的行而不是检索所有行并在输出前将它缓存到内存中。</td>
</tr>
</tbody>
</table>
&nbsp;
<table width="848" border="1" cellspacing="1" cellpadding="1"><colgroup> <col width="253" /> <col width="594" /> </colgroup>
<tbody>
<tr>
<td width="253" height="auto">--add-locks</td>
<td width="594">在插入数据开始的时候加上LOCK TABLES</td>
</tr>
<tr>
<td width="253" height="auto">-R, --routines</td>
<td width="594">导出函数和存储过程</td>
</tr>
<tr>
<td width="253" height="auto">--triggers</td>
<td width="594">导出触发器</td>
</tr>
<tr>
<td width="253" height="auto">-n, --no-create-db</td>
<td width="594">不提供建库语句</td>
</tr>
<tr>
<td width="253" height="auto">-t, --no-create-info</td>
<td width="594">不写重新创建每个转储表的CREATE TABLE语句</td>
</tr>
<tr>
<td width="253" height="auto">-d, --no-data</td>
<td width="594">不提供导出数据库数据记录</td>
</tr>
<tr>
<td width="253" height="auto&gt;-T, --tab=name&lt;/td&gt;
&lt;td width=">分别导出数据库结构和数据，生成.sql和.txt文件</td>
</tr>
<tr>
<td width="253" height="auto">--tables</td>
<td width="594">用表格式显示输出</td>
</tr>
</tbody>
</table>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>546</wp:post_id>
		<wp:post_date><![CDATA[2013-10-04 19:49:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-04 11:49:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e6%95%b0%e6%8d%ae%e5%ba%93%e5%a4%87%e4%bb%bd%e4%b8%8e%e6%81%a2%e5%a4%8d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[661]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql索引的创建、删除、修改、启用与禁用</title>
		<link>http://www.itopers.com/?p=552</link>
		<pubDate>Sat, 05 Oct 2013 02:19:37 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=552</guid>
		<description></description>
		<content:encoded><![CDATA[直接进行操作啦！！！
<pre class="lang:mysql decode:true">mysql&gt; use test
Database changed
mysql&gt; show tables;
+----------------+
| Tables_in_test |
+----------------+
| food           |
| pet            |
+----------------+
2 rows in set (0.00 sec)

mysql&gt; show index from pet;      --这里查看表的索引
Empty set (0.00 sec)</pre>
看上面的pet表，目前是还没有索引的，如何创建索引呢？如下
<pre class="lang:mysql decode:true">mysql&gt; CREATE INDEX testINDEX ON pet (`name`);
Query OK, 0 rows affected (0.08 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; show index from pet
    -&gt; ;
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| pet   |          1 | testINDEX |            1 | name        | A         |          10 |     NULL | NULL   | YES  | BTREE      |         |               |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
1 row in set (0.00 sec)</pre>
上面成功创建了一个索引，使用方法：CREATE INDEX     索引名字    [index_type]    表名  （`列表名`）;

详细的创建方法：
<pre class="lang:mysql decode:true">CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name 
[index_type] 
ON tbl_name (index_col_name,...) 
[index_type] 

index_col_name: 
col_name [(length)] [ASC | DESC] 

index_type: 
USING {BTREE | HASH | RTREE}</pre>
然后再创建一个Id列，在Id中创建一个主键，具体方法如下：
<pre class="lang:mysql decode:true">mysql&gt; ALTER TABLE pet ADD Id INT (8);      ---添加一列id，为pet表的ID
Query OK, 10 rows affected (0.09 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql&gt; desc pet;
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| name    | varchar(20) | YES  | MUL | NULL    |       |
| owner   | varchar(20) | YES  |     | NULL    |       |
| species | varchar(20) | YES  |     | NULL    |       |
| sex     | char(1)     | YES  |     | NULL    |       |
| birth   | date        | YES  |     | NULL    |       |
| death   | date        | YES  |     | NULL    |       |
| Id      | int(8)      | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+
7 rows in set (0.01 sec)

mysql&gt; ALTER TABLE pet CHANGE Id Id INT (8) NOT NULL COMMENT 'pet ID';   ----修改Id列为not null并添加说明
Query OK, 10 rows affected, 10 warnings (0.08 sec)
Records: 10  Duplicates: 0  Warnings: 10</pre>
如下开始创建主键，但报错了，报ERROR 1062 （23000），错误的原因很简单，看一下select 数据查询结果就知道了。主键的数据是需要唯一的，但这里的数据全部是0，没有唯一，所以创建失败。那为什么是这样的，原因在添加这个数据列时，pet表已经有数据了。再添加一个int列时，默认就全部为0。需要按照我们想要的结果：一是update修改Id成不同的值;二是删除这一列重新创建一个带有主键自增的Id列。
<pre class="lang:default decode:true">mysql&gt; ALTER TABLE pet ADD CONSTRAINT PK_PET PRIMARY KEY (`Id`);   
ERROR 1062 (23000): Duplicate entry '0' for key 'PRIMARY'
mysql&gt; select * from pet;
+----------+---------+---------+------+------------+------------+----+
| name     | owner   | species | sex  | birth      | death      | Id |
+----------+---------+---------+------+------------+------------+----+
| xixi     | liuzhen | dog     | m    | 2013-10-04 | NULL       |  0 |
| Fluffy   | Harold  | cat     | F    | 1993-02-04 | NULL       |  0 |
| Claws    | Gwen    | cat     | M    | 1994-03-17 | NULL       |  0 |
| Buffy    | Harold  | dog     | F    | 1989-05-13 | NULL       |  0 |
| Chirpy   | Gwen    | bird    | F    | 1998-09-11 | NULL       |  0 |
| Fang     | Benny   | dog     | M    | 1990-08-27 | NULL       |  0 |
| Bowser   | Diane   | dog     | M    | 1990-08-31 | 1995-07-29 |  0 |
| Whistler | Gwen    | bird    | NULL | 1997-12-09 | NULL       |  0 |
| Slim     | Benny   | snake   | M    | 1996-04-29 | NULL       |  0 |
| Puffball | Diane   | hamster | F    | 1999-03-30 | NULL       |  0 |
+----------+---------+---------+------+------------+------------+----+
10 rows in set (0.00 sec)</pre>
如果利用alter table直接添加一个auto_increment是不行的，因为它没有key。见如下提示：
<pre class="lang:mysql decode:true">mysql&gt; ALTER TABLE pet CHANGE Id Id INT (8) NOT NULL AUTO_INCREMENT COMMENT 'pet ID'; 
ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key</pre>
那么我就先删除这一列，然后再添加这一列时就主动设置成主键和auto_increment属性。
<pre class="lang:mysql decode:true">mysql&gt; ALTER TABLE pet DROP COLUMN Id;  
Query OK, 10 rows affected (0.04 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql&gt; ALTER TABLE pet ADD Id INT (8) NOT NULL AUTO_INCREMENT COMMENT 'pet ID';   ----这里报错的原因是自增列必须是一个key
ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key
mysql&gt; desc pet;
+---------+-------------+------+-----+---------+-------+
| Field   | Type        | Null | Key | Default | Extra |
+---------+-------------+------+-----+---------+-------+
| name    | varchar(20) | YES  | MUL | NULL    |       |
| owner   | varchar(20) | YES  |     | NULL    |       |
| species | varchar(20) | YES  |     | NULL    |       |
| sex     | char(1)     | YES  |     | NULL    |       |
| birth   | date        | YES  |     | NULL    |       |
| death   | date        | YES  |     | NULL    |       |
+---------+-------------+------+-----+---------+-------+
6 rows in set (0.00 sec)

mysql&gt; ALTER TABLE pet ADD Id INT (8) NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'pet ID';    ----在这里添加primary key就创建成功了
Query OK, 10 rows affected (0.08 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql&gt; select * from pet;
+----------+---------+---------+------+------------+------------+----+
| name     | owner   | species | sex  | birth      | death      | Id |
+----------+---------+---------+------+------------+------------+----+
| xixi     | liuzhen | dog     | m    | 2013-10-04 | NULL       |  1 |
| Fluffy   | Harold  | cat     | F    | 1993-02-04 | NULL       |  2 |
| Claws    | Gwen    | cat     | M    | 1994-03-17 | NULL       |  3 |
| Buffy    | Harold  | dog     | F    | 1989-05-13 | NULL       |  4 |
| Chirpy   | Gwen    | bird    | F    | 1998-09-11 | NULL       |  5 |
| Fang     | Benny   | dog     | M    | 1990-08-27 | NULL       |  6 |
| Bowser   | Diane   | dog     | M    | 1990-08-31 | 1995-07-29 |  7 |
| Whistler | Gwen    | bird    | NULL | 1997-12-09 | NULL       |  8 |
| Slim     | Benny   | snake   | M    | 1996-04-29 | NULL       |  9 |
| Puffball | Diane   | hamster | F    | 1999-03-30 | NULL       | 10 |
+----------+---------+---------+------+------------+------------+----+
10 rows in set (0.01 sec)</pre>
如上显示已经成功将Id列添加主键并自动增长。然后再看一下索引信息:增加了一个primary key。这里需要说明一下，index_type这里默认是BTREE,如果需要变更可在创建时使用Using 其它类型。
<pre class="lang:mysql decode:true">mysql&gt; show index from pet;  
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| pet   |          0 | PRIMARY   |            1 | Id          | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |
| pet   |          1 | testINDEX |            1 | name        | A         |           2 |     NULL | NULL   | YES  | BTREE      |         |               |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
2 rows in set (0.00 sec)</pre>
那么如何删除索引呢？见下面例子
<pre class="lang:mysql decode:true">mysql&gt; ALTER TABLE pet DROP INDEX testINDEX;    
Query OK, 0 rows affected (0.12 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql&gt; show index from pet;                  ----这里已经成功将索引testINDEX删除
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| pet   |          0 | PRIMARY  |            1 | Id          | A         |          10 |     NULL | NULL   |      | BTREE      |         |               |
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
1 row in set (0.00 sec)</pre>
如果我们在恢复数据的时候，（这里只说在myisam引擎中）在导入批量数据的时候会索引给暂时给失效，防止每插入一个数据需要刷新一次索引，这样会大大降低了插入性能。（当然，避免索引每次插入时刷新索引，可通过其它的方式避免，如事务、表写锁或者启动数据库时用--delay-key-write=ALL参数启动）。这里只介绍索引的启用和禁用（失效）。

方法如下：
<pre class="lang:mysql decode:true ">mysql&gt;ALTER TABLE pet DISABLE KEYS; 
mysql&gt; ALTER TABLE pet ENABLE KEYS;</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>552</wp:post_id>
		<wp:post_date><![CDATA[2013-10-05 10:19:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-05 02:19:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e7%b4%a2%e5%bc%95%e7%9a%84%e5%88%9b%e5%bb%ba%e3%80%81%e5%88%a0%e9%99%a4%e3%80%81%e4%bf%ae%e6%94%b9%e3%80%81%e5%90%af%e7%94%a8%e4%b8%8e%e7%a6%81%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1581]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql创建新的键缓存</title>
		<link>http://www.itopers.com/?p=554</link>
		<pubDate>Sat, 05 Oct 2013 05:04:57 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=554</guid>
		<description></description>
		<content:encoded><![CDATA[键缓存就是将数据表的索引提前加载到缓存当中，如果有一个使用频率非常高的数据表和足够的内存空间，就应该把数据表的索引全部加载到一个足够大的键缓存里，这种能力使我们可以避免来自同一个数据表的键发生竞争，也可以避免来自其它数据表的键竞争这个缓存里的空间：创建一个足够大的键缓存来容纳某个数据表的所有索引，并把该缓存设定公供该数据表使用。在把键加载到键缓存里之后，就不再需要进行I/O操作了，当然，也不再需要从缓存丢弃键值，与这个数据表有关的键检索操作在内存里就可全部完成。但一定要注意设置这个键缓存能在MyISAM、MEMEORY，但不能在Innodb引擎中。

1、创建一个新的键缓存，让它大到足以容纳来自newpet数据表的索引
<pre class="lang:mysql decode:true">mysql&gt; SET GLOBAL pet_cache.key_buffer_size = 1024*1024;  
Query OK, 0 rows affected (0.01 sec)

mysql&gt; CACHE INDEX pet IN pet_cache;      ----把pet数据表加入到这个键缓存，但是pet表的引擎是innodb，无法加载
+----------+--------------------+----------+---------------------------------------------------------------------+
| Table    | Op                 | Msg_type | Msg_text                                                            |
+----------+--------------------+----------+---------------------------------------------------------------------+
| test.pet | assign_to_keycache | note     | The storage engine for the table doesn't support assign_to_keycache |
+----------+--------------------+----------+---------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; show create table pet;
+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table | Create Table                                                                                                                                                                                                                                                                                                                                                                              |
+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| pet   | CREATE TABLE `pet` (
  `name` varchar(20) DEFAULT NULL,
  `owner` varchar(20) DEFAULT NULL,
  `species` varchar(20) DEFAULT NULL,
  `sex` char(1) DEFAULT NULL,
  `birth` date DEFAULT NULL,
  `death` date DEFAULT NULL,
  `Id` int(8) NOT NULL AUTO_INCREMENT COMMENT 'pet ID',
  PRIMARY KEY (`Id`),
  KEY `testINDEX` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 |
+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)</pre>
2、那么把之前复制的newpet的引擎修改成MyISAM,然后再加入到pet_cache中
<pre class="lang:mysql decode:true">mysql&gt; ALTER TABLE newpet engine = MyISAM;      
Query OK, 10 rows affected (0.06 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql&gt; show create table newpet;
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table  | Create Table                                                                                                                                                                                                                                                                                                                                                                                 |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| newpet | CREATE TABLE `newpet` (
  `name` varchar(20) DEFAULT NULL,
  `owner` varchar(20) DEFAULT NULL,
  `species` varchar(20) DEFAULT NULL,
  `sex` char(1) DEFAULT NULL,
  `birth` date DEFAULT NULL,
  `death` date DEFAULT NULL,
  `Id` int(8) NOT NULL AUTO_INCREMENT COMMENT 'pet ID',
  PRIMARY KEY (`Id`),
  KEY `testINDEX` (`name`)
) ENGINE=MyISAM AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 |
+--------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

mysql&gt; CACHE INDEX newpet IN pet_cache;                ----重新将newpet表加载到pet_cache中，OK    
+-------------+--------------------+----------+----------+
| Table       | Op                 | Msg_type | Msg_text |
+-------------+--------------------+----------+----------+
| test.newpet | assign_to_keycache | status   | OK       |
+-------------+--------------------+----------+----------+
1 row in set (0.00 sec)</pre>
3、把newpet数据表的索引提前加载到它的键缓存中去：
<pre class="lang:mysql decode:true">mysql&gt; LOAD INDEX INTO CACHE newpet;
+-------------+--------------+----------+----------+
| Table       | Op           | Msg_type | Msg_text |
+-------------+--------------+----------+----------+
| test.newpet | preload_keys | status   | OK       |
+-------------+--------------+----------+----------+
1 row in set (0.00 sec)</pre>
如果你想把其它的数据表加载到同一个缓存或才是为其它的数据表创建其它的键缓存，在用以上的步骤即可，上面的步骤和语句创建专用键缓存在服务器重新启动之后将会消失。如果想一直保留需要在每次启动之后自动得到执行。比如放到一个文件里并用--init-file服务器选项来命名那个文件。也可以在my.cnf中的[server] 或者 [mysqld] 或者 [mysqld_safe]中添加init-file=/usr/local/mysql/init.file。另需要注意这个文件的需要mysql能够访问。
<pre class="lang:sh decode:true">[root@localhost mysql]# cat init.file 
use test;
SET GLOBAL pet_cache.key_buffer_size = 1024*1024;  
CACHE INDEX newpet IN pet_cache;  
LOAD INDEX INTO CACHE newpet;</pre>
通过如下命令可以查看设置情况
<pre class="lang:mysql decode:true ">mysql&gt; select @@global.pet_cache.key_buffer_size; 
+------------------------------------+
| @@global.pet_cache.key_buffer_size |
+------------------------------------+
|                            1048576 |
+------------------------------------+
1 row in set (0.00 sec)</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>554</wp:post_id>
		<wp:post_date><![CDATA[2013-10-05 13:04:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-05 05:04:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e5%88%9b%e5%bb%ba%e6%96%b0%e7%9a%84%e9%94%ae%e7%bc%93%e5%ad%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="key_buffer_key"><![CDATA[key_buffer_key]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="%e7%b4%a2%e5%bc%95"><![CDATA[索引]]></category>
		<category domain="post_tag" nicename="%e9%94%ae%e7%bc%93%e5%ad%98"><![CDATA[键缓存]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[673]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql数据恢复</title>
		<link>http://www.itopers.com/?p=560</link>
		<pubDate>Tue, 08 Oct 2013 13:43:50 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=560</guid>
		<description></description>
		<content:encoded><![CDATA[十一假时做了下mysql的数据备份，我觉得只 要备份做好了，恢复应该就没有什么问题。主要是我删除垃圾评论的时候，误把自己发一条评论给删除了。于是就想来恢复一下。随便把mysql数据恢复实验做吓。
<div>在<a href="http://www.itopers.com/?p=546">《mysql数据库备份》</a>实验中提到两种备份数据方法，那么这两种备份的方法如下：</div>
<div>1、纯数据文本备份的恢复，利用load命令即可</div>
<div>

mysql&gt; LOAD DATA INFILE “pet.txt” INTO TABLE pet;

由于缺省时，LOAD DATA 语句以特殊字符’\n’作为记录的结束，这和Unix系统的文本编辑器以’\n’为换行符是一致的，但是在Windows系统中，换行符是’\r\n’，因此，如果是在Windows系统编辑的文件，那么上面的语句不能成功的录入数据，要做如下的修改：

mysql&gt; LOAD DATA INFILE “pet.txt” INTO TABLE pet

-&gt; LINES TERMINATED BY ‘\r\n’;

如果使用mysqlimport程序，相应的命令行为：

shell&gt; mysqlimport test ‘pet.txt’

或者使用：shell&gt; mysqlimport test ‘pet.txt’ --lines-terminated-by=’\r\n’

</div>
<div>

2、Shell &gt; mysql -u root -p 数据库名&lt; 备份文件目录

</div>
例如： mysqldump -uroot -p --tables zoo pet &lt; /root/est1/pet_dump.sql

&nbsp;

<strong>如下是误删除一条评论的恢复过程</strong>

a.首先将备份的数据库恢复到虚拟机里
<pre class="lang:sh decode:true">[root@localhost blog]# gunzip &lt;beebol_2013-09-11.1378831028.sql.gz |mysql beebol</pre>
b.登录虚拟机的数据库，将丢失的那条记录找到导出来
<pre class="lang:default decode:true">mysql&gt; select * from wp_comments where comment_ID=248 into outfile '/root/blog/b.txt' lines terminated by '\n' ;
Query OK, 1 row affected (0.00 sec)</pre>
c.然后将/root/blog/b.txt上传到服务器上，利用上面的load进行恢复
<pre class="lang:default decode:true crayon-selected">mysql&gt; load data  infile '/home/databak/b.txt' into table wp_comments;                    
Query OK, 1 row affected (0.03 sec)
Records: 1  Deleted: 0  Skipped: 0  Warnings: 0</pre>
好了，已经正常恢复了。呵呵，学习过程中操作一下，真的不错。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>560</wp:post_id>
		<wp:post_date><![CDATA[2013-10-08 21:43:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-08 13:43:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e6%95%b0%e6%8d%ae%e6%81%a2%e5%a4%8d]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[464]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql用户账户管理</title>
		<link>http://www.itopers.com/?p=564</link>
		<pubDate>Thu, 10 Oct 2013 13:28:17 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=564</guid>
		<description></description>
		<content:encoded><![CDATA[创建mysql用户有三种方式可以创建：

1、通过Create User创建

2、通过Grant语句进行创建

3、直接操作授权表进行

首先看一下，目前数据库有哪些用户：
<pre class="lang:mysql decode:true">mysql&gt; select HOST,USER,PASSWORD from mysql.user;
+-----------------------+--------+-------------------------------------------+
| HOST                  | USER   | PASSWORD                                  |
+-----------------------+--------+-------------------------------------------+
| localhost             | root   |                                           |
| localhost.localdomain | root   |                                           |
| 127.0.0.1             | root   |                                           |
| ::1                   | root   |                                           |
| %                     | beebol | *916F3978962A2C47E1B63DCD7F3D711EE1484228 |
+-----------------------+--------+-------------------------------------------+
5 rows in set (0.00 sec)</pre>
如上是我数据库中的所有mysql用户，除了beebol用户有密码外，root是没有密码的，那么就是说，root从本机不用密码就可以登录数据库。

先用CREATE USER创建一个用户，不过得先看一下语法
<pre class="lang:default decode:true">mysql&gt; help CREATE USER;
Name: 'CREATE USER'
Description:
Syntax:
CREATE USER user_specification
    [, user_specification] ...

user_specification:
    user
    [
        IDENTIFIED BY [PASSWORD] 'password'
      | IDENTIFIED WITH auth_plugin [AS 'auth_string']
    ]

#doc还给出了一个例子
CREATE USER 'jeffrey'@'localhost' IDENTIFIED BY 'mypass';</pre>
下面来创建一个vaster用户，允许生本地登录，密码为123456，也可以用：<span style="color: #ff0000;">IDENTIFIED BY PASSWORD ‘这里跟的是PASSWORD(‘密码’)得出来的密码串’</span>
<pre class="lang:mysql decode:true">mysql&gt; CREATE USER vaster@'localhost' IDENTIFIED BY  '123456';        
Query OK, 0 rows affected (0.00 sec)</pre>
创建成功，尝试登录是ok的。
<pre class="lang:default decode:true">[root@localhost ~]# mysql -uvaster -p
Enter password: 
.....省略
mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| test               |
+--------------------+
2 rows in set (0.01 sec)</pre>
用户创建了，show databases时，只看到了一个test库和infomation_schema库，这个用户还没有权限操作需要的数据库权限。就让这个用户可以访问beebolblog数据库吧。

<span style="color: #ff0000;">如下使用的是grant语句来给用户授权，如果用户不存在，会自动创建用户，也就是上面说的使用grant语句创建用户。</span>
<pre class="lang:default decode:true">mysql&gt; GRANT SELECT ON beebolblog.* TO vaster@'localhost';
Query OK, 0 rows affected (0.01 sec)</pre>
然后查看权限如下，<span style="color: #ff0000;">USAGE表示没有任何权限，vaster只有对beebolblog的select权限</span>
<pre class="lang:default decode:true">mysql&gt; SHOW GRANTS FOR vaster@'localhost';
+---------------------------------------------------------------------------------------------------------------+
| Grants for vaster@localhost                                                                                   |
+---------------------------------------------------------------------------------------------------------------+
| GRANT USAGE ON *.* TO 'vaster'@'localhost' IDENTIFIED BY PASSWORD '*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9' |
| GRANT SELECT ON `beebolblog`.* TO 'vaster'@'localhost'                                                        |
+---------------------------------------------------------------------------------------------------------------+
2 rows in set (0.00 sec)</pre>
刚才我在授权之前，vaster已经登录了，在不退出的情况下是否有效呢？结果是有效的。
<pre class="lang:default decode:true">mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| beebolblog         |
| test               |
+--------------------+
3 rows in set (0.00 sec)</pre>
如下显示可以select数据库，但不能删除，当然update也不行哦。
<pre class="lang:default decode:true">mysql&gt; select count(*) from wp_users;      
+----------+
| count(*) |
+----------+
|        4 |
+----------+
1 row in set (0.01 sec)
mysql&gt; delete from wp_users;
ERROR 1142 (42000): DELETE command denied to user 'vaster'@'localhost' for table 'wp_users'</pre>
grant还有此参数，如下：

（1）MAX_QUERIES_PER_HOUR：每小时执行的最大查询数

（2）MAX_UPDATES_PER_HOUR：每小时允许执行的最大更新数

（3）MAX_CONNECTIONS_PER_HOUR：每小时允许的最大连接次数

（5）MAX_USER_CONNECTIONS：允许此用户同时连接数

（6）GRANT OPTION ：允许这个用户给别的用户进行授权这些权限

3、直接操作授权表来添加用户

INSERT INTO user     VALUES( ‘localhost’, ‘monty’ , PASSWORD(‘some_pass’),   'Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y');

flush privileges；

如果需要新创建的账号立即生效，需要执行FLUSH PRIVILEGES的语句。否则，只有重启服务器后更改方会被注意到。

<strong>用户创建完了，现在来把创建的用户给删除了！！！</strong>
<pre class="lang:default decode:true">mysql&gt; select host,user,password from mysql.user;
+-----------------------+--------+-------------------------------------------+
| host                  | user   | password                                  |
+-----------------------+--------+-------------------------------------------+
| localhost             | root   |                                           |
| localhost.localdomain | root   |                                           |
| 127.0.0.1             | root   |                                           |
| ::1                   | root   |                                           |
| localhost             | vaster | *6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9 |
| %                     | beebol | *916F3978962A2C47E1B63DCD7F3D711EE1484228 |
+-----------------------+--------+-------------------------------------------+
6 rows in set (0.00 sec)
mysql&gt; DROP USER vaster@'localhost';
Query OK, 0 rows affected (0.00 sec)

mysql&gt; select host,user,password from mysql.user;
+-----------------------+--------+-------------------------------------------+
| host                  | user   | password                                  |
+-----------------------+--------+-------------------------------------------+
| localhost             | root   |                                           |
| localhost.localdomain | root   |                                           |
| 127.0.0.1             | root   |                                           |
| ::1                   | root   |                                           |
| %                     | beebol | *916F3978962A2C47E1B63DCD7F3D711EE1484228 |
+-----------------------+--------+-------------------------------------------+
5 rows in set (0.00 sec)</pre>
用drop user  成功将用户删除了，现在删除了，但其它终端还有vaster还登录着，已经登录的vaster用户还能正常使用吗？
<pre class="lang:default decode:true">[root@localhost ~]# mysql -uvaster -p
Enter password: 
.....
Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.
mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| beebolblog         |
| test               |
+--------------------+
2 rows in set (0.00 sec)

mysql&gt;</pre>
答案是肯定的，root删除打开着的会话用户，会话不会主动关闭，只有当用户退出会话后然后再登录就不行了。

那么，如何更改密码呢？

1、用mysqladmin可以更改，但必须具有SUPER权限

<span style="color: #ff0000;">修改其他账号密码应该具有什么权限？我把mysql.user表中的Super_priv设置为Y就可以用mysqladmin更改其它用户的密码了。</span>

2、还有就是用set password方法：
<pre class="lang:default decode:true">mysql&gt; set password for vaster@'localhost'=PASSWORD('654321');
Query OK, 0 rows affected (0.00 sec)</pre>
3、使用grant来更改密码：
<pre class="lang:default decode:true">mysql&gt; GRANT USAGE ON *.* TO 'vaster'@'localhost' IDENTIFIED BY '123456';
Query OK, 0 rows affected (0.00 sec)</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>564</wp:post_id>
		<wp:post_date><![CDATA[2013-10-10 21:28:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-10 13:28:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e7%94%a8%e6%88%b7%e8%b4%a6%e6%88%b7%e7%ae%a1%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="grant"><![CDATA[grant]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysqladmin"><![CDATA[mysqladmin]]></category>
		<category domain="post_tag" nicename="revoke"><![CDATA[revoke]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[480]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql truncate快速删除表数据</title>
		<link>http://www.itopers.com/?p=570</link>
		<pubDate>Fri, 11 Oct 2013 15:34:19 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=570</guid>
		<description></description>
		<content:encoded><![CDATA[这里以mysql5.5说明，不同版本会有些不同，但不会有太大区别。

TRUNCATE TABLE就是清空数据表，它需要数据库的DROP权限。从逻辑上，它类似DELETE语句删除所有数据表数据。它是通过DROP TABLE和CREATE TABLE语句来实现高效清空数据，原因是它绕过了DML数据删除方法，所以就无法回滚，也无法导致ON DELETE触发器，在Innodb数据表中不能使用亲子外键关系。

TRUNCATE TABLE虽然是类似删除，它仍然被列为是一个DDL语句。它主要如下几点不同于DELETE语句：

1、TRUNCATE TABLE就是DROP表，然后重新CREATE表，所以比一行行删除要快得多，由其是非常大的表；

2、TRUNCATE TABLE的提交方式是无法回滚的；

3、TRUNCATE TABLE在Innodb表执行时，如果和其它表有外键约束，或引用表，就会执行失败。但同一个表内的列约束是可以的。

4、DELETE语句删除会返回影响数据行，但TRUNCATE TABLE不会返回任务信息；

5、只要一个表的表结构文件tbl_name.frm还是好的，利用TRUNCATE TABLE就可以重新创建表，尽管是数据文件和索引文件都坏了；

6、TRUNCATE TABLE数据表之后，AUTO_INCREMENT数据列会重新开始计数，一般DELETE不会。

7、当在分区表中使用TRUNCATE TABLE时，会DROP和重新CREATE数据文件及索引文件，但分区定义文件不受影响；

8、TRUNCATE TABLE不能触发ON DELETE触发器。

如下是操作实例：
<pre class="lang:default decode:true">mysql&gt; select count(*) from billing_ldj;
+----------+
| count(*) |
+----------+
|     3251 | 
+----------+
1 row in set (0.00 sec)

mysql&gt; truncate table billing_ldj;
ERROR 1105 (HY000): MyISAM table 'billing_ldj' is in use (most likely by a MERGE table). Try FLUSH TABLES.
mysql&gt; flush tables;
Query OK, 0 rows affected (0.03 sec)

mysql&gt; truncate table billing_ldj;
Query OK, 0 rows affected (0.06 sec)

mysql&gt; select count(*) from billing_ldj;              
+----------+
| count(*) |
+----------+
|        0 | 
+----------+
1 row in set (0.00 sec)</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>570</wp:post_id>
		<wp:post_date><![CDATA[2013-10-11 23:34:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-11 15:34:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql-truncate%e5%bf%ab%e9%80%9f%e5%88%a0%e9%99%a4%e8%a1%a8%e6%95%b0%e6%8d%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="create-table"><![CDATA[CREATE TABLE]]></category>
		<category domain="post_tag" nicename="delete"><![CDATA[DELETE]]></category>
		<category domain="post_tag" nicename="drop-table"><![CDATA[DROP TABLE]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="truncate-table"><![CDATA[TRUNCATE TABLE]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1924]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Python升级及注意事项</title>
		<link>http://www.itopers.com/?p=574</link>
		<pubDate>Mon, 14 Oct 2013 14:26:35 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=574</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center">        由于我使用Django-1.4.2进行Web开发，需要Python2.5以上版本才支持，Rhel6以下的系统默认Python版本为2.4于是我需要对Python进行升级了。如果不使用虚拟环境，直接将默认的python版本修改成自己需要的要注意哪些地方呢？</p>
<p style="text-align: left;" align="center"><b style="font-size: 1em;">安装新python</b></p>

<pre class="lang:default decode:true"># tar -zxvf Python-2.7.5.tgz
# cd Python2.7.5
# ./configure --prefix=/usr/local/python2.7
# make &amp;&amp; make install</pre>
<p align="left">( 如果在安装过程中报错，一般都是由于缺少系统包导致，用yum安装上即可 )</p>
<p align="left">安装完成后，路径在/usr/local/python2.7下，如果没选择路径，默认安装在/usr/local/lib/python2.7下</p>

<h4 align="left"><b>安装后查看python版本(发现还是旧的版本)</b></h4>
<pre class="lang:default decode:true"># python -V
Python 2.4.3</pre>
<h4 align="left"><b>查看python命令所在目录</b></h4>
<pre class="lang:default decode:true"># whereis python
python: /usr/bin/python2.4  /usr/bin/python  /usr/lib/python2.4 /usr/include/python2.4 /usr/share/man/man1/python.1.gz</pre>
<h4 align="left"><b>备份原来的python命令</b></h4>
<pre class="lang:default decode:true">mv /usr/bin/python /usr/bin/python2.4.3.bak20131014</pre>
<h4> <b>建立软链接，使系统默认的python指向python2.7</b></h4>
<pre align="left">#ln -s /usr/local/python2.7/bin/python2.7  /usr/bin/python</pre>
<h4 align="left"><b>查看版本，切换成功</b></h4>
<pre class="lang:default decode:true"># python -V
Python 2.7.5</pre>
<h4> <b>修改yum的配置</b></h4>
<p align="left">因为yum是用python写的，如果直接升级之后，可能会导致yum不能正常使用，如下如下提示：</p>

<pre align="left"> # vi /usr/bin/yum</pre>
<p align="left">将#/usr/bin/python修改为#/usr/bin/python2.4，保存修改。修改完成后yum即可正常使用</p>

<h3 align="left"><b>注意和建议</b></h3>
<pre class="lang:default decode:true  crayon-selected">1. 我们在使用python做开发时，最好的办法是使用virtualenv来创建一个虚拟环境运行你的程序，即使你有多个python开发环境，也可以非常轻松地运行在一台机器上。
2. 在安装自己需要的python版本时，最后放在新的目录里，不要替换原来默认的python目录及下面的文件
3. 如果还有其他python写的系统工具不能用，可参照修改yum的方法进行修改。
4. 如果以后要用yum安装python相关包，会安装到python2.4下，而不是升级的目录下。最好用源码安装了。</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>574</wp:post_id>
		<wp:post_date><![CDATA[2013-10-14 22:26:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-14 14:26:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[python%e5%8d%87%e7%ba%a7%e5%8f%8a%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="python%e5%ae%89%e8%a3%85"><![CDATA[python安装]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[571]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rsync同步指定正则文件（含子目录）</title>
		<link>http://www.itopers.com/?p=580</link>
		<pubDate>Sun, 13 Oct 2013 14:37:03 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=580</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center">       前阵子做日志备份，把各个服务器上的日志同步到日志服务器上做备份，刚开始比较暴力，把所有压缩好的*gz文件全部传送到日志备份服务器上。后来，发现这种方式非常不好，一旦备份的目录发生改变，服务器上又会把它所有的*gz文件全部再传一遍，即浪费时间又给服务i/o产生不必要的压力，后来想只同步某天的*gz文件。</p>

<h4> 需求描述：</h4>
有一个类似于这样的目录结构，子目录的个数是不确定的
<pre class="lang:default decode:true">[root@IND_ tlbb]# tree
.
|-- ReadMe.txt
| |-- Audit
| `-- Money_2013-09-10.tgz
|-- Audit_2013-09-10.tgz
`-- Install</pre>
我想同步*.py结尾的东东

同步完成后
<pre class="lang:default decode:true ">[root@IND_ tlbb]# tree
.
|-- Audit
| `-- Money_2013-09-10.tgz
`-- Audit_2013-09-10.tgz</pre>
<h4> 方式1：（失败）</h4>
rsync -auvz --include="*${YDate}*gz " ./ 192.168.137.22::tlbb

<strong>结果：</strong>会把所有的文件都同步过去了，连Install都同步过去了
<h4>方式2：</h4>
rsync -aruvz --include="*${YDate}*gz" --include="*/" --exclude="*" ./* 192.168.137.22::tlbb

<strong>结果：</strong>能把今天所有的gz文件都正常传过去喽，先允许所有的匹配的gz文件，再允许所有子目录，最后拒绝所有其他的。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>580</wp:post_id>
		<wp:post_date><![CDATA[2013-10-13 22:37:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-13 14:37:03]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[rsync%e5%90%8c%e6%ad%a5%e6%8c%87%e5%ae%9a%e6%ad%a3%e5%88%99%e6%96%87%e4%bb%b6%ef%bc%88%e5%90%ab%e5%ad%90%e7%9b%ae%e5%bd%95%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="rsync"><![CDATA[rsync]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2881]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Error:No suitable device found: no device found for connection &quot;System eth1&quot;</title>
		<link>http://www.itopers.com/?p=582</link>
		<pubDate>Wed, 09 Oct 2013 14:39:15 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=582</guid>
		<description></description>
		<content:encoded><![CDATA[<p align="left">我在Centos6u3系统上执行重启网卡命令的时候，提示如题的错误，</p>
<p align="left"><b>解决方法：</b></p>
<p align="left">1、删除/etc/udev/rules.d/70-persistent-net.rules文件，然后重启系统。</p>
<p align="left">2、    (1)  ifconfig 查看网卡eth1的HWADDR的值（MAC地址）</p>
<p align="left">           (2)  修改/etc/sysconfig/network-script/ifcfg-eth0中的HWADDR值为查看到的MAC地址</p>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>582</wp:post_id>
		<wp:post_date><![CDATA[2013-10-09 22:39:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-09 14:39:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[errorno-suitable-device-found-no-device-found-for-connection-system-eth1]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e5%8d%a1"><![CDATA[网卡]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[706]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux虚拟机克隆后网络问题</title>
		<link>http://www.itopers.com/?p=584</link>
		<pubDate>Sat, 12 Oct 2013 14:42:12 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=584</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center"><b>环境：Virtualbox+RHEL 6 x64</b></p>
<p style="text-align: left;" align="left">用VirtualBox的vboxmanager克隆的虚拟机，操作系统RHEL6，启动后发现网卡不能用了。</p>
<p style="text-align: left;" align="left">重启网络服务，报以下错误:</p>

<pre align="left" style="text-align: left;">Bringing up interface eth0: Device eth0 does not seem to be present, delaying initialization. [FAILED]</pre>
<p style="text-align: left;" align="left">在RHEL5里也发生类似事情，</p>
<p style="text-align: left;" align="left"><b>原因分析：</b>因为复制虚拟机MAC会重新生成，但是操作系统的MAC却写在ifcfg-ethx里，造成了不一致，所以不能启动网络接口，在RHEL5里可以使用kudzu或者注释网卡配置文件的MAC字段来解决这个问题。但是在RHEL6里，kudzu已经被hal服务取代了。虽然lspci能够正常认到网卡，但是却无法使用/etc/init.d/network restart来启动服务。尝试注释ifcfg-eth0的MAC字段，还是报错。</p>
<p style="text-align: left;" align="left"><b>方法1：</b></p>
<p style="text-align: left;" align="left">查看了下udev的规则，发现了问题的所在。</p>

<pre class="lang:default decode:true"># cat /etc/udev/rules.d/70-persistent-net.rules
SUBSYSTEM==”net”, ACTION==”add”, DRIVERS==”?*”, ATTR{address}==”08:00:27:16:31:11″, ATTR{type}==”1″, KERNEL==”eth*”, NAME=”eth0″
# net device ()
SUBSYSTEM==”net”, ACTION==”add”, DRIVERS==”?*”, ATTR{address}==”08:00:27:32:66:63″, ATTR{type}==”1″, KERNEL==”eth*”, NAME=”eth1″</pre>
原来UDEV这里把克隆前的MAC当成了当前虚拟机的eth0 MAC，而重新生成的08:00:27:32:66:63是eth1的MAC。
<p style="text-align: left;" align="left">解决这个问题，只要删除旧的UDEV配置，修改为：</p>

<pre class="lang:default decode:true"># cat /etc/udev/rules.d/70-persistent-net.rules
SUBSYSTEM==”net”, ACTION==”add”, DRIVERS==”?*”, ATTR{address}==”08:00:27:32:66:63″, ATTR{type}==”1″, KERNEL==”eth*”, NAME=”eth0″</pre>
<p style="text-align: left;" align="left">重启network服务有时可以有时不行，重启系统就一切OK！试过多次！</p>

<pre class="lang:default decode:true"># /etc/init.d/network restart
# ifconfig eth0
eth0 Link encap:Ethernet HWaddr 08:00:27:32:66:63</pre>
<p style="text-align: left;" align="left"><b>方法2：</b></p>
<p style="text-align: left;" align="left">最简单的解决办法是直接删除70-persistent-net.rules配置文件</p>

<pre class="lang:default decode:true"># rm -fr /etc/udev/rules.d/70-persistent-net.rules
# reboot</pre>
<p style="text-align: left;" align="left">重启系统就ok了，系统会自动生成一个新的。</p>
<p style="text-align: left;" align="left"><b>方法3：</b></p>

<ol style="text-align: left;">
	<li>
<pre class="lang:default decode:true crayon-selected">查看vmx文件中ethernet0.generatedAddress
把/etc/sysconfig/network-scripts/ifcfg-eth0文件中的HWADDR修改为第一步查看的地址
# service network restart</pre>
&nbsp;</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>584</wp:post_id>
		<wp:post_date><![CDATA[2013-10-12 22:42:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-12 14:42:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e8%99%9a%e6%8b%9f%e6%9c%ba%e5%85%8b%e9%9a%86%e5%90%8e%e7%bd%91%e7%bb%9c%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e5%8d%a1"><![CDATA[网卡]]></category>
		<category domain="post_tag" nicename="%e8%99%9a%e6%8b%9f%e6%9c%ba"><![CDATA[虚拟机]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[634]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>区分wsgi、uWSGI、uwsgi、php-fpm、CGI、FastCGI的概念</title>
		<link>http://www.itopers.com/?p=586</link>
		<pubDate>Tue, 15 Oct 2013 14:44:35 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=586</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center">最近又开始捣腾Django了，遇到几个概念（也是有同事正好问起），对这些东东的概念也挺模糊，于是在网上找了些资料看，总结如下：</p>

<h3><b>wsgi</b><b>：一种实现python解析的通用接口标准/协议</b></h3>
跟wsgi一样概念的有Ruby语言的Rack，可以认为wsgi是一种通用的接口标准或者接口协议，实现了python web程序与服务器之间交互的通用性。有了这个东西，web.py或者bottle或者django等等的python web开发框架，就可以轻松地部署在不同的web server上了，不需要做任何特殊配置（也需要一些小小的配置调整）
<h3><b>uwsgi:</b><b>同WSGI一样是一种通信协议</b></h3>
uwsgi协议是一个uWSGI服务器自有的协议，它用于定义传输信息的类型（type of information），每一个uwsgi packet前4byte为传输信息类型描述，它与WSGI相比是两样东西。
<h3><b>uWSGI </b><b>：一种python web server或称为Server/Gateway</b></h3>
uwsgi类似tornadoweb或者flup，是一种python web server，uWSGI是实现了uwsgi和WSGI两种协议的Web服务器，负责响应python 的web请求。因为apache也好，nginx也罢，它们自己都没有解析动态语言如php的功能，而是分派给其他模块来做，比如apache就可以说内置了php模块，支持的非常爽，让人感觉好像apache就支持php一样。uwsgi实现了WSGI协议、uwsgi、http等协议。 Nginx中HttpUwsgiModule的作用是与uWSGI服务器进行交换。类似的有：flup
<h3><b>php-fpm</b><b>：</b><em><b>php</b></em><b> </b><b>fastcgi</b><b>进程管理器</b></h3>
Php-fpm全称是php fastcgi process manager即php fastcgi进程管理器，相比fastcgi静态的唤起cgi，fpm能根据访问的压力动态的唤起cgi进程和销毁以到达动态的调整cgi数量，这样可以有效的使用内存。除此之外还有其它的一些优点，比如，fpm还可以平滑的重载php配置；由于fpm是使用Unix-Socket来和服务器通讯，所以也不用再配置cgi端口；fpm有更好的状态输出和slowlog日志，502的时候能给出更多的错误细节。
<h3><b>CGI</b></h3>
CGI是一个通用的web标准，可以粗陋的认为CGI就是一种用任意语言写Web程序的标准。
<h3><b>FastCGI</b></h3>
FASTCGI是Web服务器（ex:nginx）和语言解释器(ex:uWsgi)两者底层的通信协议的规范，是对CGI的开放的扩展。
<h3><b>Php-FastCGI (</b><b>用于处理php请求的东东)的工作过程是：</b></h3>
1、Web Server 启动时载入FastCGI进程管理器（IIS ISAPI或Apache Module）;

2、FastCGI进程管理器自身初始化，启动多个CGI解释器进程 (在任务管理器中可见多个php-cgi.exe)并等待来自Web Server的连接。

3、当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi.exe。

4、FastCGI子进程完成处理后将标准输出和错误信息从同一连接返回Web Server。当FastCGI子进程关闭连接时，请求便告处理完成。FastCGI子进程接着等待并处理来自FastCGI进程管理器（运行在 WebServer中）的下一个连接。 在正常的CGI模式中，php-cgi.exe在此便退出了。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>586</wp:post_id>
		<wp:post_date><![CDATA[2013-10-15 22:44:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-15 14:44:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%8c%ba%e5%88%86wsgi%e3%80%81uwsgi%e3%80%81uwsgi%e3%80%81php-fpm%e3%80%81cgi%e3%80%81fastcgi%e7%9a%84%e6%a6%82%e5%bf%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[7826]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux】磁盘空间不释放问题</title>
		<link>http://www.itopers.com/?p=597</link>
		<pubDate>Wed, 16 Oct 2013 10:10:04 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=597</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center">         在工作中，我们也许会遇到这样的问题，发现某个磁盘空间快满了，于是，找到一些无用的大文件将其删除后，发现磁盘空间还是没有释放掉，这是什么原因呢？如何解决呢？下面来重现一下整个过程：</p>
<p align="left">查看磁盘空间情况</p>

<pre class="lang:default decode:true"> [@74.114 var]# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/xvda2            9.7G  284M  8.9G   4% /
/dev/xvda1            251M   13M  226M   6% /boot
none                  1.1G     0  1.1G   0% /dev/shm
/dev/xvda10            97G   60G   33G  65% /home
/dev/xvda3            3.9G  2.7G  1.1G  72% /usr
/dev/xvda5            3.9G  3.6G   77M  98% /var</pre>
var分区快满了，找到大文件，并删除
<pre class="lang:default decode:true">[@74.114 var]# cd /var
[@74.114 var]# du –sh *
3.3G    account
111M    cache
53M     log
0       mail
156K    run
344K    spool
…
[@74.114 var]# rm –rf account/*</pre>
<p align="left">df –h 看一下，却依然是/var 为98%，一点都没释放。</p>

<pre class="lang:default decode:true ">[@74.114 var]# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/xvda2            9.7G  284M  8.9G   4% /
/dev/xvda1            251M   13M  226M   6% /boot
none                  1.1G     0  1.1G   0% /dev/shm
/dev/xvda10            97G   60G   33G  65% /home
/dev/xvda3            3.9G  2.7G  1.1G  72% /usr
/dev/xvda5            3.9G  3.6G   77M  98% /var</pre>
但du –sh * 却显示没有大文件了
<pre class="lang:default decode:true">[@74.114  ~]# cd /var &amp;&amp; du –sh *
120K    account
111M    cache
53M     log
0       mail
156K    run
344K    spool
…</pre>
<p align="left"><strong>猜想1：应该是删除的内容依然被进程占用，内存没释放，所以用lsof |grep – I deleted 看了一下，发现如下：</strong></p>

<pre class="lang:default decode:true">[@74.114 account]# lsof |grep -i deleted
listserve  4833           blty    0u      CHR      136,2                    4 /dev/pts/2 (deleted)
listserve  4833           blty    1u      CHR      136,2                    4 /dev/pts/2 (deleted)
listserve  4833           blty    2u      CHR      136,2                    4 /dev/pts/2 (deleted)
Billing_P 16989           blty    0u      CHR      136,0                    2 /dev/pts/0 (deleted)
Billing_P 16989           blty    1u      CHR      136,0                    2 /dev/pts/0 (deleted)
Billing_P 16989           blty    2u      CHR      136,0                    2 /dev/pts/0 (deleted)
Billing_P 16990           blty    0u      CHR      136,0                    2 /dev/pts/0 (deleted)
Billing_P 16990           blty    1u      CHR      136,0                    2 /dev/pts/0 (deleted)
Billing_P 16990           blty    2u      CHR      136,0                    2 /dev/pts/0 (deleted)</pre>
<p align="left">发现时billing程序占用没释放，所以联系项目经理将Billing_P停掉，重启，依然没有释放任何空间。无果</p>
<p align="left"><strong>猜想2：删除的文件是accout目录下的pacct文件，应该是由psacct产生和管理，重启这个程序后是否会OK呢？解决</strong></p>

<pre align="left">[@74.114 account]# /etc/init.d/psacct restart</pre>
<p align="left">最后看一下磁盘空间，磁盘空间释放鸟~~</p>

<pre class="lang:default decode:true">[@74.114 var]# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/xvda2            9.7G  284M  8.9G   4% /
/dev/xvda1            251M   13M  226M   6% /boot
none                  1.1G     0  1.1G   0% /dev/shm
/dev/xvda10            97G   60G   33G  65% /home
/dev/xvda3            3.9G  2.7G  1.1G  72% /usr
/dev/xvda5            3.9G  100M   3.6M  4% /var</pre>
<strong> 小建议：</strong>
<ol>
	<li>以后处理相关问题时，如果发现du 和df 大小不一致的情况，可以通过lsof 查看，也许可以找到一些出现问题的原因，如果还是找不到问题，在允许的情况下不妨试一下重启服务，也许问题就迎刃而解了。</li>
	<li>重启服务得不到解决的情况下，可以通过卸载磁盘分区来试着解决。</li>
	<li>在决定删除某些文件前，最好确定好这个文件被哪些服务使用，先停掉这些服务再删除，这样就很少出现空间释放不了的情况了。</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>597</wp:post_id>
		<wp:post_date><![CDATA[2013-10-16 18:10:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-16 10:10:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91%e7%a3%81%e7%9b%98%e7%a9%ba%e9%97%b4%e4%b8%8d%e9%87%8a%e6%94%be%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="%e7%a3%81%e7%9b%98%e7%a9%ba%e9%97%b4%e6%bb%a1"><![CDATA[磁盘空间满]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1571]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Linux服务器时间/时区设置</title>
		<link>http://www.itopers.com/?p=599</link>
		<pubDate>Thu, 17 Oct 2013 10:12:45 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=599</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center"><b>时区相关操作：</b></p>
（1）查看时区
<pre class="lang:default decode:true ">[root@hk-LDJ-180 ~]# date -R
Wed, 09 Oct 2013 16:56:23 +0800
[root@hk-LDJ-180 ~]# ll /etc/localtime
lrwxrwxrwx 1 root root 34 Oct  9 16:56 /etc/localtime -&gt; /usr/share/zoneinfo/Asia/Chongqing
[root@hk-LDJ-180 ~]# cat /etc/sysconfig/clock
ZONE="Asia/Shanghai"</pre>
（2）修改时区：
<pre class="lang:default decode:true"> [root@hk-LDJ-180 ~]# ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
 [root@hk-LDJ-180 ~]# cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
 [root@hk-LDJ-180 ~]# tzselect</pre>
<b>系统时间的操作 /bin/date:</b>

（1）将时间调整为10月11日凌晨1点55分
<pre class="lang:default decode:true">[root@hk-LDJ-180 ~]# data 10110155</pre>
（2）将系统时间设定成2005年8月8日：
<pre>[root@hk-LDJ-180 ~]# date -s 2005/08/08</pre>
（3）将系统时间设定成下午8点12分0秒：
<pre>[root@hk-LDJ-180 ~]# date -s 20:12:00</pre>
（4）查看系统时间
<pre class="lang:default decode:true ">[root@hk-LDJ-180 ~]# date
Wed Oct  9 17:18:33 CST 2013</pre>
（5）查看utc时间
<pre class="lang:default decode:true">[root@hk-LDJ-180 ~]# date –u
Wed Oct  9 09:18:39 CST 2013</pre>
<b>硬件时间的操作 /sbin/hwclock:</b>

（1）更新机器的硬件时间。
<pre>[root@hk-LDJ-180 ~]# hwclock --adjust</pre>
（2）重置硬件时钟用
<pre>[root@hk-LDJ-180 ~]# hwclock --set --date=mm/dd/yy hh:MM:ss" (重启后会失效)</pre>
（3）查看硬件时钟 (换算后的)
<pre>[root@hk-LDJ-180 ~]# hwclock –show</pre>
( 4 ) BIOS中实际的时间
<pre>[root@hk-LDJ-180 ~]# hwclock –localtime</pre>
<b>系统时间与硬件时间</b>

（1）将硬件时钟系统时间同步到 Linux 操作系统时间的命令为：
<pre>[root@hk-LDJ-180 ~]# /sbin/hwclock --hctosys</pre>
（2）将 Linux 操作系统时间同步到硬件时钟系统时间的命令为：
<pre>[root@hk-LDJ-180 ~]# /sbin/hwclock --systohc</pre>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>599</wp:post_id>
		<wp:post_date><![CDATA[2013-10-17 18:12:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-17 10:12:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%97%b6%e9%97%b4%e6%97%b6%e5%8c%ba%e8%ae%be%e7%bd%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="%e6%97%b6%e5%8c%ba%e8%ae%be%e7%bd%ae"><![CDATA[时区设置]]></category>
		<category domain="post_tag" nicename="%e6%97%b6%e9%97%b4%e8%ae%be%e7%bd%ae"><![CDATA[时间设置]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[494]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【总结】linux系统时间和硬件时钟问题</title>
		<link>http://www.itopers.com/?p=601</link>
		<pubDate>Fri, 18 Oct 2013 10:15:08 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=601</guid>
		<description></description>
		<content:encoded><![CDATA[<strong style="font-size: 1.5em;">一、弄清几个概念：</strong>
<h3 align="left"><strong>1. “</strong><strong>系统时间”与“硬件时间”</strong></h3>
<p align="left">系统时间: 一般说来就是我们执行 date 命令看到的时间，linux系统下所有的时间调用（除了直接访问硬件时间的命令）都是使用的这个时间。该时间为<a title="Linux" href="http://www.centos.bz/tag/linux/">Linux</a> 内核的时钟系统所维护，并且被定时中断程序所驱动，该时间仅当Linux 系统运行过程中有意义。该系统时间表示为以UTC（通用协调时间，Universal Time Coordinated） 计算，自1970 年1 月1 日0时0 分0 秒起至当前时刻所经过的秒数（该数字不是整数，以小数方式表示精度）。</p>
<p align="left">硬件时钟系统：该时钟系统的运行独立于任何系统控制程序，在CPU 内部运行，既使系统断电，该时钟系统仍然保持运行。硬件时钟系统由主板电池供电来维持运行，系统开机时要读取这个时间。此时钟系统常常被称为实时时钟系统（RTC）、 BIOS 时钟系统或CMOS 时钟系统。</p>

<h3 align="left"><strong>2. “UTC</strong><strong>时间”与“本地时间”</strong><strong></strong></h3>
<p align="left">UTC时间：Coordinated Universal 8 e2 i( H7 t0 ^/ ^Time 世界协调时间（又称世界标准时间、世界统一时间），在一般精度要求下，它与GMT（Greenwich Mean Time，格林威治标准时间）是一样的，其实也就是说 GMT≈UTC，但 UTC 是以原子钟校准的，更精确。</p>
<p align="left">本地时间：由于处在不同的时区，本地时间一般与UTC是不同的，换算方法就是：本地时间 = UTC + 时区 或 UTC = 本地时间 - 时区</p>
<p align="left">时区东为正，西为负，例如在中国，本地时间都使用北京时间，在linux上显示就是 CST（China Standard Time，中国标准时，注意美国的中部标准时Central Standard Time也缩写为CST，与这里的CST不是一回事！），时区为东八区，也就是 +8 区，所以 CST=UTC+(+8小时) 或 UTC=CST-(+8小时)。</p>
<p align="left">UTC=false —&gt; 硬件时钟是否为 UTC 或者说 GMT 时钟</p>
<p align="left">把硬件时钟设置为 UTC 的好处就是他能自动设置夏时制，缺点是，在安装有多重<a href="http://soft.chinabyte.com/os/" target="_blank">操作系统</a>启动的机器上，在另外的操作 系统上时钟会错误。</p>
<p align="left"></p>

<h2><strong>二、linux与windows双系统间的时间同步</strong><strong></strong></h2>
<p align="left">      系统启动和关闭时，硬件时间与系统时间之间的同步有两种方式(假设在中国，用CST代表本地时间)：</p>
<strong>方式A: 使用UTC（对linux就是 /etc/sysconfig/clock 中 UTC=true）</strong><strong></strong>
<p align="left">开机: BIOS-------&gt;UTC（将BIOS中的时间看成是UTC）------(时区变化)-----&gt;CST</p>
<p align="left">关机: CST -------(时区变化)-----&gt;UTC-------存储到------&gt;BIOS</p>
<strong>方式B: 不使用UTC（对linux就是 /etc/sysconfig/clock 中 UTC=false）</strong><strong></strong>
<p align="left">开机: BIOS---------------------&gt;CST（将BIOS中的时间看成是CST）</p>
<p align="left">关机: CST ---------存储到------&gt;BIOS</p>
<p align="left">   通过设定 /etc/sysconfig/clock，linux可以支持这两种方式，然而windows只支持方式B（至少是默认支持B，而我不知道怎么能让它支 持A），那么在双系统情况下，如果linux设成A方式，那么在linux与windows系统切换时一定会造成时间混乱的，解决办法就是将linux中 的UTC禁用，也设成B方式就可以了。</p>
<p align="left"> 注：可以通过 hwclock --hctosys 来利用硬件时间来设置系统时间（注意不是简单的复制BIOS中的时间为系统时间，要看是否使用UTC，如果使用的话则要做时区换算），通过 hwclock --systohc 来根据系统时间设置硬件时间（也要看是否启用UTC来决定是否做时区换算）。</p>
<p align="left">总 之，不论使用 --systohc 还是 --hctosys，同步后直接运行不带参数的 hwclock 得到的时间与直接运行 date 得到的时间应该一致，这个时间是否就是BIOS中的时间（hwclock --localtime)那就不一定了，如果启用了UTC就不是，没启用UTC就是。</p>
<p align="left">而且还要注意：在系统中手动使用 hwclock hwclock --set --date='yyyy-mm-dd' 来设置BIOS时间只在系统运行时有效，因为当系统关闭时，还会按设定好的方式根据系统时间来重设BIOS时间的，于是手动的设置便被覆盖掉了。</p>
<p align="left"></p>

<h2><strong>三、一些理解和总结</strong><strong> </strong></h2>
<h3 align="left"><strong>1</strong><strong>）/etc/sysconfig/clock</strong><strong></strong></h3>
<p align="left">只对 hwclock 命令有效，且只在系统启动和关闭的时候才有用（修改了其中的 UTC=true 到 UTC=false 的前后，执行 hwclock --systohc –localtime或重启系统后才生效）；#待考察？</p>
<p align="left">在 /etc/sysconfig/clock 中 UTC=false 时，date、hwclock、hwclcok --localtime 输出的时间应该都一致，且此时 hwclock --utc是没有意义的；</p>
<p align="left">在 /etc/sysconfig/clock 中 UTC=ture 时，date、hwclock 的输出是一致的，hwclock --localtime 的输出则是UTC时间；</p>
<p align="left">注：如果设置 UTC=false 并重启系统后,执行一些命令结果如下：</p>
<p align="left"># date</p>
<p align="left">2009年 12月 07日 星期一 19:26:29 CST</p>
<p align="left"># date -u</p>
<p align="left">2009年 12月 07日 星期一 11:26:29 UTC
# hwclock</p>
<p align="left">2009年12月07日 星期一 19时26分30秒 -0.442668 seconds
# hwclock –utc</p>
<p align="left">2009年12月08日 星期二 03时26分31秒 -0.999091 seconds
# hwclock --localtime</p>
<p align="left">2009年12月07日 星期一 19时26分32秒 -0.999217 seconds</p>
<p align="left">可见，如果不使用UTC，BIOS时间就是系统本地时间，而且注意这时执行 hwclock --utc 得到的结果没有任何意义，因为这里我们已经禁用了UTC，而且也明显不符合“本地时间=UTC+时区”的关系。</p>

<h3 align="left"><strong>2</strong><strong>）/etc/rc.d/rc.sysinit </strong></h3>
<p align="left">run once at boot time，其中有从硬件时钟同步时间到系统时间的操作；</p>

<h3 align="left"><strong>3</strong><strong>）/etc/localtime</strong></h3>
<p align="left">这个文件用来设置系统的时区，将 /usr/share/zoneinfo/ 中相应文件拷贝到/etc下并重命名为 localtime 即可修改时区设置，而且这种修改对 date 命令是即时生效的。不论是 date 还是 hwclock 都会用到这个文件，会根据这个文件的时区设置来进行UTC和本地之间之间的换算。</p>

<h3 align="left"><strong>4</strong><strong>）输出不带时区的时间</strong></h3>
<p align="left"> 设置export LANG=C ，然后再运行 hwclock 就没有什么CST了，免得时区误导你；</p>

<h3 align="left"><strong>5</strong><strong>）hwclock命令</strong></h3>
<p align="left">直接调用 /sbin/hwclock 显示的时间就是 BIOS 中的时间吗？未必！这要看 /etc/sysconfig/clock 中是否启用了UTC，如果启用了UTC（UTC=true），显示的其实是经过时区换算的时间而不是BIOS中真正的时间，如果加上 --localtime 选项，则得到的总是 BIOS 中实际的时间.</p>
<p align="left"><b>hwclock --localtime </b></p>
<p align="left">这个输出的结果才是硬件时钟真正的时间。如果输出结果带时区（比如CST），还要看/etc/sysconfig/clock里的UTC参数，如果 UTC=false，那时区有意义；如果 UTC=true，那时区没意义，实际上是UTC时间。</p>
<p align="left"><b>hwclock --utc  </b>很闹腾，还是别看了，你会晕的。。。</p>
<p align="left">系统关闭时会同步系统时间到硬件时钟，系统启动时会从硬件时钟读取时间更新到系统，这2个步骤都要根据 /etc/sysconfig/clock 文件中UTC的参数来设置时区转换。</p>
<p align="left">为了保持系统时间与CMOS时间的一致性，Linux每隔一段时间会将系统时间写入CMOS。由于该同步是每隔一段时间进行的，在执行完 date -s 命令后，如果马上重起系统，修改的时间就有可能没有被写入CMOS。如果要确保修改生效，最好再使用 clock -w 这个命令将系统时间强行写入CMOS。【关于隔一段时间会将系统时间写入硬件的问题，经过测试，好像没有自动写入，准确性待考察】</p>

<h3 align="left"><strong>6</strong><strong>）实际案例分析：修改了  /etc/sysconfig/clock 中UTC参数但系统未正常关闭的情况</strong></h3>
<p align="left">修改 /etc/sysconfig/clock 文件后，如果系统内核突然崩溃，然后直接按电源重启，则系统没有进行 系统时间到硬件时钟的 同步；但是 系统启动时，又根据 /etc/sysconfig/clock 中UTC的参数，来同步硬件时钟到系统，这时就会出现时间问题：</p>
<p align="left">0）假设系统的时区为CST（UTC+8）；</p>
<p align="left">1）假设原 /etc/sysconfig/clock 中 UTC=true，修改成 UTC=false；</p>
<p align="left">2）如果此时系统未正常关机，系统时间未按参数 UTC=false 同步时间到硬件时钟（没有+8小时）；</p>
<p align="left">3）但系统被按电源重启后，系统读取到UTC=false，认为硬件时钟为CST时间，直接用于系统时间；</p>
<p align="left">4）那么此时，系统时间将少了8小时。</p>
<p align="left">部分转自：<a href="http://www.sealinger.com/archives/221/">http://www.sealinger.com/archives/221/</a></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>601</wp:post_id>
		<wp:post_date><![CDATA[2013-10-18 18:15:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-18 10:15:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%80%bb%e7%bb%93%e3%80%91linux%e7%b3%bb%e7%bb%9f%e6%97%b6%e9%97%b4%e5%92%8c%e7%a1%ac%e4%bb%b6%e6%97%b6%e9%92%9f%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="%e6%97%b6%e5%8c%ba"><![CDATA[时区]]></category>
		<category domain="post_tag" nicename="%e6%97%b6%e9%97%b4"><![CDATA[时间]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1048]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>搭建自己的NTP服务器</title>
		<link>http://www.itopers.com/?p=603</link>
		<pubDate>Sat, 19 Oct 2013 10:18:07 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=603</guid>
		<description></description>
		<content:encoded><![CDATA[一般情况下，线上服务器对时间都要求时间准确，否则可能导致业务出现异常，所以我们需要做时间同步。我们可以使用网络上公开的时间同步服务器，也可以搭建自己的时间同步服务器。为了管理方便，我们可以尝试自己搭建一个NTP服务器。下面介绍一下搭建自己的时间同步服务器的方法：

前提：

1. 这台NTP服务器必须能连接上网络，并且能与权威的公网时间同步服务器进行同步
2. 内网的其他机器每小时向这台NTP服务器进行同步时间

<strong>一、配置NTP服务器</strong>
1. 修改配置 /etc/ntp.conf
#设置这台机器向公网的权限ntp服务器进行同步（prefer意味着首选IP地址）
<pre class="lang:default decode:true ">server 220.181.20.114 prefer
server 0.asia.pool.ntp.org
server 1.asia.pool.ntp.org
server 2.asia.pool.ntp.org</pre>
#记录上次的NTP server与上层NTP server联接所花费的时间

driftfile /var/lib/ntp/drift #设置默认策略为允许任何主机进行时间同步
restrict default ignore
#设置允许访问此时间服务器的时间服务的IP地址
restrict 127.0.0.1
restrict -6 ::1
restrict 10.52.140.0 mask 255.255.255.0 #允许10.52.140.0 /24子网内主机时间同步
restrict 0.0.0.0 mask 0.0.0.0 nomodify notrap #允许任何主机跟进行时间同步
#指定阶层编号为10，降低其优先度。
fudge 127.127.1.1 stratum 10
#设置ntp日志的path
statsdir /var/log/ntp/
#设置ntp日志文件
logfile /var/log/ntp/ntp.log
2. 启动服务 #/etc/init.d/ntpd restart
<pre class="lang:default decode:true">Shutting down ntpd: [FAILED]
Starting ntpd: [ OK ]</pre>
<strong>二、NTP服务器管理命令</strong>
添加为服务 # chkconfig --level 345 ntpd on
启动 #service ntpd start 或 /etc/rc.d/init.d/ntpd start
停止 # service ntpd stop 或 /etc/rc.d/init.d/ntpd stop
查看本机和上层服务器的时间同步结果
#ntpq –p
可以用来追踪某台时间服务器的时间对应关系
#ntptrace
客户端要和NTP server进行时钟同步。
# ntpdate IP

三、客户端配置
<pre class="lang:default decode:true ">crontab –l |grep ntpdate
1 * * * * /usr/sbin/ntpdate -s 10.52.140.79;/sbin/clock –w</pre>
&nbsp;
每小时与NTP server进行一次时钟同步，并将时间写入硬件]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>603</wp:post_id>
		<wp:post_date><![CDATA[2013-10-19 18:18:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-19 10:18:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e6%90%ad%e5%bb%ba%e8%87%aa%e5%b7%b1%e7%9a%84ntp%e6%9c%8d%e5%8a%a1%e5%99%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="ntp"><![CDATA[NTP]]></category>
		<category domain="post_tag" nicename="%e6%9c%8d%e5%8a%a1%e6%90%ad%e5%bb%ba"><![CDATA[服务搭建]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[904]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>解决ntp的错误：no server suitable for synchronization found</title>
		<link>http://www.itopers.com/?p=605</link>
		<pubDate>Sun, 20 Oct 2013 10:22:02 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=605</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center">今天是VN_TLBB例行更新维护，早上项目组同学说，那些服务器中有一台不能进行时间同步，于是开始排查：</p>
<b>查看时区：</b>
<pre class="lang:default decode:true"># date -R
Wed, 23 Oct 2013 09:07:37 +0700</pre>
<b>尝试进行时间同步：</b>
<pre class="lang:default decode:true"># /usr/sbin/ntpdate 180.148.132.254  
23 Oct 09:07:29 ntpdate[23389]: sendto(180.148.132.254): Success
23 Oct 09:07:30 ntpdate[23389]: sendto(180.148.132.254): Success
23 Oct 09:07:31 ntpdate[23389]: sendto(180.148.132.254): Success
23 Oct 09:07:32 ntpdate[23389]: sendto(180.148.132.254): Success
23 Oct 09:07:33 ntpdate[23389]: no server suitable for synchronization found</pre>
<b>查看一下防火墙，发现没有udp-123的出规则，把规则添加上</b>
<pre class="lang:default decode:true"># iptables -nvL
# iptables –A OUTPUT –p udp –m udp –dport 123</pre>
<b>测试端口是否通，Succeeded表示通了，没有输出任何东西表示不通</b>
<pre class="lang:default decode:true"># nc -zvuw 1 180.148.132.254 123        
Connection to 180.148.132.254 123 port [udp/ntp] succeeded!</pre>
<b>再次尝试时间同步：</b>
<pre class="lang:default decode:true"># ntpdate  180.148.132.254                
23 Oct 09:40:27 ntpdate[10627]: adjust time server 180.148.132.254 offset 0.056238 sec</pre>
<strong>【扩展】</strong>

出现no server suitable for synchronization found 这个错误还有一种原因，就是ntp服务器与客户端版本不一致导致。（这种情况一般是自己搭建的ntp服务器）

<b>查看ntp版本：</b># ntpq -c version

<b>解决办法：（下面是来自ntp官方网站的说明）</b>
<pre class="lang:default decode:true">The behavior of notrust changed between versions 4.1 and 4.2.
In 4.1 (and earlier) notrust meant "Don't trust this host/subnet for time".
In 4.2 (and later) notrust means "Ignore all NTP packets that are not cryptographically authenticated." This forces remote time servers to authenticate themselves to your (client) ntpd</pre>
在ntpserver的配置中的restrict的定义中，把notrust去掉。

&nbsp;

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>605</wp:post_id>
		<wp:post_date><![CDATA[2013-10-20 18:22:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-20 10:22:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a7%a3%e5%86%b3ntp%e7%9a%84%e9%94%99%e8%af%af%ef%bc%9ano-server-suitable-for-synchronization-found]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="ntp%e9%94%99%e8%af%af"><![CDATA[ntp错误]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[392519]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>如何解决no version information available (required by **) 的错误</title>
		<link>http://www.itopers.com/?p=611</link>
		<pubDate>Mon, 21 Oct 2013 11:36:53 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=611</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center">前几天，解决了一个关于问题no version information available (required by **)，今天想起来，还是得记录一下。</p>
<p style="text-align: left;">项目同学说，他们每次用ssh从中控登录到GS上的时候，总是会提示一个no version information available (required by ssh)的错误提示，虽然最终不影响登录，但是，最终还是很影响体验的。所以我尝试着解决了一下这个问题。（由于当时没记录，所以也不记得它当时提示的是哪个so文件了）</p>
<p style="text-align: left;">刚开始看到这个问题，也理不清头绪，不能判断问题出在哪里，于是，只能通过对比的方法来尝试解决这个问题。对比发现其他so文件都正常，就是某一个so大小不一致，于是将它copy到本地，问题解决。</p>
<p style="text-align: left;">最终，我也不知道为什么会出现这个问题，但是，看到网上别人的描述，能判定，一般出现这种情况都是由于版本或文件本身问题或文件不存在等类似原因导致。</p>
<p style="text-align: left;">以下是摘的网上几个例子：</p>
<p style="text-align: left;"></p>
<p style="text-align: left;"><strong>案例1：</strong></p>

<h4 style="text-align: left;">/opt/php/bin/php: /usr/lib/libxml2.so.2: no version information available (required by /opt/php/bin/php)</h4>
<p style="text-align: left;">PHP在CLI模式下执行脚本提示错误：/opt/php/bin/php: /usr/lib/libxml2.so.2: no version information available (required by /opt/php/bin/php)</p>
<p style="text-align: left;">出现这个问题主要是升级过libxml2导致的，/usr/lib/libxml2.so.2链接的版本与php配置中curl的版本不一致。所以可以删除这个版本，即除了php配置中curl其它的链接，将其链接到正确的版本。</p>
<p style="text-align: left;">比如查看版本：</p>
<p style="text-align: left;">lrwxrwxrwx 1 root root 16 Dec 23 14:06 /usr/lib/libxml2.so -&gt; libxml2.so.2.7.6</p>
<p style="text-align: left;">lrwxrwxrwx 1 root root 16 Dec 23 14:06 /usr/lib/libxml2.so.2 -&gt; libxml2.so.2.7.8以上 /usr/lib/libxml2.so.2对应版本为2.7.8，而Phpinfo显示出来的却是2.7.6，所以得删除/usr/lib/libxml2.so.2，重新链接到libxml2.so.2.7.6。</p>
<p style="text-align: left;"># rm /usr/lib/libxml2.so.2</p>
<p style="text-align: left;"># ln -s /usr/lib/libxml2.so.2.7.6 /usr/lib/libxml2.so.2</p>
<p style="text-align: left;"></p>
<p style="text-align: left;"></p>
<p style="text-align: left;"><strong>案例2：</strong></p>

<h4 style="text-align: left;">/usr/local/lib/libxml2.so.2: no version information available错误解决办法</h4>
<p style="text-align: left;">今天在某台vps上执行了下apt-get update&amp;&amp;apt-get upgrade之后再重启uwsgi时候就杯具了，提示/usr/local/lib/libxml2.so.2: no version information available (required by uwsgi)</p>
<p style="text-align: left;">搜索信息时候发现更多碰到这种情况都是php -v时候会出现，而大多的信息都是说libxml的版本不对，重新修改libxml2.so.2的软链接指向即可「ln -s 」。</p>
<p style="text-align: left;">我测试这台vps的php -v果然也提示了一堆/usr/local/lib/libxml2.so.2: no version information available的提示：</p>
<p style="text-align: left;">但通过phpinfo()检查时候发现libxml的版本其实是正确的（我的是编译的libxml2.7.8）：</p>
<p style="text-align: left;">找到另一台正常的VPS查看libxml2.so.2文件大小，发现两台VPS的文件都是一样大小（没有检查MD5）：</p>
<p style="text-align: left;">这时候看到<a href="http://askubuntu.com/questions/105856/php5-libxml2-no-version-information-available-error">一篇文章</a>是说rm /usr/local/lib/libxml2.so*文件即可</p>
<p style="text-align: left;">最终，还是不知道问题原因</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>611</wp:post_id>
		<wp:post_date><![CDATA[2013-10-21 19:36:53]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-21 11:36:53]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3no-version-information-available-required-by-%e7%9a%84%e9%94%99%e8%af%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="no-version-information-available"><![CDATA[no version information available]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[3162]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql日期函数的使用</title>
		<link>http://www.itopers.com/?p=594</link>
		<pubDate>Tue, 29 Oct 2013 09:05:10 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=594</guid>
		<description></description>
		<content:encoded><![CDATA[如下是DAYOFWEEK和WEEKDAY的区别:
<pre class="lang:default decode:true">mysql&gt; SELECT DAYOFWEEK('2013-10-29');
+-------------------------+
| DAYOFWEEK('2013-10-29') |
+-------------------------+
|                       3 |
+-------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT WEEKDAY('2013-10-29');  
+-----------------------+
| WEEKDAY('2013-10-29') |
+-----------------------+
|                     1 |
+-----------------------+
1 row in set (0.00 sec)</pre>
DAYOFWEEK的星期索引是(1 = Sunday, 2 = Monday, ... 7 = Saturday)，所以如上是3，表示是星期二。

WEEKDAY的星期索引是(6 = Sunday, 0 = Monday, ... 5= Saturday)，所以如上是1，表示是星期二。

&nbsp;
<pre class="lang:default decode:true">mysql&gt; SELECT DAYOFMONTH('2013-10-29');
+--------------------------+
| DAYOFMONTH('2013-10-29') |
+--------------------------+
|                       29 |
+--------------------------+
1 row in set (0.00 sec)</pre>
DAYOFMONTH返回一个月的第几天。范围是1-31

&nbsp;
<pre class="lang:mysql decode:true">mysql&gt; SELECT DAYOFYEAR('2013-10-29'); 
+-------------------------+
| DAYOFYEAR('2013-10-29') |
+-------------------------+
|                     302 |
+-------------------------+
1 row in set (0.00 sec)</pre>
DAYOFYEAR是返回一年的第几天，范围是1-366
<pre class="lang:mysql decode:true">mysql&gt; SELECT MONTH('2013-10-29');    
+---------------------+
| MONTH('2013-10-29') |
+---------------------+
|                  10 |
+---------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT DAYNAME('2013-10-29');
+-----------------------+
| DAYNAME('2013-10-29') |
+-----------------------+
| Tuesday               |
+-----------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT MONTHNAME('2013-10-29');
+-------------------------+
| MONTHNAME('2013-10-29') |
+-------------------------+
| October                 |
+-------------------------+
1 row in set (0.00 sec)

mysql&gt; SELECT QUARTER('2013-10-29');  
+-----------------------+
| QUARTER('2013-10-29') |
+-----------------------+
|                     4 |
+-----------------------+
1 row in set (0.00 sec)</pre>
MONTH返回日期的月份。范围是1-31，如果是错误日期将返回NULL

DAYNAME返回日期的星期英文名字，如Tuesday

MONTHNAME返回日期的月份英文名字，如October

QUARTER返回日期所在的季度，如2013-10-29是Q4季度
<pre class="lang:mysql decode:true">mysql&gt; SELECT PERIOD_ADD(201310,1);
+----------------------+
| PERIOD_ADD(201310,1) |
+----------------------+
|               201311 |
+----------------------+
1 row in set (0.00 sec)</pre>
PERIOD_ADD（P,N）增加N个月到时期P(格式为YYMM 或YYYYMM)中以YYYYMM 格式返回值。注意，期间参数P 不是一个日期值。
<pre class="lang:mysql decode:true">mysql&gt; SELECT PERIOD_DIFF(1310,1209);
+------------------------+
| PERIOD_DIFF(1310,1209) |
+------------------------+
|                     13 |
+------------------------+
1 row in set (0.00 sec)</pre>
PERIOD_DIFF（P1，P2）P1与P2之间的月数，P1和p2不是一个日期。

DATE_FORMAT(date,format)

依照 format 字符串格式化 date 值。下面的修饰符可被用于 format 字符串中： 修饰符 含义

%M 月的名字 (January..December)

%W 星期的名字 (Sunday..Saturday)

%D 有英文后缀的某月的第几天 (0th, 1st, 2nd, 3rd, etc.)

%Y 年份，数字的，4 位

%y 年份，数字的，2 位

%X 周值的年份，星期日是一个星期的第一天，数字的，4 位，与 ‘%V’ 一同使用

%x 周值的年份，星期一是一个星期的第一天，数字的，4 位，与 ‘%v’ 一同使用

%a 缩写的星期名 (Sun..Sat)

%d 月份中的天数，数字的 (00..31)

%e 月份中的天数，数字的 (0..31)

%m 月，数字的 (00..12)

%c 月，数字的 (0..12)

%b 缩写的月份名 (Jan..Dec)

%j 一年中的天数 (001..366)

%H 小时 (00..23)

%k 小时 (0..23)

%h 小时 (01..12)

%I 小时 (01..12)

%l 小时 (1..12)

%i 分钟，数字的 (00..59)

%r 时间，12 小时 (hh:mm:ss [AP]M)

%T 时间，24 小时 (hh:mm:ss)

%S 秒 (00..59)

%s 秒 (00..59)

%p AM 或 PM

%w 一周中的天数 (0=Sunday..6=Saturday)

%U 星期 (00..53)，星期日是一个星期的第一天

%u 星期 (00..53)，星期一是一个星期的第一天

%V 星期 (01..53)，星期日是一个星期的第一天。与 ‘%X’ 一起使用

%v 星期 (01..53)，星期一是一个星期的第一天。与 ‘%x’ 一起使用

%% 一个字母 “%”]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>594</wp:post_id>
		<wp:post_date><![CDATA[2013-10-29 17:05:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-29 09:05:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e6%97%a5%e6%9c%9f%e5%87%bd%e6%95%b0%e7%9a%84%e4%bd%bf%e7%94%a8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[706]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>解决ntp的错误：no server can be used,exiting</title>
		<link>http://www.itopers.com/?p=607</link>
		<pubDate>Tue, 22 Oct 2013 10:23:59 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=607</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center"><b>台湾地区一台机器进行时间同步时，出现下面的错误。很显然，它提示的是不能找到主机time.stdtime.gov.tw。 所以我初步猜测是由于dns解析的问题</b></p>

<pre class="lang:default decode:true">#  /usr/sbin/ntpdate  time.stdtime.gov.tw
Error : Temporary failure in name resolution
29 Oct 14:18:59 ntpdate[25327]: can't find host time.stdtime.gov.tw
29 Oct 14:18:59 ntpdate[25327]: no servers can be used, exiting</pre>
<b>确认防火墙没有问题后，执行域名解析，发现失败</b>
<pre class="lang:default decode:true crayon-selected"># nslookup  time.stdtime.gov.tw
;; connection timed out; no servers could be reached</pre>
<b>尝试ping外网，以确认能正常连到外网，连网正常</b>
<pre class="lang:default decode:true"># ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=53 time=1.48 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=53 time=1.40 ms
--- 8.8.8.8 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1000ms
rtt min/avg/max/mdev = 1.404/1.445/1.487/0.056 ms</pre>
<b>修改/etc/resolv.conf文件</b>
<pre class="lang:default decode:true"># cat /etc/resolv.conf
nameserver 172.0.0.29
nameserver 8.8.8.8</pre>
<b>修改后，再次执行时间同步，ok鸟！</b>
<pre class="lang:default decode:true"># /usr/sbin/ntpdate  time.stdtime.gov.tw
29 Oct 14:23:36 ntpdate[25337]: adjust time server 59.124.196.84 offset 0.100921 sec</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>607</wp:post_id>
		<wp:post_date><![CDATA[2013-10-22 18:23:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-22 10:23:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e8%a7%a3%e5%86%b3ntp%e7%9a%84%e9%94%99%e8%af%af%ef%bc%9ano-server-can-be-usedexiting]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="ntp%e9%94%99%e8%af%af"><![CDATA[ntp错误]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[8655]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>使用nc命令来探测tcp/udp端口</title>
		<link>http://www.itopers.com/?p=614</link>
		<pubDate>Fri, 25 Oct 2013 11:39:20 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=614</guid>
		<description></description>
		<content:encoded><![CDATA[<p style="text-align: left;" align="center">usage: nc [-46DdhklnrStUuvzC] [-i interval] [-p source_port]</p>
<p style="text-align: left;">          [-s source_ip_address] [-T ToS] [-w timeout] [-X proxy_version]</p>
<p style="text-align: left;">          [-x proxy_address[:port]] [hostname] [port[s]]</p>
<p style="text-align: left;"><b>测试tcp：</b></p>

<pre class="lang:default decode:true"># nc -vzw 1 10.52.140.180 1-123|grep -iv "refused"
Connection to 10.52.140.180 22 port [tcp/ssh] succeeded!
Connection to 10.52.140.180 80 port [tcp/http] succeeded!
Connection to 10.52.140.180 111 port [tcp/sunrpc] succeeded!</pre>
<p style="text-align: left;"><b>测试udp: </b></p>
<p style="text-align: left;"><b>方法1：</b></p>

<pre class="lang:default decode:true"># nc -uvzw 1 10.52.140.180 1-123
Connection to 10.52.140.180 111 port [udp/sunrpc] succeeded!</pre>
<p style="text-align: left;">（小贴士：如果这里很快就执行完毕，就表示，其他的很多端口在本地防火墙OUTPUT时就被限制了。）</p>
<p style="text-align: left;"><b>方法2：</b></p>

<pre style="text-align: left;"># nc -u 10.52.140.180 123</pre>
<p style="text-align: left;">进入回显界面，键入字符，只要不报错，就证明没有连通udp没有问题。</p>
<p style="text-align: left;">如果显示：Write error: Connection refused。 就表示不能联通udp端口。</p>
<p style="text-align: left;"><b>命令参数说明：</b></p>

<table class="alignleft" width="671" border="1" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td valign="top" width="161">-4</td>
<td valign="top" width="510">强制使用ipv4</td>
</tr>
<tr>
<td valign="top" width="161">-6</td>
<td valign="top" width="510">强制使用ipv6</td>
</tr>
<tr>
<td valign="top" width="161">-D</td>
<td valign="top" width="510">允许socket通信返回debug信息</td>
</tr>
<tr>
<td valign="top" width="161">-d</td>
<td valign="top" width="510">不允许从标准输入中读取</td>
</tr>
<tr>
<td valign="top" width="161">-h</td>
<td valign="top" width="510">显示nc帮助文档</td>
</tr>
<tr>
<td valign="top" width="161">-i interval</td>
<td valign="top" width="510">指定每行之间内容延时发送和接受，也可以使多个端口之间的连接延时</td>
</tr>
<tr>
<td valign="top" width="161">-k</td>
<td valign="top" width="510">当一个连接结束时，强制nc监听另一个连接。必须和-l一起使用</td>
</tr>
<tr>
<td valign="top" width="161">-l</td>
<td valign="top" width="510">用于监听传入的数据链接，不能与-p -z -s一起使用。-w 参数的超时也会被忽略</td>
</tr>
<tr>
<td valign="top" width="161">-n</td>
<td valign="top" width="510">不执行任何地址，主机名，端口或DNS查询</td>
</tr>
<tr>
<td valign="top" width="161">-p</td>
<td valign="top" width="510">指定nc使用的源端口，受权限限制且不能余-l一起使用</td>
</tr>
<tr>
<td valign="top" width="161">-r</td>
<td valign="top" width="510">指定nc使用的源端口和目的端口，不能使用系统原来就指定的那些端口</td>
</tr>
<tr>
<td valign="top" width="161">-S</td>
<td valign="top" width="510">允许在RFC 2385的TCP MD5签名选项</td>
</tr>
<tr>
<td valign="top" width="161">-s source_ip_address</td>
<td valign="top" width="510">指定用于发包的接口的IP地址，不能和-l一起使用</td>
</tr>
<tr>
<td valign="top" width="161">-T ToS</td>
<td valign="top" width="510">指定链接的IP服务类型（TOS）</td>
</tr>
<tr>
<td valign="top" width="161">-C</td>
<td valign="top" width="510">自动换行</td>
</tr>
<tr>
<td valign="top" width="161">-t</td>
<td valign="top" width="510">使nc能够与telnet交互</td>
</tr>
<tr>
<td valign="top" width="161">-U</td>
<td valign="top" width="510">使用UNIX域socket</td>
</tr>
<tr>
<td valign="top" width="161">-u</td>
<td valign="top" width="510">使用udp代替默认的tcp选项</td>
</tr>
<tr>
<td valign="top" width="161">-v</td>
<td valign="top" width="510">输出详细报告</td>
</tr>
<tr>
<td valign="top" width="161">-w timeout</td>
<td valign="top" width="510">一个链接一段时间无操作，则自动断开，默认无超时</td>
</tr>
<tr>
<td valign="top" width="161">-X proxy_version</td>
<td valign="top" width="510">指定nc使用代理时所采用的协议,可选的有socksv4，socks5以及https。默认socks5</td>
</tr>
<tr>
<td valign="top" width="161">-x proxy_address[:port]</td>
<td valign="top" width="510">指定nc使用的代理地址和端口。默认设置:1080(SOCKS),3128(HTTPS)</td>
</tr>
<tr>
<td valign="top" width="161">-z</td>
<td valign="top" width="510">只监听不发送任何包</td>
</tr>
</tbody>
</table>
<p style="text-align: left;"></p>
<p style="text-align: left;"></p>
<p style="text-align: left;"></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>614</wp:post_id>
		<wp:post_date><![CDATA[2013-10-25 19:39:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-25 11:39:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e4%bd%bf%e7%94%a8nc%e5%91%bd%e4%bb%a4%e6%9d%a5%e6%8e%a2%e6%b5%8btcpudp%e7%ab%af%e5%8f%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="nc"><![CDATA[nc]]></category>
		<category domain="post_tag" nicename="udp"><![CDATA[udp]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2137]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql通过/etc/hosts文件进行访问授权</title>
		<link>http://www.itopers.com/?p=621</link>
		<pubDate>Wed, 30 Oct 2013 09:50:40 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=621</guid>
		<description></description>
		<content:encoded><![CDATA[mysql要对所有访问数据库的应用进行访问授权，那么需要添加相应的用户及密码，另外还需要在mysql.user表中允许指定的host连接数据库。下面介绍利用/etc/hosts来进hosts授权。
<pre class="lang:mysql decode:true">mysql&gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| student            |
| test               |
+--------------------+
4 rows in set (0.00 sec)

mysql&gt; grant all on student.* to dba@'student_%' identified by 'ding';
Query OK, 0 rows affected (0.13 sec)

mysql&gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; Select user,host,password from mysql.user;
+------+-----------+-------------------------------------------+
| user | host      | password                                  |
+------+-----------+-------------------------------------------+
| root | localhost | *0E16069C30DC5FEDD519C3C83F73946CA578BCD4 |
| root | 127.0.0.1 |                                           |
| dba  | student_% | *0E16069C30DC5FEDD519C3C83F73946CA578BCD4 |
+------+-----------+-------------------------------------------+
3 rows in set (0.00 sec)</pre>
首先，创建一个dba用户，密码为ding,能够通过student_%主机访问数据库。

然后在/etc/hosts添加如下东东。
<pre class="lang:sh decode:true">[root@client1 ~]# cat /etc/hosts
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
192.168.0.2 student_0.2</pre>
表示可以从192.168.0.2连接这台数据库。原因是这两台应用连接进来后，会通过hosts进行域名解析成student_0.2,正好在dba用户授权时，是允许student_%进来的。%表示是任意字符。

然后我在0.2服务器上登录，看是否ok
<pre class="lang:default decode:true">[root@server ~]# mysql -u dba -p -h192.168.0.3
Enter password: 
ERROR 1130 (00000): Host '192.168.0.2' is not allowed to connect to this MySQL server</pre>
修改hosts文件后，直接登录是不行的，显示还是从192.168.0.2这个ip进行登录的，hosts是不生效。重新刷新mysql的hosts就成功了，刷新 方法有两种：
<pre class="lang:default decode:true">mysql&gt; flush hosts;
Query OK, 0 rows affected (0.00 sec)</pre>
登录mysql终端可以用上面这种方式，也可以在命令提示符中用如下方式 。
<pre class="lang:default decode:true">[root@client1 ~]# mysqladmin -uroot -p flush-hosts
Enter password:</pre>
通过如上步骤就可以成功授权，这样做的好处是有新的应用进来，不需要再去grant添加授权，只需要在/etc/hosts添加相应解析，然后再刷新hosts就可以了。

mysql&gt; show databases;+--------------------+| Database           |+--------------------+| information_schema || mysql              || student            || test               |+--------------------+4 rows in set (0.00 sec)
mysql&gt; grant all on student.* to dba@'student_%' identified by 'ding';Query OK, 0 rows affected (0.13 sec)
mysql&gt; flush privileges;Query OK, 0 rows affected (0.00 sec)
mysql&gt; Select user,host,password from mysql.user;+------+-----------+-------------------------------------------+| user | host      | password                                  |+------+-----------+-------------------------------------------+| root | localhost | *0E16069C30DC5FEDD519C3C83F73946CA578BCD4 || root | 127.0.0.1 |                                           || dba  | student_% | *0E16069C30DC5FEDD519C3C83F73946CA578BCD4 |+------+-----------+-------------------------------------------+3 rows in set (0.00 sec)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>621</wp:post_id>
		<wp:post_date><![CDATA[2013-10-30 17:50:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-10-30 09:50:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e8%bf%9b%e8%a1%8chosts%e8%ae%bf%e9%97%ae%e6%8e%88%e6%9d%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1297]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql主从复制</title>
		<link>http://www.itopers.com/?p=627</link>
		<pubDate>Fri, 29 Nov 2013 18:41:14 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=627</guid>
		<description></description>
		<content:encoded><![CDATA[环境说明：

<strong>一台master：</strong>

IP地址：192.168.0.105                     mysql版本：5.5.15

<strong>一台slave：</strong>

IP地址：192.168.0.104                     mysql版本：5.5.15

首先来配置master，修改/etc/my.cnf文件，在[mysqld]下增加如下内容：
<pre class="lang:mysql decode:true">log-bin=mysql-bin 
#开启二进制日志，这个是必须的，mysql主从复制就是基于二进制日志的
server-id       = 1
#主从必须有一个唯一的server-id</pre>
master配置很简单，配置好后重启mysql，给复制添加专门的用户。
<pre class="lang:mysql decode:true">mysql&gt; GRANT REPLICATION SLAVE,REPLICATION CLIENT on *.* to beebol@'192.168.0.104' identified by '123456';
Query OK, 0 rows affected (0.01 sec)

mysql&gt; flush privileges;
Query OK, 0 rows affected (0.00 sec)
mysql&gt; SHOW GRANTS FOR beebol@'192.168.0.104'; 
+---------------------------------------------------------------------------------------------------------------------------------------------------+
| Grants for beebol@192.168.0.104                                                                                                                   |
+---------------------------------------------------------------------------------------------------------------------------------------------------+
| GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'beebol'@'192.168.0.104' IDENTIFIED BY PASSWORD '*6BB4837EB74329105EE4568DDA7DC67ED2CA2AD9' |
+---------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.01 sec)</pre>
只要给从mysql  replication slave和replication client就可以了。

然后来配置slave端，修改/etc/my.cnf
<pre class="lang:default decode:true">#log-bin=mysql-bin   
#在从上就不需要开启二进制日志了
relay-log=relay-bin
relay-log-index=relay-bin.index
#开启中继日志
# binary logging format - mixed recommended
binlog_format=mixed

# required unique id between 1 and 2^32 - 1
# defaults to 1 if master-host is not set
# but will not function as a master if omitted
server-id   = 11
#这个server-id很关键，不能与上面的主server-id一致就行
replicate-do-db=beebolblog
#只复制beebolblog库</pre>
再将master中的beebolblog数据库备份导出来，导入到从库
<pre class="lang:default decode:true">mysqldump -f --single-transaction -R -q --master-data=1 -B beebolblog &gt;beebolblog.sql      
[root@localhost ~]# scp beebolblog.sql 192.168.0.104:/tmp
beebolblog.sql                                                                                    100% 2336KB   2.3MB/s   00:00</pre>
把master备份库beebolblog数据库导入到slave中：
<pre class="lang:default decode:true">[root@server1 tmp]# mysql &lt;beebolblog.sql 
[root@server1 tmp]# grep 'CHANGE MASTER' beebolblog.sql 
CHANGE MASTER TO MASTER_LOG_FILE='mysql-bin.000015', MASTER_LOG_POS=107;

#导入后，再看看从服务器应该从那个二进制日志开始，什么位置开始。显示这个change master信息中在导出数据时添加了--master-data

#在slave端进行配置连接信息
mysql&gt; CHANGE MASTER TO MASTER_HOST='192.168.0.105',MASTER_USER='beebol',MASTER_PASSWORD='123456',MASTER_LOG_FILE='mysql-bin.000015',MASTER_LOG_POS=107;
Query OK, 0 rows affected (0.08 sec)

#配置好后，可以启动slave
mysql&gt; start slave;
Query OK, 0 rows affected (0.00 sec)

#查看状态
mysql&gt; show slave status\G;
*************************** 1. row ***************************
               Slave_IO_State: Waiting for master to send event
                  Master_Host: 192.168.0.105
                  Master_User: beebol
                  Master_Port: 3306
                Connect_Retry: 60
              Master_Log_File: mysql-bin.000015
          Read_Master_Log_Pos: 355
               Relay_Log_File: relay-bin.000002
                Relay_Log_Pos: 501
        Relay_Master_Log_File: mysql-bin.000015
             Slave_IO_Running: Yes
            Slave_SQL_Running: Yes
              Replicate_Do_DB: beebolblog
          Replicate_Ignore_DB: 
           Replicate_Do_Table: 
       Replicate_Ignore_Table: 
      Replicate_Wild_Do_Table: 
  Replicate_Wild_Ignore_Table: 
                   Last_Errno: 0
                   Last_Error: 
                 Skip_Counter: 0
          Exec_Master_Log_Pos: 355
              Relay_Log_Space: 651
              Until_Condition: None
               Until_Log_File: 
                Until_Log_Pos: 0
           Master_SSL_Allowed: No
           Master_SSL_CA_File: 
           Master_SSL_CA_Path: 
              Master_SSL_Cert: 
            Master_SSL_Cipher: 
               Master_SSL_Key: 
        Seconds_Behind_Master: 0
Master_SSL_Verify_Server_Cert: No
                Last_IO_Errno: 0
                Last_IO_Error: 
               Last_SQL_Errno: 0
               Last_SQL_Error: 
  Replicate_Ignore_Server_Ids: 
             Master_Server_Id: 1
1 row in set (0.00 sec)

ERROR: 
No query specified</pre>
查看状态显示两个线程正常：Slave_IO_Running: Yes，Slave_SQL_Running: Yes，这表示一切正常。

Slave_IO_Running:IO线程负责接收master传过来的二进制日志，放入中继日志当中

Slave_SQL_Running: SQL线程负责将中继日志的sql语句执行一遍

如上操作就可以实现mysql的主从复制功能了。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>627</wp:post_id>
		<wp:post_date><![CDATA[2013-11-30 02:41:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-11-29 18:41:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e4%b8%bb%e4%bb%8e%e5%a4%8d%e5%88%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="master"><![CDATA[master]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="replication"><![CDATA[replication]]></category>
		<category domain="post_tag" nicename="slave"><![CDATA[slave]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[27426]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>linux服务器时间同步的那点事</title>
		<link>http://www.itopers.com/?p=632</link>
		<pubDate>Tue, 03 Dec 2013 07:56:27 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=632</guid>
		<description></description>
		<content:encoded><![CDATA[到今天为止，关于时间同步的问题我知道的已经发生了三次了，防止自己掉下这个坑，先学习学习，然后总结如下：

1、时间同步服务器没有统一，导致部分服务器同步的时间存在误差。

2、时间同步服务器故障，重启后，时间错误，导致大部分服务器时间同步了错误时间。

3、windows服务器时间同步跨度太大，导致时间同步失败。

对于上面三个问题，我把自己负责的服务器做了如下部署：

1、统一crontab，部署crontab变更及不统一报警（时间同步都是计划执行的，这项监控不止解决时间问题）

2、每同步一次时间，保证都进行了clock -w，主要防止服务器异常重启后，服务器时间异常。

3、时间同步服务器先自己正常同步时间后，再提供时间同步服务。（这样也可以防止在这台服务器同步的服务器同步到错误的时间）

4、服务器时间同步时，先校验时间差，如果时间偏移在正常的范围内，再进行同步；如果超过偏移范围，应该通知应用评估影响后再进行同步，不要马上同步。

如下是一个简单的脚本，实现时间同步。实现原理是通过ntpdate -q 命令先校验时间差（此时不同步），时间差在允许的范围之类再同步，然后再clock -w。

ntpdate 的-q参数是只查询，不同步时间。
<pre class="lang:default decode:true">-q      Query only - don’t set the clock.</pre>
脚本：
<pre class="lang:sh decode:true">#/bin/bash
#
#Author:        beebol
#Desciption:    Time synchronization
#CreateDate:    2013-12-02
#

Timer="120.119.28.1"
Interval=60      #如果时间大于Interval秒就不同步，根据应用来确定
User=$(whoami); 
#先查询与时间服务器时间相差多少，如果超过Interval时间，不同步，记录并报警；否则自动同步
FLAG=$(/usr/sbin/ntpdate -q ${Timer} |grep ntpdate|awk '{if($(NF-1)&gt;'${Interval}'||$(NF-1)&lt;-'${Interval}') print "error";else print "o
k";}')
if [ "${FLAG}" = "error" ];then
        MSG="Time synchronization failed, offset ${Interval} more than seconds"
        #将报警信息记录到message日志
        logger $(date "+%Y-%m-%d %H:%M:%S"):$User:"$MSG":ntpdate
        #当然这里可以调用短信报警接口。
elif [ "${FLAG}" = "ok" ];then
        /usr/sbin/ntpdate -s ${Timer} ;clock -w
else
        MSG="Time synchronization failed, unable to access the time server"
        logger $(date "+%Y-%m-%d %H:%M:%S"):$User:"$MSG":ntpdate
        #当然这里可以调用短信报警接口。
fi
exit 0</pre>
5、监控cron日志，监控是否存在时间同步日志和时间同步正常日志。如果用上面的脚本还需要监控下message日志，脚本是吧错误信息写入了message日志当中。

6、做好防火墙的统一、变动监控。//有大部分时间同步失败都是防火墙的问题
<pre class="lang:default decode:true">#请允许时间同步服务器的123端口的udp协议出去
${IPTABLES} -A OUTPUT -p udp -m udp --dport 123 -j ACCEPT</pre>
目前就想到这些了。。。。。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>632</wp:post_id>
		<wp:post_date><![CDATA[2013-12-03 15:56:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2013-12-03 07:56:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[linux%e6%9c%8d%e5%8a%a1%e5%99%a8%e6%97%b6%e9%97%b4%e5%90%8c%e6%ad%a5%e7%9a%84%e9%82%a3%e7%82%b9%e4%ba%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="ntpdate"><![CDATA[ntpdate]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1532]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql无法删除包含外键的索引</title>
		<link>http://www.itopers.com/?p=635</link>
		<pubDate>Tue, 14 Jan 2014 11:55:20 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=635</guid>
		<description></description>
		<content:encoded><![CDATA[今天在做实验时，发现个问题，创建了个外键，然后通过drop index  userid  on area,报错，具体的如下：
<pre class="lang:mysql decode:true">[root@localhost(student) Tue Jan 14 18:47:00 2014]&gt;show create table users;
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table | Create Table                                                                                                                                                                                                                                                       |
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| users | CREATE TABLE `users` (
  `userid` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(12) DEFAULT NULL,
  `password` varchar(64) DEFAULT NULL,
  `score` float DEFAULT '0',
  PRIMARY KEY (`userid`)
) ENGINE=InnoDB AUTO_INCREMENT=1000001 DEFAULT CHARSET=utf8 |
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

[root@localhost(student) Tue Jan 14 19:31:37 2014]&gt;show create table area;
+-------+-----------------------------------------------------------------------------------------------------------------------------+
| Table | Create Table                                                                                                                |
+-------+-----------------------------------------------------------------------------------------------------------------------------+
| area  | CREATE TABLE `area` (
  `userid` int(11) NOT NULL,
  `area` varchar(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 |
+-------+-----------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)</pre>
前面是users表和area表结构，area表中的userid列是外键。

如下是两个表的数据：
<pre class="lang:mysql decode:true">[root@localhost(student) Tue Jan 14 18:17:13 2014]&gt;select * from users where userid=3;
+--------+----------+---------------+-------+
| userid | username | password      | score |
+--------+----------+---------------+-------+
|      3 | aaaa     | aaaaaaaaaaaaa |    30 |
+--------+----------+---------------+-------+
1 row in set (0.00 sec)

[root@localhost(student) Tue Jan 14 18:16:37 2014]&gt;select * from area;
+--------+---------+
| userid | area    |
+--------+---------+
|      4 | beijin  |
|      2 | wuhan   |
|      1 | jiangsu |
|      3 | henan   |
+--------+---------+
4 rows in set (0.01 sec)</pre>
然后，我执行如下语句时报错：
<pre class="lang:mysql decode:true">[root@localhost(student) Tue Jan 14 18:18:25 2014]&gt;show index from area;
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment |
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
| area  |          1 | userid   |            1 | userid      | A         |           4 |     NULL | NULL   |      | BTREE      |         |
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+
1 row in set (0.00 sec)
[root@localhost(student) Tue Jan 14 18:18:36 2014]&gt;drop index userid on area;
ERROR 1025 (HY000): Error on rename of './student/#sql-699_d' to './student/area' (errno: 150)</pre>
当时还以为drop index 语法写错了，重新看了下drop index 帮助档是这样的。到网上查了下，官网说这是个bug。详细可以看：<a href="http://bugs.mysql.com/bug.php?id=21395">Bug #21395  </a>
。后面 这个bug在innodb 1.0.2版本已经修复了。在删除有外键的复合索引时，需要先将外键删除，才能删除索引。修复后的执行就会有明确的提示，叫你先删除外键。
<pre class="lang:mysql decode:true ">alter table foo drop index fooIdx;
ERROR 1553 (HY000): Cannot drop index 'fooIdx': needed in a foreign key constraint</pre>
目前我的版本下也是一样的，必须先删除外键，然后再删除索引。我的innodb的版本是1.0.13
<pre class="lang:mysql decode:true ">[root@localhost(student) Tue Jan 14 18:46:35 2014]&gt;alter table area drop foreign key area_ibfk_1;
Query OK, 4 rows affected (0.05 sec)
Records: 4  Duplicates: 0  Warnings: 0

[root@localhost(student) Tue Jan 14 18:46:46 2014]&gt;show create table area;                       
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table | Create Table                                                                                                                                           |
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
| area  | CREATE TABLE `area` (
  `userid` int(11) NOT NULL,
  `area` varchar(20) DEFAULT NULL,
  KEY `userid` (`userid`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1 |
+-------+--------------------------------------------------------------------------------------------------------------------------------------------------------+
1 row in set (0.00 sec)

[root@localhost(student) Tue Jan 14 18:46:48 2014]&gt;alter table area drop index userid;      
Query OK, 4 rows affected (0.08 sec)
Records: 4  Duplicates: 0  Warnings: 0</pre>
解决问题了，想想还是在学习mysql 过程中遇到的问题记录下来。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>635</wp:post_id>
		<wp:post_date><![CDATA[2014-01-14 19:55:20]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-01-14 11:55:20]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e6%97%a0%e6%b3%95%e5%88%a0%e9%99%a4%e5%8c%85%e5%90%ab%e5%a4%96%e9%94%ae%e7%9a%84%e7%b4%a2%e5%bc%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="drop-index"><![CDATA[drop index]]></category>
		<category domain="post_tag" nicename="foreign-key"><![CDATA[foreign key]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[4316]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql创建外键时报错(errno: 150)</title>
		<link>http://www.itopers.com/?p=637</link>
		<pubDate>Tue, 21 Jan 2014 09:27:51 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=637</guid>
		<description></description>
		<content:encoded><![CDATA[今天做xtrabackup实验的时候，创建两个表进行做实验，在创建外键约束时报如下错误：
<pre class="lang:default decode:true">ERROR 1005 (HY000): Can't create table 'test.#sql-e89_c' (errno: 150)</pre>
错误的原因是我创建外键时两个表还没有具备创建外键的条件,创建外键的条件是：
<pre class="lang:default decode:true">1.两个表必须是InnoDB表，MyISAM表暂时不支持外键；
2.外键列必须建立了索引，MySQL 4.1.2以后的版本在建立外键时会自动创建索
3.外键关系的两个表的列必须是数据类型相似，也就是可以相互转换类型的列，比如int和tinyint可以，而int和char则不可以。</pre>
满足三个条件后就可以创建了，具体的问题回顾：
<pre class="lang:default decode:true">CREATE TABLE `users` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(12) NOT NULL DEFAULT '',
  `pflag` varchar(2) DEFAULT NULL,
  `uid` int(10) unsigned DEFAULT NULL,
  `gid` int(10) unsigned DEFAULT NULL,
  `sname` varchar(255) DEFAULT NULL,
  `demo` varchar(64) DEFAULT NULL,
  `shell` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=utf8

CREATE TABLE `shadow` (
  `name` varchar(12) NOT NULL DEFAULT '',
  `passwd` varchar(128) DEFAULT NULL,
  `mtime` varchar(9) DEFAULT NULL,
  `tinit` varchar(2) DEFAULT NULL,
  `minit` varchar(5) DEFAULT NULL,
  `x` char(1) DEFAULT NULL,
  `y` char(1) DEFAULT NULL,
  `z` char(1) DEFAULT NULL,
  `n` char(1) DEFAULT NULL,
  PRIMARY KEY (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8</pre>
创建两个表，usres和shadow。我是想把shadow表的name字段添加外键，语句如下：
<pre class="lang:mysql decode:true">[root@localhost:Wed Jan 22 00:51:58 2014 {test}]&gt;alter table shadow add foreign key (`name`) references users (`name`);
ERROR 1005 (HY000): Can't create table 'test.#sql-e89_c' (errno: 150)</pre>
有可能大家看到表结构，就知道创建外键肯定不会成功。当然没有注意，所以被自己坑了，花了我点时间检查，无语了。主要是检查时，把外键条件的第二点给忘记了，没有去检查。
<pre class="lang:mysql decode:true">[root@localhost:Wed Jan 22 01:02:00 2014 {test}]&gt;alter table users add index (name);
Query OK, 0 rows affected (0.11 sec)
Records: 0  Duplicates: 0  Warnings: 0

[root@localhost:Wed Jan 22 01:06:04 2014 {test}]&gt;show index from users;  
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| users |          0 | PRIMARY  |            1 | id          | A         |          35 |     NULL | NULL   |      | BTREE      |         |               |
| users |          1 | name     |            1 | name        | A         |          35 |     NULL | NULL   |      | BTREE      |         |               |
+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
2 rows in set (0.00 sec)

[root@localhost:Wed Jan 22 01:06:10 2014 {test}]&gt;alter table shadow add foreign key (`name`) references users (`name`);
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0</pre>
添加个索引后，nnd，好了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>637</wp:post_id>
		<wp:post_date><![CDATA[2014-01-21 17:27:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-01-21 09:27:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e5%88%9b%e5%bb%ba%e5%a4%96%e9%94%ae%e6%97%b6%e6%8f%90%e7%a4%bacant-create-table-test-sql-e89_c-errno-150]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="foreign-key"><![CDATA[foreign key]]></category>
		<category domain="post_tag" nicename="index"><![CDATA[index]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2932]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>xtrabackup在线备份及恢复-全备及增备</title>
		<link>http://www.itopers.com/?p=643</link>
		<pubDate>Thu, 23 Jan 2014 02:47:09 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=643</guid>
		<description></description>
		<content:encoded><![CDATA[Xtrabackup是由percona开发的一个开源软件，它是innodb热备工具ibbackup（收费的商业软件）的一个开源替代品。 Xtrabackup由个部分组成:xtrabackup和innobackupex，其中xtrabackup工具用于备份innodb和 xtraDB引擎的表；而innobackupex工具用于备份myisam和innodb引擎的表，本文将介绍如何用innobackupex工具做全 量和增量备份。

The innobackupex tool is a Perl script that acts as a wrapper for the xtrabackup C program. It is a patched version of the innobackup Perl script that Oracle distributes with the InnoDB Hot Backup tool. It enables more functionality by integrating xtrabackup and other functions such as file copying and streaming, and adds some convenience. It lets you perform point-in-time backups of InnoDB / XtraDB tables together with the schema definitions, MyISAM tables, and other portions of the server.

1、安装：

为了方便，直接到官网下载个rpm包安装后就行
<pre class="lang:sh decode:true">[root@Server3 packages]#yum install perl-DBD-MySQL -y
[root@Server3 packages]# rpm -ivh percona-xtrabackup-2.1.6-702.rhel5.i386.rpm</pre>
2、创建一个专门的备份用户，并授权。
<pre class="lang:mysql decode:true">[root@localhost:Tue Jan 21 19:49:04 2014 {test2}]&gt;create user 'bkuser'@'localhost' identified by '123456';
Query OK, 0 rows affected (0.01 sec)

[root@localhost:Tue Jan 21 20:13:17 2014 {test2}]&gt;grant reload,lock tables,replication client on *.* to 'bkuser'@'localhost';
Query OK, 0 rows affected (0.00 sec)

[root@localhost:Tue Jan 21 20:14:19 2014 {test2}]&gt;flush privileges;
Query OK, 0 rows affected (0.00 sec)</pre>
注意备份用户需要的权限：reload,lock tables,replication client

3、做一次全备
<pre class="lang:default decode:true">innobackupex --defaults-file=/home/mysql/my.cnf --user=bkuser --password=123456 /home/root/xtrabackup_backupfiles/test/</pre>
innobackupex到--defaults-file指定的配置文件/home/mysql/my.cnf读取配置项，如datadir数据目录拷贝数据到/home/root/xtrabackup_backupfiles/test/中，注意：如果不用--defaults-file参数，一定要指定--datadir参数，不然会找不到mysql数据目录，无法进行备份。指定--defaults-file参数后，my.cnf需要有datadir的参数配置，不然也不行。最终备份的目录为：/home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18，就是会在指定的目录添加时间，如果不需要这个时间目录，可以加上--no-timestamp参数

4、恢复全备

先关闭数据库，将数据库目录全部删除，包括日志、数据文件
<pre class="lang:default decode:true">innobackupex --apply-log --defaults-file=/home/mysql/my.cnf  /home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18/
innobackupex --copy-back --defaults-file=/home/mysql/my.cnf  /home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18/</pre>
恢复时需要执行两步操作，第一步apply-log,为了加快速度，一般建议设置--use-memory，这个步骤完成之后,/home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18/这个备份已经准备就绪。

为什么要apply-log这一步原因官方是这么说的：

After creating a backup, the data is not ready to be restored. There might be uncommitted transactions to be undone or transactions in the logs to be replayed. Doing those pending operations will make the data files consistent and it is the purpose of the prepare stage . Once this has been done, the data is ready to be used.

第二步，执行copy-back，恢复备份数据到mysql数据目录。

一定不要忘记检查数据目录的权限。

5、进行增量备份和恢复

增量备份是基于全备的基础上进行备份的，全备数据是/home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18/
<pre class="lang:default decode:true">innobackupex --incremental /home/root/xtrabackup_backupfiles/increment/ --defaults-file=/home/mysql/my.cnf --user=bkuser --password=123456 --incremental-basedir=/home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18/</pre>
--incremental 表示是增量备份，/home/root/xtrabackup_backupfiles/increment/是增量备份的路径；--incremental-basedir=/home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18/这是全备路径。

最终本次增量备份的路径是/home/root/xtrabackup_backupfiles/increment/2014-01-22_02-21-11

然后在2014-01-22_02-21-11这次增量备份的基础上再次进行增量备份：
<pre class="lang:default decode:true">innobackupex --incremental /home/root/xtrabackup_backupfiles/increment/ --defaults-file=/home/mysql/my.cnf --user=bkuser --password=123456 --incremental-basedir=/home/root/xtrabackup_backupfiles/increment/2014-01-22_02-21-11/</pre>
如下是两次增量备份的checkpoint：
<pre class="lang:default decode:true">第一次增备
[root@Server3 2014-01-22_02-21-11]# cat xtrabackup_checkpoints 
backup_type = incremental
from_lsn = 1685370
to_lsn = 1807193
last_lsn = 1807193
compact = 0
在第一次增备的基础上的增备
[root@Server3 2014-01-22_02-21-11]# cat ../2014-01-22_22-00-09/xtrabackup_checkpoints 
backup_type = incremental
from_lsn = 1807193
to_lsn = 1809978
last_lsn = 1809978
compact = 0</pre>
从上面可以看出，第一次增量备份的to_lsn就是第二次的from_lsn,--incremental-basedir指定第一次增量备份的路径即可

恢复：

在所在备份中进行重做日志操作
<pre class="lang:default decode:true">innobackupex --apply-log --redo-only /home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18/
innobackupex --apply-log --redo-only /home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18/ --incremental-dir=/home/root/xtrabackup_backupfiles/increment/2014-01-22_02-21-11/

innobackupex --apply-log  /home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18/ --defaults-file=/home/mysql/my.cnf
innobackupex --copy-back /home/root/xtrabackup_backupfiles/test/2014-01-21_20-16-18/ --defaults-file=/home/mysql/my.cnf</pre>
首先在全备上使用--redo-only进行重做已经提交的日志。然后再把第一次增量备份重做到全备当中；第三步回滚没有提交的日志，这时已经有一个准备就绪的备份了，那就这全备；第四步将全备copy到数据目录即可恢复；第五步注意目录权限。

这里需要注意的是：最后一次增量备份不需要加--redo-only选项，即使你用了对数据是没有影响的。

如下是官方提供的说明：
<pre class="lang:default decode:true">Note:--redo-only should be used when merging all incrementals except the last one. That’s why the previous line doesn’t contain the --redo-only option. Even if the --redo-only was used on the last step, backup would still be consistent but in that case server would perform the rollback phase.</pre>
&nbsp;

&nbsp;

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>643</wp:post_id>
		<wp:post_date><![CDATA[2014-01-23 10:47:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-01-23 02:47:09]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[xtrabackup%e5%9c%a8%e7%ba%bf%e5%a4%87%e4%bb%bd%e5%8f%8a%e6%81%a2%e5%a4%8d-%e5%85%a8%e5%a4%87%e5%8f%8a%e5%a2%9e%e5%a4%87]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2672]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>oracle 11g配置EM时遇到的问题及解决</title>
		<link>http://www.itopers.com/?p=649</link>
		<pubDate>Fri, 21 Feb 2014 04:58:45 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=649</guid>
		<description></description>
		<content:encoded><![CDATA[1、首先是在执行emctl start dbconsole时报错，提示ORACLE_UNQNAME没有配置。
<pre class="lang:default decode:true">#在~/.bash_profile中填入如下语句，然后重新登录oracle用户
export ORACLE_UNQNAME=orcl</pre>
2、配置好ORACLE_UNQNAME,再次启动还是不行
<pre class="lang:default decode:true">[oracle@oracle ~]$emctl start dbconsole
EM Configuration issue. /u01/app/oracle/product/11.1.0/db_1/eg7116_RDBD1 not found.</pre>
3、看到Configuration issue，忘记是不是配置过em了
<pre class="lang:default decode:true">[oracle@oracle ~]$ emca -config dbcontrol db -repos create 
...
SEVERE: Error creating the repository
....

[oracle@oracle ~]$cat /home/u01/app/cfgtoollogs/emca/orcl/emca_2014_02_21_09_56_03.log
CONFIG: ORA-20001: SYSMAN already exists..
ORA-06512: at line 17

oracle.sysman.assistants.util.sqlEngine.SQLFatalErrorException: ORA-20001: SYSMAN already exists..
ORA-06512: at line 17</pre>
4、看到错误提示，然后查看日志显示，sysman用户已经存在，难道已经配置了。我在网上找了资料把sysman 用户删除掉就可以了。
<pre class="lang:default decode:true"> SYS@hzh&gt; drop user sysman cascade;

User dropped.

SYS@hzh&gt; drop role MGMT_USER;

Role dropped.

SYS@hzh&gt; drop PUBLIC SYNONYM MGMT_TARGET_BLACKOUTS;

Synonym dropped.</pre>
我就不那么做了，重新创建也不久，很快的。。。
<pre class="lang:sh decode:true crayon-selected">[oracle@oracle ~]$ emca -config dbcontrol db -repos recreate                           

STARTED EMCA at Feb 21, 2014 9:56:03 AM
EM Configuration Assistant, Version 11.2.0.0.2 Production
Copyright (c) 2003, 2005, Oracle.  All rights reserved.

Enter the following information:
Database SID: orcl
Listener port number: 1521
Listener ORACLE_HOME [ /home/u01/app/oracle/product/11.2.0/dbhome_1 ]: 
Password for SYS user:  
Password for DBSNMP user:  
Password for SYSMAN user:  
.......
Enterprise Manager configuration completed successfully
FINISHED EMCA at Feb 21, 2014 10:18:05 AM</pre>
recreate就可以了，现在可以访问了，看监听已经起来了
<pre class="lang:default decode:true">[oracle@oracle ~]$ netstat -tanlp | grep 1158
tcp        0      0 0.0.0.0:1158                0.0.0.0:*                   LISTEN      20684/java</pre>
https://192.168.0.5:1158/em/]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>649</wp:post_id>
		<wp:post_date><![CDATA[2014-02-21 12:58:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-02-21 04:58:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oracle-11g%e9%85%8d%e7%bd%aeem%e6%97%b6%e9%81%87%e5%88%b0%e7%9a%84%e9%97%ae%e9%a2%98%e5%8f%8a%e8%a7%a3%e5%86%b3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="oracle"><![CDATA[Oracle]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_ce9bed8f33e250771653969dddc1176e]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1627]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>oracle删除一个recover的数据文件</title>
		<link>http://www.itopers.com/?p=653</link>
		<pubDate>Mon, 03 Mar 2014 08:41:39 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=653</guid>
		<description></description>
		<content:encoded><![CDATA[原因是在非归档的模式下把数据文件offline了，知道的，在这个模式下把数据文件脱机后，就不能联机了。需要在归档的模式下才能将数据文件进行脱机或联机，不然数据文件信息将会丢失。如下是把数据文件给online起来。

首先看users表空间的user_02.dbf已经为recover状态，这个文件已经人为的被弄坏了。
<pre class="lang:default decode:true">select file_name,online_status,tablespace_name from dba_data_files where tablespace_name='USERS';
/home/u01/app/oradata/ORCL/datafile/o1_mf_users_9j64q8kz_.dbf	ONLINE	USERS
/home/u01/app/oradata/ORCL/datafile/users_01.dbf	ONLINE	USERS
/home/u01/app/oradata/ORCL/datafile/users_02.dbf	RECOVER	USERS</pre>
先关闭数据库，然后以mount方式启动，
<pre class="lang:default decode:true">SQL&gt; shutdown immediate
Database closed.
Database dismounted.
ORACLE instance shut down.
关闭数据库，然后以mount启动
SQL&gt; startup mount
ORACLE instance started.

Total System Global Area  630501376 bytes
Fixed Size                  2215984 bytes
Variable Size             469766096 bytes
Database Buffers          150994944 bytes
Redo Buffers                7524352 bytes
Database mounted.
然后查看是否为归档模式
SQL&gt; select name,log_mode from v$database;

NAME      LOG_MODE
--------- ------------
ORCL      ARCHIVELOG</pre>
如下方法也可以查看是否为归档模式
<pre class="lang:default decode:true">SQL&gt; archive log list; 
Database log mode              Archive Mode
Automatic archival             Enabled
Archive destination            USE_DB_RECOVERY_FILE_DEST
Oldest online log sequence     103
Next log sequence to archive   105
Current log sequence           105</pre>
然后打开数据库
<pre class="lang:default decode:true">SQL&gt; alter database open;

Database altered.</pre>
现在就可以调整数据文件的状态了，不过，这在这调整之前需要先进行recover操作
<pre class="lang:default decode:true">SQL&gt; recover datafile '/home/u01/app/oradata/ORCL/datafile/users_02.dbf';
Media recovery complete.
SQL&gt; alter database datafile
  2  '/home/u01/app/oradata/ORCL/datafile/users_02.dbf' online;

Database altered.

SQL&gt; select file_id,file_name,online_status,tablespace_name from dba_data_files where tablespace_name='USERS';

   FILE_ID
----------
FILE_NAME
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ONLINE_ TABLESPACE_NAME
------- ------------------------------
         4
/home/u01/app/oradata/ORCL/datafile/o1_mf_users_9j64q8kz_.dbf
ONLINE  USERS

         5
/home/u01/app/oradata/ORCL/datafile/users_01.dbf
ONLINE  USERS

         6
/home/u01/app/oradata/ORCL/datafile/users_02.dbf
ONLINE  USERS</pre>
最后看下，数据文件已经为online状态了。

alter database archivelog;修改数据库为归档模式。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>653</wp:post_id>
		<wp:post_date><![CDATA[2014-03-03 16:41:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-03 08:41:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oracle%e5%88%a0%e9%99%a4%e4%b8%80%e4%b8%aarecover%e7%9a%84%e6%95%b0%e6%8d%ae%e6%96%87%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="datafile"><![CDATA[datafile]]></category>
		<category domain="category" nicename="oracle"><![CDATA[Oracle]]></category>
		<category domain="post_tag" nicename="oracle-2"><![CDATA[oracle]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1641]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mysql恢复备份时ERROR 1418 (HY000)错误</title>
		<link>http://www.itopers.com/?p=658</link>
		<pubDate>Thu, 06 Mar 2014 11:08:15 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=658</guid>
		<description></description>
		<content:encoded><![CDATA[在恢复数据库的时候遇到了如下问题：
<pre class="lang:default decode:true">[root@Server3 ~]# mysql -f apollodb &lt;erpdb-dump-20140226_1119.sql 
ERROR 1418 (HY000) at line 5685: This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)</pre>
问题主要是备份中存在一个function，执行函数会有不确定的结果产生，在开启bin-log下，就会报如上错误，因为在复制和恢复时会导致与原始数据不一致，所以它会认为这是不安全的。

1、首先看下log_bin确实是开着的：
<pre class="lang:default decode:true">[root@localhost:Wed Jan 29 04:08:38 2014 {apollodb}]&gt; show variables like 'log_bin';
+---------------+-------+
| Variable_name | Value |
+---------------+-------+
| log_bin       | ON    |
+---------------+-------+
1 row in set (0.00 sec)</pre>
2、检查erpdb-dump-20140226_1119.sql备份，确实有一个function中存在不确定值，函数中用了NOW() 。
<pre class="lang:default decode:true">DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 FUNCTION `createBillCode`(flowKey varchar(60)) RETURNS varchar(60) CHARSET utf8
BEGIN

        DECLARE billCode VARCHAR(60);
        DECLARE curcode int;
        DECLARE currentDate VARCHAR(8);
        select cur_code into curcode  from apollo_erp_billcode t where t.flow_key=flowKey and t.cur_date=current_date;

        SELECT DATE_FORMAT(NOW(), '%Y%m%d') INTO currentDate ;
        if curcode=null then
                insert into apollo_erp_billcode(flow_key,cur_date,cur_code) values(flowKey ,current_date,1);
                select CONCAT(flowKey, currentDate, LPAD((curcode + 1), 5, '0')) INTO billCode ;
        end if;

        RETURN billCode;
END */;;
DELIMITER ;</pre>
2、查看确实这个函数没有创建成功
<pre class="lang:default decode:true">[root@localhost:Wed Jan 29 04:08:41 2014 {apollodb}]&gt;show function status;
Empty set (0.00 sec)</pre>
3、在错误输出的时候也提示了一种解决办法是将log_bin_trust_function_creators这个变量设置为ON或1。默认这个变量是0，可能改变这个值来：
<pre class="lang:default decode:true">[root@localhost:Wed Jan 29 04:11:36 2014 {apollodb}]&gt; show variables like 'log_bin_trust_function_creators';
+---------------------------------+-------+
| Variable_name                   | Value |
+---------------------------------+-------+
| log_bin_trust_function_creators | OFF   |
+---------------------------------+-------+
1 row in set (0.00 sec)

[root@localhost:Wed Jan 29 04:26:03 2014 {apollodb}]&gt;set global log_bin_trust_function_creators=on;
Query OK, 0 rows affected (0.00 sec)

[root@localhost:Wed Jan 29 04:29:04 2014 {apollodb}]&gt; show variables like 'log_bin_trust_function_creators';
+---------------------------------+-------+
| Variable_name                   | Value |
+---------------------------------+-------+
| log_bin_trust_function_creators | ON    |
+---------------------------------+-------+
1 row in set (0.00 sec)</pre>
官方有更详细的说明

<a href="http://dev.mysql.com/doc/refman/5.0/en/stored-programs-logging.html">http://dev.mysql.com/doc/refman/5.0/en/stored-programs-logging.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>658</wp:post_id>
		<wp:post_date><![CDATA[2014-03-06 19:08:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-06 11:08:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e6%81%a2%e5%a4%8d%e5%a4%87%e4%bb%bd%e6%97%b6error-1418-hy000%e9%94%99%e8%af%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="function"><![CDATA[function]]></category>
		<category domain="post_tag" nicename="log_bin"><![CDATA[log_bin]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1270]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mysql添加索引后的效果</title>
		<link>http://www.itopers.com/?p=661</link>
		<pubDate>Thu, 06 Mar 2014 11:19:48 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=661</guid>
		<description></description>
		<content:encoded><![CDATA[最近线上数据库更新，就是删除一些记录，901条删除语句，每一条删除语句都关联了三个表，act_id_membership，apollo_erp_workerinfo ，apollo_erp_post。删除的语句如下：
<pre class="lang:default decode:true">DELETE a from act_id_membership a,apollo_erp_workerinfo b,apollo_erp_post c where a.GROUP_ID_=c.post_No and a.USER_ID_=b.workerinfo_No and c.post_type='job' and b.out_email='www@www.com';</pre>
问题来了，检查更新语句没有问题后，备份完毕后，直接执行了。回车一敲，就发现悲剧了。等了好几分钟还没有执行完毕。

由于执行了，没有办法只好等，最后完成花了30多分钟。（当时是在线删除数据的，库的数据量不是很大，在线备份在线操作）。

今天有空了，把更新之前的备份导入到了虚拟机，然后进行测试，检查索引。如下都是在虚拟机上操作：

重新恢复数据库到虚拟机，然后执行一条delete语句分析，结果如下：

Mysqladmin pr查看：
<pre class="lang:default decode:true">[root@Server3 update]# mysqladmin pr
+----+------+-----------+----------+---------+------+--------------+------------------------------------------------------------------------------------------------------+
| Id | User | Host      | db       | Command | Time | State        | Info                                                                                                 |
+----+------+-----------+----------+---------+------+--------------+------------------------------------------------------------------------------------------------------+
| 12 | root | localhost | apollodb | Query   | 42   | Sending data | DELETE a from act_id_membership a,apollo_erp_workerinfo b,apollo_erp_post c where a.GROUP_ID_=c.post |
| 30 | root | localhost |          | Query   | 0    |              | show processlist                                                                                     |
+----+------+-----------+----------+---------+------+--------------+-----------------</pre>
这么简单的一条delete执行还这么慢，time都到42了，然后再看看slow日志：
<pre class="lang:default decode:true">Time                 Id Command    Argument
# Time: 140129  4:44:25
# User@Host: root[root] @ localhost []
# Query_time: 48.716238  Lock_time: 0.010976 Rows_sent: 0  Rows_examined: 48244969
use apollodb;
SET timestamp=1390941865;
DELETE a from act_id_membership a,apollo_erp_workerinfo b,apollo_erp_post c where a.GROUP_ID_=c.post_No and a.USER_ID_=b.workerinfo_No and c.post_type='job' and b.out_email=' www@www.com ';</pre>
正常情况下，这个删除应该很快，为什么这么慢呢？因为out_email=' www@www.com '查询出来就一条记录，再到三个表中查询那不是很快吗？是吧。开始检查调用的各表中的字段是否都有了索引。
<pre class="lang:default decode:true">[root@localhost:Wed Jan 29 05:04:12 2014 {apollodb}]&gt;show indexes from act_id_membership;
+-------------------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table             | Non_unique | Key_name          | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------------------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| act_id_membership |          0 | PRIMARY           |            1 | USER_ID_    | A         |        7420 |     NULL | NULL   |      | BTREE      |         |               |
| act_id_membership |          0 | PRIMARY           |            2 | GROUP_ID_   | A         |        7420 |     NULL | NULL   |      | BTREE      |         |               |
| act_id_membership |          1 | ACT_FK_MEMB_GROUP |            1 | GROUP_ID_   | A         |        7420 |     NULL | NULL   |      | BTREE      |         |               |
+-------------------+------------+-------------------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
3 rows in set (0.02 sec)

[root@localhost:Wed Jan 29 05:14:13 2014 {apollodb}]&gt;show indexes from apollo_erp_workerinfo;
+-----------------------+------------+----------------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table                 | Non_unique | Key_name             | Seq_in_index | Column_name   | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-----------------------+------------+----------------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| apollo_erp_workerinfo |          0 | PRIMARY              |            1 | workerinfo_id | A         |        7397 |     NULL | NULL   |      | BTREE      |         |               |
| apollo_erp_workerinfo |          0 | workerinfo_No_unique |            1 | workerinfo_No | A         |        7397 |     NULL | NULL   |      | BTREE      |         |               |
+-----------------------+------------+----------------------+--------------+---------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
2 rows in set (0.01 sec)

[root@localhost:Wed Jan 29 05:14:23 2014 {apollodb}]&gt;show indexes from apollo_erp_post;
+-----------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table           | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-----------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| apollo_erp_post |          0 | PRIMARY  |            1 | post_id     | A         |        2809 |     NULL | NULL   |      | BTREE      |         |               |
| apollo_erp_post |          1 | post_no  |            1 | post_No     | A         |         187 |     NULL | NULL   | YES  | BTREE      |         |               |
+-----------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
2 rows in set (0.00 sec)</pre>
刚开始还没有注意到，后面仔细一看问题出来了。其它的些字段有了索引，如GROUP_ID_、post_No、USER_ID_、workerinfo_No。唯有最重新的一个字段没有添加索引apollo_erp_workerinfo 的out_email。

再看看这个表的数据行数：
<pre class="lang:default decode:true">[root@localhost:Wed Jan 29 05:14:32 2014 {apollodb}]&gt;select count(*) from apollo_erp_workerinfo;
+----------+
| count(*) |
+----------+
|     7344 |
+----------+
1 row in set (0.00 sec)</pre>
虽然只有7344，但由于没有索引，每次查询都进行了全表扫描：
<pre class="lang:default decode:true">[root@localhost:Wed Jan 29 05:19:43 2014 {apollodb}]&gt;explain select workerinfo_No from apollo_erp_workerinfo where out_email=' www@www.com '\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: apollo_erp_workerinfo
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 7397
        Extra: Using where
1 row in set (0.00 sec)</pre>
为out_email添加个索引。
<pre class="lang:default decode:true">[root@localhost:Wed Jan 29 04:46:23 2014 {apollodb}]&gt;create index out_email_index on apollo_erp_workerinfo(`out_email`);
Query OK, 0 rows affected (0.12 sec)
Records: 0  Duplicates: 0  Warnings: 0</pre>
然后再分析这条语句，走索引了，直接拿取数据，速度不是吹的。
<pre class="lang:default decode:true">[root@localhost:Wed Jan 29 04:47:00 2014 {apollodb}]&gt;explain select workerinfo_No from apollo_erp_workerinfo where out_email=' www@www.com '\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: apollo_erp_workerinfo
         type: ref
possible_keys: out_email_index
          key: out_email_index
      key_len: 97
          ref: const
         rows: 1
        Extra: Using where
1 row in set (0.00 sec)</pre>
从rows: 7397变成rows: 1，然后再试试删除语句：
<pre class="lang:default decode:true ">[root@localhost:Wed Jan 29 04:47:07 2014 {apollodb}]&gt;DELETE a from act_id_membership a,apollo_erp_workerinfo b,apollo_erp_post c where a.GROUP_ID_=c.post_No and a.USER_ID_=b.workerinfo_No and c.post_type='job' and b.out_email=' www22@www.com ';
Query OK, 1 row affected (0.01 sec)</pre>
最后以不到4秒的速度把901条数据删除：
<pre class="lang:default decode:true ">[root@Server3 update]# time mysql -f apollodb &lt;lxy-2.sql 

real    0m3.945s
user    0m0.006s
sys     0m0.084s</pre>
果断瞬间秒杀。

总结：

把out_email放到最后面是对的，没有加索引就是悲剧的，mysql的sql的where条件解析顺序是从右到左开始的，最好把小的结果集发到最右边。注意mysql只有rbo，没有cbo哦。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>661</wp:post_id>
		<wp:post_date><![CDATA[2014-03-06 19:19:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-03-06 11:19:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mysql%e6%b7%bb%e5%8a%a0%e7%b4%a2%e5%bc%95%e5%90%8e%e7%9a%84%e6%95%88%e6%9e%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="%e7%b4%a2%e5%bc%95%ef%bc%8crbo"><![CDATA[索引，rbo]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1012]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Host &#039;hostname&#039; is blocked because of many connection errors</title>
		<link>http://www.itopers.com/?p=669</link>
		<pubDate>Sun, 04 May 2014 10:01:51 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=669</guid>
		<description></description>
		<content:encoded><![CDATA[同事请假，他负责的项目启程序时报了如下错误，第一次没有注意，以为是他忘记刷新host缓存了，直接按照后面的提示执行mysqladmin flush-h后就可以正常启了，也没有注意剪成的具体报错。
<pre class="lang:default decode:true">ErrorCode = 1129,ErrorMessage = [unixODBC][MySQL][ODBC 3.51 Driver]Host 'gs_103_224.90' is blocked because of many connection errors; unblock with 'mysqladmin flush-hosts',ErrorSql</pre>
今天如常，我就看了下，应该不会没有刷新host的问题了吧！叫运维把报错信息一发，明白了。

问题在失败的连接请求数量超出了max_connect_errors中的值，导致报这个错误。mysql会将每个连接的信息都记录到缓存当中，一但超出设置的阈值就会报错。不过可以通过刷新缓存来解决问题。

果断查看变量信息：
<pre class="lang:default decode:true">[com@11103_101_219 ~]$ mysqladmin var |grep connect
| character_set_connection        | latin1                                 |
| collation_connection            | latin1_swedish_ci                      |
| connect_timeout                 | 10                                     |
| init_connect                    |                                        |
| max_connect_errors              | 1000                                   |
| max_connections                 | 60                                     |
| max_user_connections            | 0                                      |</pre>
max_connect_errors已经是1000了，应该算大了，主要原因是有一次网络故障导致了太多失败连接，后来把程序给停了，然后再启来时就报错了。
<pre class="lang:mysql decode:true crayon-selected">(root:${HOSTNAME}:Sun May  4 17:18:44 2014)[(none)]&gt; set global max_connect_errors = 10000
    -&gt; ;
Query OK, 0 rows affected (0.00 sec)

(root:${HOSTNAME}:Sun May  4 17:19:03 2014)[(none)]&gt; exit
Bye
[com@11103_101_219 mysql]$ mysqladmin var | grep connect
| character_set_connection        | latin1                                 |
| collation_connection            | latin1_swedish_ci                      |
| connect_timeout                 | 10                                     |
| init_connect                    |                                        |
| max_connect_errors              | 10000                                  |
| max_connections                 | 60                                     |
| max_user_connections            | 0                                      |</pre>
了解原因之后，就增加了这个变量值，增大到了10000。

继续观察]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>669</wp:post_id>
		<wp:post_date><![CDATA[2014-05-04 18:01:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-04 10:01:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[host-hostname-is-blocked-because-of-many-connection-errors]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[963]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>percona-mysql内存使用异常问题</title>
		<link>http://www.itopers.com/?p=672</link>
		<pubDate>Sun, 04 May 2014 10:26:02 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=672</guid>
		<description></description>
		<content:encoded><![CDATA[这个是同事遇到的一个mysql如何吃掉所有内存后，导致mysql无法写入数问题。问题比较好，分享下。。。

【问题描述】

Mysql占用内存异常，mysql每运行45小时左右，就会把16G的物理内存和12G的SWAP空间（最大值是16G，4G系统预留）全都占用掉，进而导致无内存分配给新的请求，IOWATI激增，程序shm无法往mysql写入数据，出现回档。

<a href="http://www.itopers.com/wp-content/uploads/2014/05/1.png"><img class="alignnone size-full wp-image-673" alt="1" src="http://www.itopers.com/wp-content/uploads/2014/05/1.png" width="660" height="276" /></a>

【导致内存占用异常的原因】

目前排查出来是由于/etc/hosts中配置的游戏服务器的主机名长度超过了16个字符导致的，在percona mysql中有一张动态视图<a href="http://www.percona.com/doc/percona-server/5.1/diagnostics/user_stats.html">information_schema.CLIENT_STATISTICS</a>，它会统计客户端访问mysql的信息：

<a href="http://www.itopers.com/wp-content/uploads/2014/05/2.jpg"><img class="alignnone size-full wp-image-674" alt="2" src="http://www.itopers.com/wp-content/uploads/2014/05/2.jpg" width="554" height="393" /></a>

我们注意到在percona mysql 5.0.67版本中，CLIENT字段的长度是16字节（是不是跟最大长度的IP地址字符数一致？），但是在/etc/hosts中配置的主机名长度却超过了16个字符：

gs_9017_my_tlbb_10.120.104.59

这样就导致mysql5.0.67在往information_schema.CLIENT_STATISTICS里面统计客户端信息的时候，遇到BUG，这时mysql就会不断地往里面重新插入记录，但是插入的记录都是有问题的：

<a href="http://www.itopers.com/wp-content/uploads/2014/05/3.jpg"><img class="alignnone size-full wp-image-675" alt="3" src="http://www.itopers.com/wp-content/uploads/2014/05/3.jpg" width="537" height="381" /></a>

游戏服务器连接mysql之后的几分钟，生成的记录数就高达10万，当运行6个小时左右的时候会生成1千万左右的记录数，占用内存高达2G多。

正常的客户端连接统计信息：

<a href="http://www.itopers.com/wp-content/uploads/2014/05/4.png"><img class="alignnone size-full wp-image-676" alt="4" src="http://www.itopers.com/wp-content/uploads/2014/05/4.png" width="549" height="375" /></a>

【解决方法】

修改/etc/hosts中游戏服务器的主机名长度，长度不能超过16个字符，由于程序跟mysql之间是长连接，所以还需要重新启动程序，释放当前的连接，重新访问mysql。

【关于mysql占用掉所有的内存，缺没有内存溢出的原因的猜测】

现在我们已经知道mysql要实时统计客户端访问mysql的动态信息，并把这些数据写入到内存中的information_schema.CLIENT_STATISTICS动态视图，当mysql已经占用了服务器所有的物理RAM和80%的SWAP时，由于此时没有可用的内存，会导致操作系统的IOWAIT增长到20～30，并且新的连接无法连入mysql，已经建立的连接也会陷入到僵死状态，此时相当于所有访问mysql的客户端连接都是静止的，mysql不会在去更新CLIENT_STATISTICS中的记录，但是CLIENT_STATISTICS占用的内存又不会释放，这样就出现了内存都被占用，却没有发生Out of memory的现象。
<p align="left">   【新版本mysql中的CLIENT_STATISTICS】</p>
         在新版本中CLIENT_STATISTICS的CLIENT字段长度已经由varchar(16)调整为varchar(64)

<a href="http://www.itopers.com/wp-content/uploads/2014/05/5.png"><img class="alignnone size-full wp-image-677" alt="5" src="http://www.itopers.com/wp-content/uploads/2014/05/5.png" width="592" height="123" /></a>

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>672</wp:post_id>
		<wp:post_date><![CDATA[2014-05-04 18:26:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-04 10:26:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[percona-mysql%e5%86%85%e5%ad%98%e4%bd%bf%e7%94%a8%e5%bc%82%e5%b8%b8%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1428]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>oracle 11g PHYSICAL STANDBY配置</title>
		<link>http://www.itopers.com/?p=679</link>
		<pubDate>Tue, 06 May 2014 03:37:29 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=679</guid>
		<description></description>
		<content:encoded><![CDATA[1、环境：

primary:activity01.cyou.com     已经安装数据库

netname:actvdbbak      db_unique_name:actvdb01

standby:actvnew.cyou.com         只安装数据库软件，没有创建数据库

netname:actvdb           db_unique_name:actvdb02

2、在primary\standby中的/etc/hosts中做好两个主机名的解析。

3、配置listener.ora  和 tnsnames.ora

listener.ora:
<pre class="lang:default decode:true">LISTENER1532 =
  (DESCRIPTION_LIST =
    (DESCRIPTION =
      (ADDRESS_LIST =
        (ADDRESS = (PROTOCOL = TCP)(HOST = activity01.cyou.com)(PORT = 1532))
      )
    )
  )
SID_LIST_LISTENER1532 =
  (SID_LIST =
    (SID_DESC =
      (GLOBAL_DBNAME = actvdb)
      (ORACLE_HOME = /data/U01/app/oracle/product/11.2.0.4)
      (SID_NAME = actvdb)
    )
  )</pre>
tnsnames.ora:
<pre class="lang:default decode:true">actvdb =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = actvnew.cyou.com)(PORT = 1532))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = actvdb)
    )
  )

actvdbbak =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = activity01.cyou.com)(PORT = 1532))
    (CONNECT_DATA =
      (SERVER = DEDICATED)
      (SERVICE_NAME = actvdb)
    )
  )</pre>
4、primary参数设置
<pre class="lang:default decode:true">alter database force logging;
alter system set db_unique_name='actvdb01' scope=spfile;#这个名字primary与standby不能一样
alter system set db_recovery_file_dest='/data/U01/app/oracle/flash_recovery_area' scope=spfile;
alter system set log_archive_config='DG_CONFIG=(actvdb01,actvdb02)';#这个填写的是db_unique_name
alter system set log_archive_dest_1='location=/data/U01/app/oracle/oradata/actvdb/archive valid_for=(ONLINE_LOGFILE,ALL_ROLES) db_unique_name=actvdb01' scope=spfile;
alter system set log_archive_dest_2='location=USE_DB_RECOVERY_FILE_DEST valid_for=(STANDBY_LOGFILE,STANDBY_ROLE) db_unique_name=actvdb01' scope=spfile;
alter system set log_archive_dest_3='service=actvdb LGWR ASYNC db_unique_name=actvdb02 valid_for=(all_logfiles,primary_role)' scope=spfile;
#service配置的是发送日志的standby的net名称，后面的db_unique_name也是standby的
alter system set fal_client='actvdbbak';
alter system set fal_server='actvdb';
alter system set standby_file_management=auto;#这里最好设置成auto
alter database add standby logfile group 7 ('/data/U01/app/oracle/oradata/actvdb/redo07.log') size 50M;
alter database add standby logfile group 8 ('/data/U01/app/oracle/oradata/actvdb/redo08.log') size 50M;
alter database add standby logfile group 9 ('/data/U01/app/oracle/oradata/actvdb/redo09.log') size 50M;
alter database add standby logfile group 10 ('/data/U01/app/oracle/oradata/actvdb/redo10.log') size 50M;
alter database add standby logfile group 11 ('/data/U01/app/oracle/oradata/actvdb/redo11.log') size 50M;
alter database add standby logfile group 12 ('/data/U01/app/oracle/oradata/actvdb/redo12.log') size 50M;
alter database add standby logfile group 13 ('/data/U01/app/oracle/oradata/actvdb/redo13.log') size 50M;
alter database add standby logfile group 14 ('/data/U01/app/oracle/oradata/actvdb/redo14.log') size 50M;
alter system set local_listener='actvdbbak';</pre>
特别注意log_archive_dest_n的配置内容的空格和逗号问题。
<pre class="lang:default decode:true">SQL&gt; alter system set log_archive_dest_2='location=USE_DB_RECOVERY_FILE_DEST,valid_for=(STANDBY_LOGFILE,STANDBY_ROLE)' scope=spfile;
alter system set log_archive_dest_2='location=USE_DB_RECOVERY_FILE_DEST,valid_for=(STANDBY_LOGFILE,STANDBY_ROLE)' scope=spfile
*
ERROR at line 1:
ORA-32017: failure in updating SPFILE
ORA-16179: incremental changes to "log_archive_dest_2" not allowed with SPFILE

这个错误是valid_for前没有空格的原因</pre>
配置好了后，可以通过如下语句查询是否正常
<pre class="lang:default decode:true">select * from v$archive_dest_status;</pre>
如出现如下图的bad param就能确定这log_archive_dest_3配置有问题。

<a href="http://www.itopers.com/wp-content/uploads/2014/05/11.jpg"><img class="alignnone size-full wp-image-680" alt="11" src="http://www.itopers.com/wp-content/uploads/2014/05/11.jpg" width="726" height="253" /></a>

5、设置好参数后，需要重启shutdown immediate  ---&gt;startup

6、在primary中生成文本的参数文件
<pre class="lang:default decode:true">create pfile='/home/oracle/1.pfile' from spfile;</pre>
这里需要修改1.pfile的内容：
<pre class="lang:default decode:true">*.db_unique_name='actvdb02'
*.fal_client='actvdb'
*.fal_server='actvdbbak'
*.log_archive_dest_1='location=/data/U01/app/oracle/oradata/actvdb/archive valid_for=(ONLINE_LOGFILE,ALL_ROLES) db_unique_name=actvdb02'
*.log_archive_dest_2='location=USE_DB_RECOVERY_FILE_DEST valid_for=(STANDBY_LOGFILE,STANDBY_ROLE) db_unique_name=actvdb02'
*.log_archive_dest_3='service=actvdbbak LGWR ASYNC db_unique_name=actvdb01 valid_for=(all_logfiles,primary_role)'
*.local_listener='ACTVDB'</pre>
主要修改这几个参数，将actvdb与actvdbbak进行调换

7、再将生成的pfile文件及密码文件拷贝到standby中
<pre class="lang:default decode:true">[oracle@activity01.cyou.com ~]$scp 1.pfile actvnew.cyou.com:~/
[oracle@activity01.cyou.com ~]$scp /data/U01/app/oracle/product/11.2.0.4/dbs/orapwactvdb actvnew.cyou.com:/data/U01/app/oracle/product/11.2.0.4/dbs/
SQL&gt; create spfile from pfile='/home/oracle/1.pfile';
File created.
然后通过pfile生成spfile,启动到nomount状态
SQL&gt; startup nomount
ORACLE instance started.</pre>
8、然后进行第一次数据同步
<pre class="lang:default decode:true">[oracle@actvnew.cyou.com admin]$rman target sys/123456@actvdbbak auxiliary sys/123456@actvdb
Recovery Manager: Release 11.2.0.4.0 - Production on Mon May 5 17:33:35 2014
Copyright (c) 1982, 2011, Oracle and/or its affiliates.  All rights reserved.
connected to target database: ACTVDB (DBID=2845198203)
connected to auxiliary database: ACTVDB (not mounted)
RMAN&gt; duplicate target database for standby from active database nofilenamecheck;</pre>
查看这两个库的状态，一个是open状态，一个是nomount状态，这是正常的。然后执行duplicate进行复制数据。

注意后面的nofilenamecheck,如果不加这个参数的话，会报错：
<pre class="lang:default decode:true">sql statement: alter database mount standby database
RMAN-00571: ===========================================================
RMAN-00569: =============== ERROR MESSAGE STACK FOLLOWS ===============
RMAN-00571: ===========================================================
RMAN-03002: failure of Duplicate Db command at 05/05/2014 17:24:08
RMAN-05501: aborting duplication of target database
RMAN-05001: auxiliary file name /data/U01/app/oracle/oradata/actvdb/audit_tab01.dbf conflicts with a file used by the target database
RMAN-05001: auxiliary file name /data/U01/app/oracle/oradata/actvdb/users01.dbf conflicts with a file used by the target database
RMAN-05001: auxiliary file name /data/U01/app/oracle/oradata/actvdb/undotbs01.dbf conflicts with a file used by the target database
RMAN-05001: auxiliary file name /data/U01/app/oracle/oradata/actvdb/sysaux01.dbf conflicts with a file used by the target database
RMAN-05001: auxiliary file name /data/U01/app/oracle/oradata/actvdb/system01.dbf conflicts with a file used by the target database</pre>
9、然后将standby打开，这个时候打开是read only状态的
<pre class="lang:default decode:true">[oracle@actvnew.cyou.com admin]$sqlplus / as sysdba
SQL&gt; alter database open;
Database altered.
SQL&gt; alter database recover managed standby database using current logfile disconnect from session;
Database altered.
SQL&gt; !ps -ef | grep mrp
oracle   22754     1  0 17:40 ?        00:00:00 ora_mrp0_actvdb
oracle   22789 22143  0 17:40 pts/0    00:00:00 /bin/bash -c ps -ef | grep mrp
oracle   22791 22789  0 17:40 pts/0    00:00:00 grep mrp
SQL&gt; select sequence#,applied from v$archived_log;

 SEQUENCE# APPLIED
---------- ---------
       312 YES

在primary中查看中最大的是：  
    SEQUENCE# APPLIED
---------- ---------
       312 NO</pre>
通过 alter database recover managed standby database using current logfile disconnect from session;语句启动mrp进程，开启日志实时应用。

可以查看下两个库的状态：
<pre class="lang:default decode:true">primary:
SQL&gt; select db_unique_name,database_role,open_mode from v$database;

DB_UNIQUE_NAME                 DATABASE_ROLE    OPEN_MODE
------------------------------ ---------------- --------------------
actvdb01                       PRIMARY          READ WRITE

standby:
SQL&gt; select db_unique_name,database_role,open_mode from v$database;

DB_UNIQUE_NAME                 DATABASE_ROLE    OPEN_MODE
------------------------------ ---------------- --------------------
actvdb02                       PHYSICAL STANDBY READ ONLY WITH APPLY</pre>
standby显示为：read only with aplly表示正处理日志应用状态

10、如下就可以进行测试了，在primary创建用户、表空间、表，然后到standby中查看是否也存在。
<pre class="lang:default decode:true">SQL&gt; create user test identified by test_test;

User created.

SQL&gt; create tablespace test 
  2  datafile '/data/U01/app/oracle/oradata/actvdb/test01.dbf' size 10M;

Tablespace created.

SQL&gt; alter user test quota unlimited on test;

User altered.

SQL&gt; create table test_table tablespace test as select * from dba_objects;

Table created.</pre>
在standby中能够看到相应的用户、表空间、表了，这表示oracle 11G的主从已经搭建好了。

最后就是要设置下数据保护模式：

Data Guard 允许定义3钟数据保护模式，分别是最大保护（Maximum Protection），最大可用（Maximum Availability）和 最大性能（Maximum Performance）。

1. 最大保护（Maximum Protection）

这种模式能够确保绝无数据丢失。要实现这一步当然是有代价的，它要求所有的事务在提交前其REDO不仅被写入到本地的Online Redologs，还要同时写入到Standby数据库的Standby Redologs，并确认REDO数据至少在一个Standby数据库中可用（如果有多个的话），然后才会在Primary数据库上提交。如果出现了什么故障导致Standby数据库不可用的话（比如网络中断），Primary数据库会被Shutdown，以防止数据丢失。

使用这种方式要求Standby Database 必须配置Standby Redo Log，而Primary Database必须使用LGWR，SYNC，AFFIRM 方式归档到Standby Database.

2. 最高可用性（Maximum availability）

这种模式在不影响Primary数据库可用前提下，提供最高级别的数据保护策略。其实现方式与最大保护模式类似，也是要求本地事务在提交前必须至少写入一台Standby数据库的Standby Redologs中，不过与最大保护模式不同的是，如果出现故障导致Standby数据库无法访问，Primary数据库并不会被Shutdown，而是自动转为最高性能模式，等Standby数据库恢复正常之后，Primary数据库又会自动转换成最高可用性模式。

这种方式虽然会尽量避免数据丢失，但不能绝对保证数据完全一致。这种方式要求Standby Database 必须配置Standby Redo Log，而Primary Database必须使用LGWR，SYNC，AFFIRM 方式归档到Standby Database.

3. 最高性能（Maximum performance）

缺省模式。 这种模式在不影响Primary数据库性能前提下，提供最高级别的数据保护策略。事务可以随时提交，当前Primary数据库的REDO数据至少需要写入一个Standby数据库，不过这种写入可以是不同步的。如果网络条件理想的话，这种模式能够提供类似最高可用性的数据保护，而仅对Primary数据库的性能有轻微影响。这也是创建Standby数据库时，系统的默认保护模式。

这种方式可以使用LGWR ASYNC 或者 ARCH 进程实现，Standby Database也不要求使用Standby Redo Log。

4. 修改数据保护模式步骤

1）关闭数据库，重启到Mount 状态，如果是RAC，需要关闭所有实例，然后只启动一个实例到mount状态。

2）修改模式：

语法：ALTER DATABASE SET STANDBY DATABASE TO MAXIMIZE {PROTECTION | AVAILABILITY | PERFORMANCE};

如：SQL&gt;ALTER DATABASE SET STANDBY DATABASE TO MAXIMIZE PROTECTION;

3) 打开数据库： alter database open;

4) 确认修改数据保护模式：

SQL&gt;select protection_mode,protection_level from v$database;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>679</wp:post_id>
		<wp:post_date><![CDATA[2014-05-06 11:37:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-06 03:37:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oracle-11g-physical-standby%e9%85%8d%e7%bd%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="oracle"><![CDATA[Oracle]]></category>
		<category domain="post_tag" nicename="primary"><![CDATA[primary]]></category>
		<category domain="post_tag" nicename="standby"><![CDATA[standby]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1305]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>oracle 11g switchover</title>
		<link>http://www.itopers.com/?p=684</link>
		<pubDate>Tue, 06 May 2014 09:09:24 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=684</guid>
		<description></description>
		<content:encoded><![CDATA[oracle dataguard搭建请看如下链接

<a href="http://www.itopers.com/?p=679">http://www.itopers.com/?p=679</a>

switchover主要是在数据库升级，硬件升级等进行。如下将如何进行switchover：

在prmary将数据库设置为standby
<pre class="lang:default decode:true">SQL&gt; alter database commit to switchover to physical standby;
Database altered.</pre>
11g时，执行这个命令后，数据库已经关闭了，不需要手动进行关闭了
<pre class="lang:default decode:true">SQL&gt; select db_unique_name,database_role,open_mode,switchover_status from v$database;
select db_unique_name,database_role,open_mode,switchover_status from v$database
*
ERROR at line 1:
ORA-01034: ORACLE not available
Process ID: 2650
Session ID: 458 Serial number: 211</pre>
然后启动启动到mount状态查看：
<pre class="lang:default decode:true">SQL&gt; startup mount
ORACLE instance started.

Total System Global Area 1.3462E+10 bytes
Fixed Size                  2265984 bytes
Variable Size            3321891968 bytes
Database Buffers         1.0133E+10 bytes
Redo Buffers                4460544 bytes
Database mounted.
SQL&gt; select db_unique_name,database_role,open_mode,switchover_status from v$database;

DB_UNIQUE_NAME                 DATABASE_ROLE    OPEN_MODE
------------------------------ ---------------- --------------------
SWITCHOVER_STATUS
--------------------
actvdb01                       PHYSICAL STANDBY MOUNTED
RECOVERY NEEDED</pre>
查看已经是PHYSICAL STANDBY状态了。

打开数据库，这个时候应该是read only状态：
<pre class="lang:default decode:true">SQL&gt; alter database open;

Database altered.

SQL&gt; select db_unique_name,database_role,open_mode,switchover_status from v$database;

DB_UNIQUE_NAME                 DATABASE_ROLE    OPEN_MODE
------------------------------ ---------------- --------------------
SWITCHOVER_STATUS
--------------------
actvdb01                       PHYSICAL STANDBY READ ONLY
RECOVERY NEEDED</pre>
这个时候primary已经变成了standby了。

然后连接到之前的standby服务器上：

先查看状态，确定日志应用是否完整
<pre class="lang:default decode:true">SQL&gt; select db_unique_name,database_role,open_mode from v$database;

DB_UNIQUE_NAME                 DATABASE_ROLE    OPEN_MODE
------------------------------ ---------------- --------------------
actvdb02                       PHYSICAL STANDBY READ ONLY WITH APPLY

SQL&gt; archive log list
Database log mode              Archive Mode
Automatic archival             Enabled
Archive destination            USE_DB_RECOVERY_FILE_DEST
Oldest online log sequence     348
Next log sequence to archive   0
Current log sequence           353
SQL&gt; alter database recover managed standby database cancel;

Database altered.

SQL&gt; select db_unique_name,database_role,open_mode from v$database;

DB_UNIQUE_NAME                 DATABASE_ROLE    OPEN_MODE
------------------------------ ---------------- --------------------
actvdb02                       PHYSICAL STANDBY READ ONLY</pre>
然后将standby切换成primary
<pre class="lang:default decode:true">SQL&gt;  alter database commit to switchover to primary;

Database altered.

SQL&gt; select db_unique_name,database_role,open_mode from v$database;

DB_UNIQUE_NAME                 DATABASE_ROLE    OPEN_MODE
------------------------------ ---------------- --------------------
actvdb02                       PRIMARY          MOUNTED</pre>
完成后，状态已经变成的primary了，注意，在执行切换过程中，不能有任何session连接，如果有会有如下报错：
<pre class="lang:default decode:true">SQL&gt; alter database commit to switchover to primary;
alter database commit to switchover to primary
*
ERROR at line 1:
ORA-01093: ALTER DATABASE CLOSE only permitted with no sessions connected</pre>
把session关闭掉，重新执行即可。

然后打开数据库,在新primary中（也就是老的standby）
<pre class="lang:default decode:true">SQL&gt; alter database open;

Database altered.

SQL&gt; select db_unique_name,database_role,open_mode from v$database;

DB_UNIQUE_NAME                 DATABASE_ROLE    OPEN_MODE
------------------------------ ---------------- --------------------
actvdb02                       PRIMARY          READ WRITE

SQL&gt; select db_unique_name,database_role,open_mode,switchover_status from v$database;

DB_UNIQUE_NAME                 DATABASE_ROLE    OPEN_MODE
------------------------------ ---------------- --------------------
SWITCHOVER_STATUS
--------------------
actvdb02                       PRIMARY          READ WRITE
TO STANDBY</pre>
查看状态已经变成了primary,且为read write了。表示已经成功从standby转成primary了

然后再登录到standby中（之前的primary中）启用mrp进程
<pre class="lang:default decode:true ">SQL&gt; alter database recover managed standby database using current logfile disconnect from session;

Database altered.

SQL&gt; select db_unique_name,database_role,open_mode,switchover_status from v$database;

DB_UNIQUE_NAME                 DATABASE_ROLE    OPEN_MODE
------------------------------ ---------------- --------------------
SWITCHOVER_STATUS
--------------------
actvdb01                       PHYSICAL STANDBY READ ONLY WITH APPLY
NOT ALLOWED</pre>
再查看进程已经是应用日志状态了。

到新的primary中将创建表测试是否能正常应用日志：
<pre class="lang:default decode:true ">SQL&gt; create table test.t11 (id number)tablespace test;

Table created.</pre>
到standby中查看已经能正常传输、应用日志了：
<pre class="lang:default decode:true ">SQL&gt; select owner,table_name from dba_tables where owner='TEST';

OWNER                          TABLE_NAME
------------------------------ ------------------------------
TEST                           T2
TEST                           TEST_TABLE
TEST                           TEST01
TEST                           TEST02
TEST                           TEST03
TEST                           T4
TEST                           T5
TEST                           T7
TEST                           T6
TEST                           T8
TEST                           T11

OWNER                          TABLE_NAME
------------------------------ ------------------------------
TEST                           T9

12 rows selected.</pre>
&nbsp;

只要前面 的配置没有问题，switchover是很简单的，特别注意以下几点：

*.local_listener 这个配置是的自己的tnsname名字

*.fal_client='actvdb'    这个配置的是自己的tnsname,不管是primary，还是standby
*.fal_server='actvdbbak'   这个配置的是对方的tnsname,不管是primary，还是standby

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>684</wp:post_id>
		<wp:post_date><![CDATA[2014-05-06 17:09:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-06 09:09:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oracle-11g-switchover]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dataguard"><![CDATA[dataguard]]></category>
		<category domain="category" nicename="oracle"><![CDATA[Oracle]]></category>
		<category domain="post_tag" nicename="switchover"><![CDATA[switchover]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[829]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>oracle MTS模式下防火墙如何开通</title>
		<link>http://www.itopers.com/?p=689</link>
		<pubDate>Tue, 13 May 2014 11:01:38 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=689</guid>
		<description></description>
		<content:encoded><![CDATA[最近在搭建一台测试环境时，发现开通监听1521端口的防火墙后，远程 连接还是无法连接，只有允许ip不限制端口时就能正常连接到数据库。

原因如下：

首先这台数据库是MTS,也就是共享模式：
<pre class="lang:default decode:true">SQL&gt; show parameter shared_servers;
NAME                                 TYPE        VALUE
------------------------------------ ----------- ------------------------------
max_shared_servers                   integer
shared_servers                       integer     1</pre>
共享模式的连接方式是客户端连接监听如1521后，会redirect到dispatcher，而dispatcher的端口是随机的。如果你只开通了1521，那是连接不了数据库的，你会发现telnet ip 1521通，但就是连接不上数据库。

在这种情况 下你可以用如下方法解决：

可以在客户端进行Dedicated模式连接，在tnsnames.ora中增加SERVER=DEDICATED配置：
<pre class="lang:default decode:true">test =
  (DESCRIPTION =
    (ADDRESS = (PROTOCOL = TCP)(HOST = 192.168.97.1)(PORT = 1521))
    (CONNECT_DATA =
     (SERVER = DEDICATED)
      (SERVICE_NAME = test)
    )
  )</pre>
然后固定dispatcher的端口
<pre class="lang:default decode:true"># vi initSID.ora
*.dispatchers="(address=(protocol=tcp)(port=49316))(dispatchers=3)"</pre>
重启实例

可以这样查看dispatcher的端口，然后再开通防火墙：
<pre class="lang:default decode:true">SQL&gt; select name,network from v$dispatcher;
NAME
----
NETWORK
--------------------------------------------------------------------------------
D000
(ADDRESS=(PROTOCOL=tcp)(HOST=auto_oracle.dmc.com)(PORT=49316))</pre>
配置防火墙允许访问49316端口。

这个时候需要开通两个端口，一个是1521和49316。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>689</wp:post_id>
		<wp:post_date><![CDATA[2014-05-13 19:01:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-05-13 11:01:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oracle-mts%e6%a8%a1%e5%bc%8f%e4%b8%8b%e9%98%b2%e7%81%ab%e5%a2%99%e5%a6%82%e4%bd%95%e5%bc%80%e9%80%9a]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="mts"><![CDATA[mts]]></category>
		<category domain="category" nicename="oracle"><![CDATA[Oracle]]></category>
		<category domain="post_tag" nicename="oracle%e9%98%b2%e7%81%ab%e5%a2%99"><![CDATA[oracle防火墙]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[933]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【转】Oracle Parallel 多线程 </title>
		<link>http://www.itopers.com/?p=695</link>
		<pubDate>Tue, 17 Jun 2014 10:37:12 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=695</guid>
		<description></description>
		<content:encoded><![CDATA[<p align="left">对于一个大的任务，一般的做法是利用一个进程，串行的执行，如果系统资源足够，可以采用parallel技术，把一个大的任务分成若干个小的任务，同时启用n个进程/线程，并行的处理这些小的任务，这些并发的进程称为并行执行服务器(parallel executeion <strong><span style="text-decoration: underline;">server</span></strong>)，这些并发进程由一个称为并发协调进程的进程来管理。</p>
<p align="left"><strong>启用Parallel前的忠告：</strong>只有在需要处理一个很大的任务，如需要几十分钟，几个小时的作业中，并且要有足够的系统资源的情况下(这些资源包括cpu，内存，io),您才应该考虑使用parallel。否则，在一个多并发用户下，系统本身资源负担已经很大的情况下，启用parallel，将会导致某一个会话试图占用了所有的资源，其他会话不得不去等待，从而导致系统系能反而下降的情况，一般情况下，oltp系统不要使用parallel，oltp系统中可以考虑去使用。</p>
<p align="left"></p>
<p align="left">Parallel分类</p>
<p align="left">l  并行查询parallel query</p>
<p align="left">l  并行dml parallel dml pdml</p>
<p align="left">l  并行ddl parallel ddl pddl</p>
<p align="left"></p>
<p align="left">一、 <strong>并行查询</strong></p>
<p align="left">并行查询允许将一个<strong><span style="text-decoration: underline;">sql</span></strong> select语句划分为多个较小的查询，每个部分的查询并发地运行，然后将各个部分的结果组合起来，提供最终的结果，多用于全表扫描，索引全扫描等，大表的扫描和连接、创建大的索引、分区索引扫描、大批量插入更新和删除</p>
<p align="left"></p>
<p align="left">1.    <strong>启用并行查询</strong></p>
<p align="left">SQL&gt; ALTER TABLE T1 PARALLEL;</p>
<p align="left">告知<strong><span style="text-decoration: underline;">oracle</span></strong>，对T1启用parallel查询，但并行度要参照系统的资源负载状况来确定。</p>
<p align="left">利用hints提示，启用并行，同时也可以告知明确的并行度，否则oracle自行决定启用的并行度，这些提示只对该sql语句有效。</p>
<p align="left">SQL&gt; select /*+ parallel(t1 8) */ count(*)from t1;</p>
<p align="left"></p>
<p align="left">SQL&gt; select degree from user_tables <strong><span style="text-decoration: underline;">where</span></strong> table_name='T1';</p>
<p align="left">DEGREE</p>
<p align="left">--------------------</p>
<p align="left">  DEFAULT</p>
<p align="left"></p>
<p align="left">并行度为Default，其值由下面2个参数决定</p>
<p align="left">SQL&gt; show parameter cpu</p>
<p align="left"></p>
<p align="left">NAME                                TYPE       VALUE</p>
<p align="left">----------------------------------------------- ------------------------------</p>
<p align="left">cpu_count                           integer    2</p>
<p align="left">parallel_threads_per_cpu            integer    2</p>
<p align="left"></p>
<p align="left">cpu_count表示cpu数</p>
<p align="left">parallel_threads_per_cpu表示每个cpu允许的并行进程数</p>
<p align="left">default情况下，并行数为cpu_count*parallel_threads_per_cpu</p>
<p align="left"></p>
<p align="left">2.    <strong>取消并行设置</strong></p>
<p align="left">SQL&gt; alter table t1 noparallel;</p>
<p align="left">SQL&gt; select degree from user_tables wheretable_name='T1';</p>
<p align="left"></p>
<p align="left">DEGREE</p>
<p align="left">----------------------------------------</p>
<p align="left">        1</p>
<p align="left"></p>
<p align="left">3.    <strong>数据字典视图</strong></p>
<p align="left">v$px_session</p>
<p align="left">sid：各个并行会话的sid</p>
<p align="left">qcsid：query coordinator sid,查询协调器sid</p>
<p align="left"></p>
<p align="left">二、 <strong>并行dml</strong></p>
<p align="left">并行dml包括insert，update，delete，merge，在pdml期间，oracle可以使用多个并行执行服务器来执行insert，update，delete，merge，多个会话同时执行，同时每个会话(并发进程)都有自己的undo段，都是独立的一个事务，这些事务要么由pdml协调器进程提交，要么都rollback。</p>
<p align="left">在一个有充足I/o带宽的多cpu主机中，对于大规模的dml，速度可能会有很大的提升，尤其是在大型的数据仓库环境中。</p>
<p align="left">并行dml需要显示的启用</p>
<p align="left">SQL&gt; alter session enable parallel dml;</p>
<p align="left"></p>
<p align="left">Disable并行dml</p>
<p align="left">SQL&gt; alter session disable parallel dml;</p>
<p align="left"></p>
<p align="left">三、 <strong>并行ddl</strong></p>
<p align="left">并行ddl提供了dba使用全部机器资源的能力，常用的pddl有</p>
<p align="left">create table as select ……</p>
<p align="left">create index</p>
<p align="left">alter index rebuild</p>
<p align="left">alter table move</p>
<p align="left">alter table split</p>
<p align="left">在这些sql语句后面加上parallel子句</p>
<p align="left">例</p>
<p align="left">SQL&gt; alter table t1 move parallel;</p>
<p align="left">Table altered</p>
<p align="left">SQL&gt; create index T1_IDX on T1 (OWNER,OBJECT_TYPE)</p>
<p align="left"> 2   tablespace SYSTEM</p>
<p align="left">3        parallel;</p>
<p align="left">4        ；</p>

<pre name="code" id="best-answer-content">1．  用途

强行启用并行度来执行当前SQL。这个在Oracle 9i之后的版本可以使用，之前的版本现在没有环境进行测试。也就是说，加上这个说明，可以强行启用Oracle的多线程处理功能。举例的话，就像电脑装了多核的CPU，但大多情况下都不会完全多核同时启用（2核以上的比较明显），使用parallel说明，就会多核同时工作，来提高效率。

但本身启动这个功能，也是要消耗资源与性能的。所有，一般都会在返回记录数大于100万时使用，效果也会比较明显。

2．  语法

/*+parallel(table_short_name,cash_number)*/

这个可以加到insert、delete、update、select的后面来使用（和rule的用法差不多，有机会再分享rule的用法）

开启parallel功能的语句是：

alter session enable parallel dml;

这个语句是DML语句哦，如果在程序中用，用execute的方法打开。

3．  实例说明

用ERP中的transaction来说明下吧。这个table记录了所有的transaction，而且每天数据量也算相对比较大的（根据企业自身业务量而定）。假设我们现在要查看对比去年一年当中每月的进、销情况，所以，一般都会写成：

select to_char(transaction_date,'yyyymm') txn_month,

       sum(

        decode(

            sign(transaction_quantity),1,transaction_quantity,0
              )

          ) in_qty,

       sum(

        decode(

            sign(transaction_quantity),-1,transaction_quantity,0
              )

          ) out_qty

  from mtl_material_transactions mmt

 where transaction_date &gt;= add_months(

                            to_date(    

                                to_char(sysdate,'yyyy')||'0101','yyyymmdd'),

                                -12)

   and transaction_date &lt;= add_months(

                            to_date(

                                to_char(sysdate,'yyyy')||'1231','yyyymmdd'),

                                -12)

group by to_char(transaction_date,'yyyymm') 

这个SQL执行起来，如果transaction_date上面有加index的话，效率还算过的去；但如果没有加index的话，估计就会半个小时内都执行不出来。这是就可以在select 后面加上parallel说明。例如：
select /*+parallel(mmt,10)*/
       to_char(transaction_date,'yyyymm') txn_month,

...

这样的话，会大大提高执行效率。如果要将检索出来的结果insert到另一个表tmp_count_tab的话，也可以写成：
insert /*+parallel(t,10)*/
  into tmp_count_tab

(

    txn_month,

    in_qty,

    out_qty

)

select /*+parallel(mmt,10)*/
       to_char(transaction_date,'yyyymm') txn_month,

...

插入的机制和检索机制差不多，所以，在insert后面加parallel也会加速的。关于insert机制，这里暂不说了。
Parallel后面的数字，越大，执行效率越高。不过，貌似跟server的配置还有oracle的配置有关，增大到一定值，效果就不明显了。所以，一般用8,10,12,16的比较常见。我试过用30，发现和16的效果一样。不过，数值越大，占用的资源也会相对增大的。如果是在一些package、function or procedure中写的话，还是不要写那么大，免得占用太多资源被DBA开K。

4．  Parallel也可以用于多表

多表的话，就是在第一后面，加入其他的就可以了。具体写法如下：

/*+parallel(t,10) (b,10)*/

5．  小结

关于执行效率，建议还是多按照index的方法来提高效果。Oracle有自带的explan road的方法，在执行之前，先看下执行计划路线，对写好的SQL tuned之后再执行。实在没办法了，再用parallel方法。Parallel比较邪恶，对开发者而言，不是好东西，会养成不好习惯，导致很多bad SQL不会暴漏，SQL Tuning的能力得不到提升。我有见过某些人create table后，从不create index或primary key，认为写SQL时加parallel就可以了。</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>695</wp:post_id>
		<wp:post_date><![CDATA[2014-06-17 18:37:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-17 10:37:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oracle-parallel-%e5%a4%9a%e7%ba%bf%e7%a8%8b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="oracle"><![CDATA[Oracle]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1004]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>oracle大表创建索引</title>
		<link>http://www.itopers.com/?p=699</link>
		<pubDate>Mon, 30 Jun 2014 15:22:35 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=699</guid>
		<description></description>
		<content:encoded><![CDATA[20多亿条数据，需要在线添加索引。如下是添加索引遇到的问题及方法：

服务器cpu:24  core    124G内存

数据库构架：primary--standby

开始创建，通过parallel参数进行多进程添加。
<pre class="lang:default decode:true ">SQL&gt; set timing on
SQL&gt; CREATE INDEX tlbb.IND_SERVER_LOG_PUTDATE ON tlbb.TLBB_SERVER_LOG(PUT_DATE)
  2  TABLESPACE TLBB_INDEX parallel 15 online;
CREATE INDEX tlbb.IND_SERVER_LOG_PUTDATE ON tlbb.TLBB_SERVER_LOG(PUT_DATE)
                                                 *
ERROR at line 1:
ORA-01652: unable to extend temp segment by 128 in tablespace TEMP
Elapsed: 00:45:41.53</pre>
第一次添加失败了，原因是temp表空间不够，导致失败。
<pre class="lang:default decode:true ">SQL&gt; select file_name,bytes/1024/1024 "MB",autoextensible,tablespace_name from dba_temp_files;

FILE_NAME
--------------------------------------------------------------------------------
        MB AUT TABLESPACE_NAME
---------- --- ------------------------------
+DATA/sgstatdb3/tempfile/temp.910.840550051
32767.9844 YES TEMP

+DATA/sgstatdb3/tempfile/temp.909.840550051
      6144 YES TEMP

Elapsed: 00:00:00.13
SQL&gt; set linesize 200;
SQL&gt; select file_name,bytes/1024/1024 "MB",autoextensible,tablespace_name from dba_temp_files;

FILE_NAME
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        MB AUT TABLESPACE_NAME
---------- --- ------------------------------
+DATA/sgstatdb3/tempfile/temp.910.840550051
32767.9844 YES TEMP

+DATA/sgstatdb3/tempfile/temp.909.840550051
      6144 YES TEMP

Elapsed: 00:00:00.11</pre>
添加表空间文件，根据表的数据量，添加相应的临时表空间数据文件：本次我添加了7个：防止再次出现临时表空间不足问题。
<pre class="lang:default decode:true">alter tablespace TEMP add tempfile '+DATA' size 50M AUTOEXTEND ON next 1M maxsize unlimited;</pre>
第一次将parallel设置为15，服务器的负载没有太多变化，正常情况下。该服务器支持48个parallel。但是不能开太高，不然影响线上业务。
<pre class="lang:default decode:true ">SQL&gt;  CREATE INDEX tlbb.IND_SERVER_LOG_PUTDATE ON tlbb.TLBB_SERVER_LOG(PUT_DATE) TABLESPACE TLBB_INDEX parallel 20 online;

Index created.

Elapsed: 01:43:39.36</pre>
这次将parallel添加到了20，终于经过了1小时43分钟，索引终于创建完了。

如果没有配置standby的情况下，再加个nologging又会再快很多。有standby了就不行了，因为已经force logging了。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>699</wp:post_id>
		<wp:post_date><![CDATA[2014-06-30 23:22:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-06-30 15:22:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oracle%e5%a4%a7%e8%a1%a8%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="oracle"><![CDATA[Oracle]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[2006]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dell R710 Raid卡及电池迁移（硬盘冷迁移）</title>
		<link>http://www.itopers.com/?p=710</link>
		<pubDate>Fri, 29 Aug 2014 09:02:17 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=710</guid>
		<description></description>
		<content:encoded><![CDATA[昨天mysql DB服务器主板故障，需要进行硬盘的冷迁移，代维进行raid卡电池迁移时，不小心将raid卡电池与raid卡断开了。导致raid卡掉电，数据丢失。后面就不用说了，冷迁移失败。

如下主要是简单介绍下dell R710 raid卡迁移方法：

1、  先将两台机器从机柜下搬下来

2、  然后将备机的硬盘、raid卡及raid卡电池拆下来放到一边。

3、  再进行将故障机的硬盘拆下，按顺序插入备机中，（为安全着想拆一块装一块）

4、  再拆raid卡时，注意与raid卡电池一定要保持线路连接，不能让raid卡掉电；
<p style="padding-left: 30px;">a)先拆raid卡电池，把线上的卡片全部取下，然后轻轻理清线，直接到raid卡处</p>
<p style="padding-left: 30px;">b)将raid卡的数据线拆下（连接硬盘的线）</p>
<p style="padding-left: 30px;">c)将raid卡两边的卡片向外轻轻用力，拔出raid卡</p>
5、  然后将拆下来的raid卡，安装到备机中，先安装raid卡，再安装raid电池。

其实迁移挺简单，在整个迁移过程中主要需要注意两点：
<p style="padding-left: 30px;">一、硬盘顺序不能乱；</p>
<p style="padding-left: 30px;">二、Raid卡不能掉电。</p>
只要把这两个点保证了，冷迁移基本没有什么问题。

如下是dell R710 Raid卡及电池图片：

<a href="http://www.itopers.com/wp-content/uploads/2014/08/1.jpg"><img class="size-full wp-image-711 aligncenter" alt="1" src="http://www.itopers.com/wp-content/uploads/2014/08/1.jpg" width="608" height="454" /></a>
<p align="center">上图是Dell  R710 raid卡</p>
 <a href="http://www.itopers.com/wp-content/uploads/2014/08/2.jpg"><img class="aligncenter" alt="2" src="http://www.itopers.com/wp-content/uploads/2014/08/2.jpg" width="602" height="362" /></a>
<p align="center">上图为raid卡电池</p>
 <a href="http://www.itopers.com/wp-content/uploads/2014/08/33.jpg"><img class="aligncenter" alt="33" src="http://www.itopers.com/wp-content/uploads/2014/08/33.jpg" width="556" height="416" /></a>
<p align="center">Dell R710 内部结构图（raid卡电池与raid卡的位置）</p>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>710</wp:post_id>
		<wp:post_date><![CDATA[2014-08-29 17:02:17]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-08-29 09:02:17]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dell-r710-raid%e5%8d%a1%e5%8f%8a%e7%94%b5%e6%b1%a0%e8%bf%81%e7%a7%bb%ef%bc%88%e7%a1%ac%e7%9b%98%e5%86%b7%e8%bf%81%e7%a7%bb%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="raid"><![CDATA[raid]]></category>
		<category domain="post_tag" nicename="raid%e5%8d%a1%e7%94%b5%e6%b1%a0"><![CDATA[raid卡电池]]></category>
		<category domain="post_tag" nicename="%e5%86%b7%e8%bf%81%e7%a7%bb"><![CDATA[冷迁移]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[3299]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>oracle的clone及冷迁移（直接拷贝数据文件）</title>
		<link>http://www.itopers.com/?p=722</link>
		<pubDate>Fri, 05 Sep 2014 12:12:29 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=722</guid>
		<description></description>
		<content:encoded><![CDATA[最近做了个oracle 10g数据冷迁移，很简单，但还是写一下基本的操作过程：

首先是准备迁移目标服务器，初始化环境，安装数据软件。

基本的环境初始化、依赖包先安装好、相关目录、用户都需要安装好（目标机器环境要与原一样），安装数据库软件我是采用的clone，将线上的product目录打包传到目标服务器。

内存检查
<pre class="lang:default decode:true">grep MemTotal /proc/meminfo
MemTotal:     32949816 kB
</pre>
磁盘空间检查
<pre class="lang:vim decode:true ">df -k /dev/shm/
Filesystem           1K-blocks      Used Available Use% Mounted on
tmpfs                 16474908         0  16474908   0% /dev/shm
df -h /tmp
Filesystem            Size  Used Avail Use% Mounted on
/dev/shm               16G     0   16G   0% /tmp</pre>
内核检查
<pre class="lang:vim decode:true ">uname -r
2.6.18-194.el5</pre>
依赖包检查
<pre class="lang:vim decode:true ">rpm -q \
binutils \
compat-libstdc++-33 \
elfutils-libelf \
elfutils-libelf-devel \
gcc \
gcc-c++ \
glibc \
glibc-common \
glibc-devel \
glibc-headers \
ksh \
libaio \
libaio-devel \
libgcc \
libgomp \
libstdc++ \
libstdc++-devel \
make \
numactl-devel \
sysstat \
unixODBC \
unixODBC-devel | grep "not installed"</pre>
创建用户
<pre class="lang:default decode:true">groupadd oinstall
groupadd dba
chattr -i /etc/passwd /etc/shadow
useradd -g oinstall -G dba oracle
passwd oracle
chattr +i /etc/passwd /etc/shadow
</pre>
目录创建、环境参数修改等
<pre class="lang:default decode:true">vi /etc/sysctl.conf
fs.aio-max-nr = 1048576
fs.file-max = 6815744
kernel.shmall = 8388608
kernel.shmmax = 34359738368
kernel.shmmni = 4096
kernel.sem = 250 32000 100 128
net.ipv4.ip_local_port_range = 9000 65500
net.core.rmem_default = 262144
net.core.rmem_max = 4194304
net.core.wmem_default = 262144
net.core.wmem_max = 1048586

sysctl -p

vi /etc/security/limits.conf
oracle              soft    nproc   2047
oracle              hard    nproc   16384
oracle              soft    nofile  1024
oracle              hard    nofile  65536
oracle              soft    stack   10240

mkdir -p /U01/app/oracle/
chown -R oracle:oinstall /U01/
chmod -R 775 /U01/

vi /etc/pam.d/login
session    required     pam_limits.so

vi /etc/profile
if [ $USER = "oracle" ]; then
        if [ $SHELL = "/bin/ksh" ]; then
              ulimit -p 16384
              ulimit -n 65536
        else
              ulimit -u 16384 -n 65536
        fi
fi

vi .bash_profile
export ORACLE_BASE=/U01/app/oracle
export ORACLE_HOME=$ORACLE_BASE/product/10.2.0/db_1 
export ORACLE_SID=test
export PATH=$ORACLE_HOME/bin:$ORACLE_HOME/OPatch:$ORACLE_HOME/jdk/bin:$PATH 
export LANG="en_US.UTF-8" 
export NLS_LANG=american_AMERICA.UTF8 
export NLS_DATE_FORMAT="YYYY-MM-DD HH24:MI:SS"</pre>
开始打包原服务器oracle软件
<pre class="lang:default decode:true">[@crm.cyou.com product]# pwd
/U01/app/oracle/product
[@crm.cyou.com product]# tar -zcf 10.2.0.tgz 10.2.0</pre>
拷贝到目标服务器，解压，开始clone
<pre class="lang:default decode:true">cd $ORACLE_HOME/clone/bin/
perl clone.pl ORACLE_BASE=/U01/app/oracle ORACLE_HOME=/U01/app/oracle/product/10.2.0  ORACLE_HOME_NAME=db_1
./runInstaller -clone -waitForCompletion  "ORACLE_BASE=/U01/app/oracle" "ORACLE_HOME=/U01/app/oracle/product/10.2.0/db_1" "ORACLE_HOME_NAME=db_1" -silent -noConfig -nowait
Starting Oracle Universal Installer...

Checking swap space: must be greater than 500 MB.   Actual 16386 MB    Passed
Preparing to launch Oracle Universal Installer from /tmp/OraInstall2012-03-21_05-09-02PM. Please wait ...Oracle Universal Installer, Version 10.2.0.0 Production
Copyright (C) 1999, 2011, Oracle. All rights reserved.

You can find the log of this install session at:
/U01/app/oracle/oraInventory/logs/cloneActions.....2PM.log
.................................................................................................... 100% Done.

Installation in progress (Wednesday, March 21, ... 5:09:10 PM CST)
...............................................................................                                                 79% Done.
Install successful

Linking in progress (Wednesday, March 21,... 5:09:16 PM CST)
Link successful

Setup in progress (Wednesday, March 21, ... 5:09:46 PM CST)
Setup successful

End of install phases.(Wednesday, March 21, ....:08 PM CST)
WARNING:A new inventory has been created in this session. However, it has not yet been registered as the central inventory of this system.
To register the new inventory please run the script '/U01/app/oracle/oraInventory/orainstRoot.sh' with root privileges.
If you do not register the inventory, you may not be able to update or patch the products you installed.
The following configuration scripts need to be executed as the "root" user.
/U01/app/oracle/oraInventory/orainstRoot.sh
/U01/app/oracle/product/10.2.0/db_1/root.sh
To execute the configuration scripts:
    1. Open a terminal window
    2. Log in as "root"
    3. Run the scripts

The cloning of db_1 was successful.
Please check '/U01/app/oracle/oraInventory/logs/cloneActions......PM.log' for more details.
9.run sh scripts
[root@bf_test_qd_119 ~]# /U01/app/oracle/oraInventory/orainstRoot.sh
Changing permissions of /U01/app/oracle/oraInventory.
Adding read,write permissions for group.
Removing read,write,execute permissions for world.

Changing groupname of /U01/app/oracle/oraInventory to oinstall.
The execution of the script is complete.
[root@bf_test_qd_119 ~]# /U01/app/oracle/product/10.2.0/db_1/root.sh
Check /U01/app/oracle/product/10.2.0/db_1/install/......</pre>
这个clone很快，ok后，可以停原oracle实例及监听
<pre class="lang:default decode:true">select distinct username from v$session;  查看应用是否停完
下面停掉所有监听
lsnrctl stop LISTENER
lsnrctl stop LISTENER1532
lsnrctl stop LISTENER1528
lsnrctl stop LISTENER1525</pre>
停数据库
<pre class="lang:default decode:true">shutdown immediate   //确定应用停完后，开始停数据库</pre>
开始拷贝数据文件
<pre class="lang:default decode:true">scp -r /U01/app/oracle/product/10.2.0/dbs/*  1.1.1.1:/U01/app/oracle/product/10.2.0/dbs/
scp -r oradata/ 1.1.1.1:/U01/app/oracle/

cd /U01/app/oracle/admin/ldjbmdb &amp;&amp; mkdir -p adump  bdump  cdump  dpdump  pfile  udump  utl_file
cd /U01/app/oracle &amp;&amp; mkdir -p arch  flash_recovery_area    oraInventory</pre>
需要拷贝的包括如下：

1、控制文件

2、数据文件

3、参数文件spfile   (环境一致)

4、密码文件

5、redo

没有首先检查这些文件的路径，然后再进行拷贝，这里我的目录基本都没有变，控制文件、数据文件、redo都 在oradata里，密码文件、参数文件都在dbs目录里。所以我只要拷贝两个目录就行。

然后就创建相应的目录，启动数据库
<pre class="lang:default decode:true">startup mount;
alter database archivelog;
alter database open;
archive log list;
ALTER DATABASE FORCE LOGGING;
select log_mode,force_logging from v$database;

启监听
lsnrctl start LISTENER
lsnrctl start LISTENER1532
lsnrctl start LISTENER1528
lsnrctl start LISTENER1525</pre>
把数据库开启了archivelog（选择冷迁移的原因就在这里）

后面还有些步骤就是：

a.检查计划任务

b.防火墙

c.数据库自启动

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>722</wp:post_id>
		<wp:post_date><![CDATA[2014-09-05 20:12:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-09-05 12:12:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oracle%e7%9a%84clone%e5%8f%8a%e5%86%b7%e8%bf%81%e7%a7%bb%ef%bc%88%e7%9b%b4%e6%8e%a5%e6%8b%b7%e8%b4%9d%e6%95%b0%e6%8d%ae%e6%96%87%e4%bb%b6%ef%bc%89]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="oracle"><![CDATA[Oracle]]></category>
		<category domain="post_tag" nicename="oracle-clone"><![CDATA[oracle clone]]></category>
		<category domain="post_tag" nicename="%e5%86%b7%e8%bf%81%e7%a7%bb"><![CDATA[冷迁移]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1875]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>oracle 10g dgmgrl主从搭建</title>
		<link>http://www.itopers.com/?p=755</link>
		<pubDate>Thu, 06 Nov 2014 08:51:49 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=755</guid>
		<description></description>
		<content:encoded><![CDATA[dgmrl oracle 10G  dg配置
1、安装数据库版本，这里直接clone的方式进行安装

<a href="http://www.itopers.com/?p=722">http://www.itopers.com/?p=722</a>
2、进行一次全备，使用rman进行，如下提供下备份脚本：
<pre class="lang:vim decode:true">#!/bin/bash
#
#  oracle full backup
#
date="$(date "+%F")"
# backup dir
dir="/home/oracle/backup_stage/${date}"
if [ -d "$dir" ];then
    for i in `seq 10`
    do
        if [ ! -d "${dir}_${i}" ];then 
                dir="${dir}_${i}"
                break;
        else
                continue;
        fi
    done
fi
#create backup dir
[ ! -d $dir ] &amp;&amp; mkdir $dir -p
chown -R oracle.oinstall $dir
# check user
if [ "$USER" != "oracle" ];then
        echo "please execute this shell to  oracle"
        echo ""
        exit 1
fi
# begin backup 
rman target / log=$dir/incre_$date.log append &lt;&lt;!
run {
        allocate channel c1 device type  disk;
        allocate channel c2 device type  disk;
        allocate channel c3 device type  disk;
        set command id to "rman_$date";
        backup incremental level 0 format '$dir/incre_0_%U' tag 'incre_0_${date}_bak' database;
        release channel c1;
        release channel c2;
        release channel c3;
}

run {
        allocate channel c4 device type  disk;
        allocate channel c5 device type  disk;
        backup archivelog all format '$dir/archive_0_%U' tag 'archivelog_$date' delete all input;
        backup current controlfile for standby format '$dir/ctl_%U';
        release channel c4;
        release channel c5;
}
exit
!

# backup init.ora and controlfile
rm -rf /tmp/init.ora /tmp/otl.ctl
sqlplus /nolog&lt;&lt;!
        conn / as sysdba;
        create pfile='/tmp/init.ora' from spfile;
        alter database backup controlfile to trace as '/tmp/otl.ctl';
        exit;
!
# copy backup to backup dir
cp $ORACLE_HOME/dbs/orapw* /tmp/init.ora /tmp/otl.ctl $dir

# backup end</pre>
将备份拷到从库服务器上，我这里就是是nfs的方式，直接挂载就行。

3、修改下初始化文件，需要修改下db_unique_name，log_archive_dest_*，fal_server/fal_client参数
<pre class="lang:vim decode:true">SQL&gt; create spfile from pfile='/home/oracle/backup_stage/2014-11-04/init.ora';

File created.

SQL&gt; startup nomount;
ORACLE instance started.

Total System Global Area 1.0737E+10 bytes
Fixed Size 2114144 bytes
Variable Size 2298482080 bytes
Database Buffers 8422162432 bytes
Redo Buffers 14659584 bytes</pre>
4、启到nomount后，进入rman进行恢复备份。

先恢复控制文件，然后启到mount状态
<pre class="lang:vim decode:true">[oracle@statdb 2014-11-04]$ rman target /
RMAN&gt; restore controlfile from '/home/oracle/backup_stage/2014-11-04/ctl_2ppmpuql_1_1';

Starting restore at 2014-11-04 22:35:41
using channel ORA_DISK_1

channel ORA_DISK_1: restoring control file
channel ORA_DISK_1: restore complete, elapsed time: 00:00:04
output filename=/U01/app/oracle/oradata/nstatdb/control01.ctl
output filename=/U01/app/oracle/oradata/nstatdb/control02.ctl
output filename=/U01/app/oracle/oradata/nstatdb/control03.ctl
Finished restore at 2014-11-04 22:35:46

RMAN&gt; alter database mount;

database mounted
released channel: ORA_DISK_1</pre>
&nbsp;

5、查看下备份。
<pre class="lang:vim decode:true ">RMAN&gt;list backup;</pre>
6、恢复数据库
<pre class="lang:vim decode:true ">RMAN&gt;restore database;</pre>
8、开始配置dg,将已经存在的configuration配置删除，remove configuration;配置好网络，tnsname,使用tnsping测试连通性。

在主从将dg_broker开启来
<pre class="lang:vim decode:true">alter system set dg_broker_start =true;</pre>
9、进入dgmgrl管理，创建dg
<pre class="lang:vim decode:true">[oracle@statnew backup_stage]$ dgmgrl /           
DGMGRL&gt; show configuration;
Error: ORA-16532: Data Guard broker configuration does not exist

Configuration details cannot be determined by DGMGRL
DGMGRL&gt; 
DGMGRL&gt; CREATE CONFIGURATION statdb_dg AS PRIMARY DATABASE IS nstatdb CONNECT IDENTIFIER IS nstatdb;
Configuration "statdb_dg" created with primary database "nstatdb"
DGMGRL&gt; ADD DATABASE snstatdb2 AS CONNECT IDENTIFIER IS snstatdb2 MAINTAINED AS PHYSICAL;
Database "snstatdb2" added
DGMGRL&gt;  show configuration;

Configuration
  Name:                statdb_dg
  Enabled:             NO
  Protection Mode:     MaxPerformance
  Fast-Start Failover: DISABLED
  Databases:
    nstatdb   - Primary database
    snstatdb2 - Physical standby database

Current status for "statdb_dg":
DISABLED

DGMGRL&gt; enable configuration;
Enabled.
DGMGRL&gt; show configuration;

Configuration
  Name:                statdb_dg
  Enabled:             YES
  Protection Mode:     MaxPerformance
  Fast-Start Failover: DISABLED
  Databases:
    nstatdb   - Primary database
    snstatdb2 - Physical standby database

Current status for "statdb_dg":
SUCCESS
</pre>
看到success已经创建成功。

附下其它查询常用查询语句：

查看数据库状态：
<pre class="lang:vim decode:true ">select db_unique_name,database_role,open_mode,switchover_status from v$database;</pre>
查看日志应用情况
<pre class="lang:vim decode:true ">select sequence#,applied from v$archived_log order by sequence# desc;</pre>
查询日志是否存在gap
<pre class="lang:vim decode:true">select * from v$archive_gap;</pre>
手动应用日志
<pre class="lang:vim decode:true ">alter database register physical logfile '/home/oracle/backup_stage/arch/1_31026_742841399.dbf';</pre>
查看从服务器上日志应用情况
<pre class="lang:vim decode:true ">SQL&gt; select process,pid,status,thread#,group#,sequence#,delay_mins from v$managed_standby;

PROCESS          PID STATUS          THREAD# GROUP#                                    SEQUENCE# DELAY_MINS
--------- ---------- ------------ ---------- ---------------------------------------- ---------- ----------
ARCH            2045 CONNECTED             0 N/A                                               0          0
ARCH            2047 CONNECTED             0 N/A                                               0          0
MRP0            2306 WAIT_FOR_GAP          1 N/A                                           31011          0</pre>
出现的问题

1、在主上添加dg后，dg_broker_config_file2配置文件没有同步，日志提示文件没有找到，后来将主从的dg_broker_start参数设置成false后，再设置成true，重新创建dg后正常

2、dg中show configuration;查看dg状态时，显示是success，无任务报错日志，但是没有同步日志。
<pre class="lang:vim decode:true ">Waiting for all non-current ORLs to be archived...
Media Recovery Waiting for thread 1 sequence 31028
Thu Nov 06 11:22:10 CST 2014
Completed: ALTER DATABASE RECOVER MANAGED STANDBY DATABASE  THROUGH ALL SWITCHOVER DISCONNECT  NODELAY
Thu Nov 06 11:36:38 CST 2014</pre>
在主要alter system switch logfile;也没有反应。

问题解决：

不知道为什么，之前是把从日志放到闪回里的，后面指定了一个目录，就可以了。

StandbyArchiveLocation          = '/U01/app/oracle/admin/nstatdb/arch'

然后就能正常传输日志了，由于之前的日志没有传输过来，重新手动进行传
<pre class="lang:vim decode:true ">FAL[client]: Failed to request gap sequence 
 GAP - thread 1 sequence 31028-31068
 DBID 1351766453 branch 742841399
FAL[client]: All defined FAL servers have been attempted.
-------------------------------------------------------------
Check that the CONTROL_FILE_RECORD_KEEP_TIME initialization
parameter is defined to a value that is sufficiently large
enough to maintain adequate log switch information to resolve
archivelog gaps.</pre>
生成应用日志语句。
<pre class="lang:vim decode:true ">[oracle@statnew arch]$ for i in `seq 31028 31068`
&gt; do
&gt; echo "alter database register physical logfile '/home/oracle/backup_stage/arch/1_${i}_742841399.dbf';"     
&gt; done</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>755</wp:post_id>
		<wp:post_date><![CDATA[2014-11-06 16:51:49]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-06 08:51:49]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[oracle-10g-dgmgrl%e4%b8%bb%e4%bb%8e%e6%90%ad%e5%bb%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dg"><![CDATA[dg]]></category>
		<category domain="post_tag" nicename="dgmgrl"><![CDATA[dgmgrl]]></category>
		<category domain="category" nicename="oracle"><![CDATA[Oracle]]></category>
		<category domain="post_tag" nicename="oracle-2"><![CDATA[oracle]]></category>
		<category domain="post_tag" nicename="standby"><![CDATA[standby]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[534]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sysbench安装需要的依赖包及出现的问题</title>
		<link>http://www.itopers.com/?p=758</link>
		<pubDate>Fri, 21 Nov 2014 08:20:36 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=758</guid>
		<description></description>
		<content:encoded><![CDATA[在安装和使用sysbench时遇到的问题记录下

一个是源码安装系统环境要求：

需要安装m4  autoconf  automake libtool 这几个包，通过yum install m4  autoconf  automake libtool可进行安装

否则会报如下错误：
<pre class="lang:sh decode:true ">[root@sever2 sysbench-0.4.12-1.1]# ./autogen.sh 
automake 1.10.x (aclocal) wasn't found, exiting
[root@sever2 sysbench-0.4.12-1.1]# ./autogen.sh 
libtoolize 1.4+ wasn't found, exiting</pre>
二是 执行autogen.sh后，进行./configure，如果用来测试mysql的话，指定了几个参数。指定错了。

--with-mysql-includes  和 --with-mysql-libs
<pre class="lang:vim decode:true">[root@sever2 sysbench-0.4.12-1.1]# ./configure --with-mysql-includes=/usr/local/mysql/include --with-mysql-libs=/usr/local/mysql/lib
。。。。。略
[root@sever2 sysbench-0.4.12-1.1]#  make
make[3]: Entering directory `/home/packages/sysbench-0.4.12-1.1/sysbench/drivers/mysql'
gcc -DHAVE_CONFIG_H -I. -I../../../config  -I/usr/local/mysql/include -I../../../sysbench -D_XOPEN_SOURCE=500 -D_GNU_SOURCE  -W -Wall -Wextra -Wpointer-arith -Wbad-function-cast   -Wstrict-prototypes -Wnested-externs -Winline   -funroll-loops  -Wundef -Wstrict-prototypes -Wmissing-prototypes -Wmissing-declarations -Wredundant-decls -Wcast-align        -pthread -O2 -ggdb3  -MT libsbmysql_a-drv_mysql.o -MD -MP -MF .deps/libsbmysql_a-drv_mysql.Tpo -c -o libsbmysql_a-drv_mysql.o `test -f 'drv_mysql.c' || echo './'`drv_mysql.c
drv_mysql.c:36:19: 错误：mysql.h：没有那个文件或目录
drv_mysql.c:37:26: 错误：mysqld_error.h：没有那个文件或目录
drv_mysql.c:43:5: 警告：“MYSQL_VERSION_ID”未定义
drv_mysql.c:48:5: 警告：“MYSQL_VERSION_ID”未定义
drv_mysql.c: 在函数‘mysql_drv_init’中:
drv_mysql.c:244: 警告：隐式声明函数‘mysql_library_init’
drv_mysql.c:244: 警告：对‘mysql_library_init’的嵌套的外部声明
drv_mysql.c: 在函数‘mysql_drv_connect’中:
drv_mysql.c:266: 错误：‘MYSQL’未声明(在此函数内第一次使用)
drv_mysql.c:266: 错误：(即使在一个函数内多次出现，每个未声明的标识符在其
drv_mysql.c:266: 错误：所在的函数内也只报告一次。)
drv_mysql.c:266: 错误：‘con’未声明(在此函数内第一次使用)
drv_mysql.c:273: 错误：expected expression before ‘)’ token
drv_mysql.c:279: 警告：隐式声明函数‘mysql_init’
drv_mysql.c:279: 警告：对‘mysql_init’的嵌套的外部声明
drv_mysql.c:318: 警告：隐式声明函数‘mysql_ssl_set’
drv_mysql.c:318: 警告：对‘mysql_ssl_set’的嵌套的外部声明
drv_mysql.c:321: 错误：‘MYSQL_VERSION_ID’未声明(在此函数内第一次使用)
drv_mysql.c:331: 警告：隐式声明函数‘mysql_real_connect’
drv_mysql.c:331: 警告：对‘mysql_real_connect’的嵌套的外部声明
drv_mysql.c:338:5: 警告：“MYSQL_VERSION_ID”未定义
drv_mysql.c:346: 警告：隐式声明函数‘mysql_errno’
drv_mysql.c:346: 警告：对‘mysql_errno’的嵌套的外部声明
drv_mysql.c:347: 警告：隐式声明函数‘mysql_error’
drv_mysql.c:347: 警告：对‘mysql_error’的嵌套的外部声明
drv_mysql.c: 在函数‘mysql_drv_disconnect’中:
drv_mysql.c:361: 错误：‘MYSQL’未声明(在此函数内第一次使用)
drv_mysql.c:361: 错误：‘con’未声明(在此函数内第一次使用)
drv_mysql.c:366: 警告：隐式声明函数‘mysql_close’
drv_mysql.c:366: 警告：对‘mysql_close’的嵌套的外部声明
drv_mysql.c: 在函数‘mysql_drv_bind_param’中:
drv_mysql.c:441: 错误：‘MYSQL’未声明(在此函数内第一次使用)
drv_mysql.c:441: 错误：‘con’未声明(在此函数内第一次使用)
drv_mysql.c:441: 错误：expected expression before ‘)’ token
drv_mysql.c: 在函数‘mysql_drv_query’中:
drv_mysql.c:657: 错误：‘MYSQL’未声明(在此函数内第一次使用)
drv_mysql.c:657: 错误：‘con’未声明(在此函数内第一次使用)
drv_mysql.c:661: 警告：隐式声明函数‘mysql_real_query’
drv_mysql.c:661: 警告：对‘mysql_real_query’的嵌套的外部声明
drv_mysql.c:667: 错误：‘ER_LOCK_DEADLOCK’未声明(在此函数内第一次使用)
drv_mysql.c:667: 错误：‘ER_LOCK_WAIT_TIMEOUT’未声明(在此函数内第一次使用)
drv_mysql.c:668: 错误：‘ER_CHECKREAD’未声明(在此函数内第一次使用)
drv_mysql.c: 在函数‘mysql_drv_fetch_row’中:
drv_mysql.c:696: 警告：隐式声明函数‘mysql_fetch_row’
drv_mysql.c:696: 警告：对‘mysql_fetch_row’的嵌套的外部声明
drv_mysql.c:696: 警告：赋值时将整数赋给指针，未作类型转换
drv_mysql.c: 在函数‘mysql_drv_store_results’中:
drv_mysql.c:723: 错误：‘MYSQL’未声明(在此函数内第一次使用)
drv_mysql.c:723: 错误：‘con’未声明(在此函数内第一次使用)
drv_mysql.c:724: 错误：‘MYSQL_RES’未声明(在此函数内第一次使用)
drv_mysql.c:724: 错误：‘res’未声明(在此函数内第一次使用)
drv_mysql.c:725: 错误：‘MYSQL_ROW’未声明(在此函数内第一次使用)
drv_mysql.c:725: 错误：expected ‘;’ before ‘row’
drv_mysql.c:769: 警告：隐式声明函数‘mysql_store_result’
drv_mysql.c:769: 警告：对‘mysql_store_result’的嵌套的外部声明
drv_mysql.c:775: 错误：‘ER_LOCK_DEADLOCK’未声明(在此函数内第一次使用)
drv_mysql.c:775: 错误：‘ER_LOCK_WAIT_TIMEOUT’未声明(在此函数内第一次使用)
drv_mysql.c:776: 错误：‘ER_CHECKREAD’未声明(在此函数内第一次使用)
drv_mysql.c:783: 警告：隐式声明函数‘mysql_field_count’
drv_mysql.c:783: 警告：对‘mysql_field_count’的嵌套的外部声明
drv_mysql.c:790: 警告：隐式声明函数‘mysql_num_rows’
drv_mysql.c:790: 警告：对‘mysql_num_rows’的嵌套的外部声明
drv_mysql.c:794: 错误：‘row’未声明(在此函数内第一次使用)
drv_mysql.c: 在函数‘mysql_drv_free_results’中:
drv_mysql.c:817: 警告：隐式声明函数‘mysql_free_result’
drv_mysql.c:817: 警告：对‘mysql_free_result’的嵌套的外部声明
drv_mysql.c:817: 错误：‘MYSQL_RES’未声明(在此函数内第一次使用)
drv_mysql.c:817: 错误：expected expression before ‘)’ token
drv_mysql.c: 在函数‘mysql_drv_done’中:
drv_mysql.c:851: 警告：隐式声明函数‘mysql_library_end’
drv_mysql.c:851: 警告：对‘mysql_library_end’的嵌套的外部声明
make[3]: *** [libsbmysql_a-drv_mysql.o] 错误 1
make[3]: Leaving directory `/home/packages/sysbench-0.4.12-1.1/sysbench/drivers/mysql'
make[2]: *** [all-recursive] 错误 1
make[2]: Leaving directory `/home/packages/sysbench-0.4.12-1.1/sysbench/drivers'
make[1]: *** [all-recursive] 错误 1
make[1]: Leaving directory `/home/packages/sysbench-0.4.12-1.1/sysbench'
make: *** [all-recursive] 错误 1</pre>
报如上错误主要是lib和include目录指定的有问题。
<pre class="lang:vim decode:true ">[root@sever2 sysbench-0.4.12-1.1]#  ls /usr/local/mysql/include/mysql/mysql.h 
/usr/local/mysql/include/mysql/mysql.h</pre>
重新configure指定到正确目录即可
<pre class="lang:vim decode:true ">[root@sever2 sysbench-0.4.12-1.1]# ./configure --with-mysql-includes=/usr/local/mysql/include/mysql/ --with-mysql-libs=/usr/local/mysql/lib/mysql</pre>
没有报错的话就执行make后，在当前的sysbench目录下会生成一个二进制可执行文件：sysbench
<pre class="lang:vim decode:true ">[root@sever2 sysbench]# ll -rth sysbench
-rwxr-xr-x. 1 root root 3.2M 11月 21 19:27 sysbench</pre>
具体的使用、结果解读可以参考下http://imysql.com/2014/10/17/sysbench-full-user-manual.shtml]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>758</wp:post_id>
		<wp:post_date><![CDATA[2014-11-21 16:20:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-21 08:20:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sysbench%e5%ae%89%e8%a3%85%e9%9c%80%e8%a6%81%e7%9a%84%e4%be%9d%e8%b5%96%e5%8c%85%e5%8f%8a%e5%87%ba%e7%8e%b0%e7%9a%84%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="aclocal"><![CDATA[aclocal]]></category>
		<category domain="post_tag" nicename="libtoolize"><![CDATA[libtoolize]]></category>
		<category domain="post_tag" nicename="m4"><![CDATA[m4]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="sysbench"><![CDATA[sysbench]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1231]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>dell服务器安装linux 6u系统网卡名称变为em解决</title>
		<link>http://www.itopers.com/?p=761</link>
		<pubDate>Tue, 25 Nov 2014 11:29:52 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=761</guid>
		<description></description>
		<content:encoded><![CDATA[今天在看一台710服务器时，发现如下问题：
<pre class="lang:vim decode:true ">[root@BJ-BX-128-98 ~]# ifup eth1
WARNING: Deprecated config file /etc/modprobe.conf, all config files belong into /etc/modprobe.d/.
WARNING: Deprecated config file /etc/modprobe.conf, all config files belong into /etc/modprobe.d/.
Device eth1 does not seem to be present, delaying initialization.</pre>
发现eth1不存在，

查看udev配置，发现网卡名字为em2
<div>
<pre class="lang:vim decode:true">[root@BJ-BX-128-98 ~]# vim /etc/udev/rules.d/70-persistent-net.rules

# This file was automatically generated by the /lib/udev/write_net_rules
# program, run by the persistent-net-generator.rules rules file.
#
# You can modify it, as long as you keep each rule on a single
# line, and change only the value of the NAME= key.

# PCI device 0x14e4:0x163b (bnx2)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="78:2b:cb:3b:ae:0e", ATTR{type}=="1", KERNEL=="eth*", NAME="eth0"

# PCI device 0x14e4:0x163b (bnx2) (custom name provided by external tool)
SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR{address}=="78:2b:cb:3b:ae:0f", ATTR{type}=="1", KERNEL=="eth*", NAME="em2"</pre>
</div>
然后把网卡的配置文件的device改为em就可以正常停启了。
<pre class="lang:vim decode:true ">[root@BJ-BX-128-98 network-scripts]# vim ifcfg-eth1
DEVICE=eth1
BOOTPROTO=static
IPADDR=111.xx.xx.xx
NETMASK=255.255.255.0
GATEWAY=111.xx.xx.254
ONBOOT=yes
TYPE=Ethernet
</pre>
改为如下
<pre class="lang:vim decode:true">[root@BJ-BX-128-98 network-scripts]# vim ifcfg-eth1 
DEVICE=em2
BOOTPROTO=static
IPADDR=111.xx.xx.xx
NETMASK=255.255.255.0
GATEWAY=111.xx.xx.254
ONBOOT=yes
TYPE=Ethernet</pre>
&nbsp;

为什么在dell的R710服务器上安装RedHat6的系统，看到的网卡是em1和em2，和以往的eht0和eth1不一样，换成其他服务器没有问题？这个原因是由于biosdevname导致的。

在Redhat6中，默认biosdevname是关闭的，但是当服务器是dell的时候就变成开启的了。

biosdevname是由dell开发的工具，旨在为网络设备的命名理清思路（并且保持一致性！）。Biosdevname是一款udev帮助程序，可根据系统BIOS提供的信息对网络接口进行重命名。
<h3><span style="color: #ff0000;">具体解决成eth0和eth1，需要在grub.conf中添加上<span style="color: #000080;">biosdevname=0</span>，进行禁用新命名方案。当然ifcfg-eth0和ifcfg-eth1也需要改回eth0和eht1.</span></h3>
记得把这个文件清空或者删除  /etc/udev/rules.d/70-persistent-net.rules

dell官方是这么说的：
<pre class="lang:vim decode:true">此文代表戴尔Enterprise Linux 设计团队的 Narayanan D 发表

Red Hat 现已推出的 Red Hat Enterprise Linux 6 Service Pack 1 (RHEL 6 SP1) 对网络接口实施了新的命名规则。戴尔同时开发，并遵从GPL协议义发布了‘biosdevname’ udev helper实用程序。它会根据网络接口在系统中的物理位置来建议新的设备名称。

将RHEL6 SP1 安装到支持的戴尔PowerEdge 服务器过程中，新的网络接口名称将变为：

            emN (em1, em2, ..)

以取代主板集成网口过去使用的 ethN 名称。

对于 PCI 扩展网络接口，名称将是：

          pXpY (p&lt;slot number&gt;p&lt;port number&gt; - p1p1, p1p2, ..).

根据新的命名方案，em1 将映射 ‘Gb1’（em2 映射 ‘Gb2’），与服务器底座上的标签相同，从而使网络接口的有效管理更加轻松。名称 p1p2 可便于识别扩展网卡上的网络端口。

新的命名方案在支持的戴尔PowerEdge 平台上默认开启。在安装过程中传送‘biosdevname=0’ 内核命令行参数，即可禁用新命名方案，并在运行时中保留。

对 ethN 名称进行硬编码的现有脚本可能需要更改，使其能识别网络设备名称。</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>761</wp:post_id>
		<wp:post_date><![CDATA[2014-11-25 19:29:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-11-25 11:29:52]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[dell%e6%9c%8d%e5%8a%a1%e5%99%a8%e5%ae%89%e8%a3%85linux-6u5%e7%bd%91%e5%8d%a1%e5%90%8d%e7%a7%b0%e5%8f%98%e4%b8%baem%e8%a7%a3%e5%86%b3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="6u5"><![CDATA[6u5]]></category>
		<category domain="post_tag" nicename="biosdevname"><![CDATA[biosdevname]]></category>
		<category domain="post_tag" nicename="em1"><![CDATA[em1]]></category>
		<category domain="post_tag" nicename="em2"><![CDATA[em2]]></category>
		<category domain="post_tag" nicename="eth0"><![CDATA[eth0]]></category>
		<category domain="post_tag" nicename="eth1"><![CDATA[eth1]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[635]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>炼数成金邀请码</title>
		<link>http://www.itopers.com/?p=772</link>
		<pubDate>Mon, 01 Dec 2014 04:11:41 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=772</guid>
		<description></description>
		<content:encoded><![CDATA[beebol分享了炼数成金邀请码，使用邀请码报名课程可以减免50%固定学费哦！
http://www.dataguru.cn/invite.php?invitecode=VN72]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>772</wp:post_id>
		<wp:post_date><![CDATA[2014-12-01 12:11:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-01 04:11:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e7%82%bc%e6%95%b0%e6%88%90%e9%87%91%e9%82%80%e8%af%b7%e7%a0%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e8%a1%8c%e4%b8%9a%e8%b5%84%e8%ae%af"><![CDATA[行业资讯]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[478]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_8dbf1ac6b09718a5a1a432e7803aa566]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>sysbench自定义lua脚本实现实际的业务逻辑压力测试</title>
		<link>http://www.itopers.com/?p=777</link>
		<pubDate>Wed, 10 Dec 2014 07:50:15 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=777</guid>
		<description></description>
		<content:encoded><![CDATA[<p>使用sysbench进行mysql的oltp测试，一般的测试在sysbench中在tests/db中提供了一个oltp.lua脚本可以进行oltp的压力测试。<br />
但不能完全模拟自己实际业务的压力测试，不同的业务，数据结构，数据量都是不一样的，为了更接近实际业务的读写压力测试，就得自己写lua脚本，然后通过sysbench进行压力测试。<br />
写这个lua脚本很简单，只需要会写lua脚本就可以了。</p>
<pre class="lang:vim decode:true ">1、首先收集实际业务的访问数据库的sql；
2、准备一台恢复好的备份库（从线上导一个）
3、将收集的sql写在lua脚本里（具体如何写，后面举个例子）
4、通过sysbench的--test参数和--mysql-db参数进行测试（这里就不需要prepare了，直接run就行）</pre>
<p>举个小例子<br />
模拟实际业务环境：</p>
<pre class="lang:mysql decode:true ">CREATE TABLE `t1` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10101 DEFAULT CHARSET=utf8</pre>
<p>插入模拟的际业务数据：</p>
<pre class="lang:mysql decode:true ">delimiter $$
create procedure add_data(in maxnum int) 
begin 
	declare i int default 0;
	declare s varchar(500); 
	while(i&lt;maxnum) do 
		select concat("abcdedsfsfsdfsfsf",i) into s; 
		insert into t1(name)values(s);  
		set i=i+1;
	end while;
end $$ 
delimiter ;

call add_data(10000);</pre>
<p>准备lua脚本：[root@sever3 db]# cat test.lua</p>
<pre class="lang:lua decode:true">function thread_init(thread_id)
   -- set_vars()
   db_connect()
end

function event(thread_id)
   local table_name
   local rs
   table_name = "t1"
        db_query("begin")
  for i=1, 10000 do
      rs = db_query("SELECT name FROM ".. table_name .." WHERE id=" .. i)
  end
end</pre>
<p>set_vars()  如果需要使用更多的参数，需要执行这个，前面需要引用下common.lua</p>
<p>db_connect()   是连接数据库的，这个是sysbench里的函数，不管那么多，直接用就行。</p>
<p>thread_init()  第一个调用的lua函数</p>
<p>event(thread_id)   可以把sql逻辑写到这里，   --num-threads多少个，就会同时调用多少个</p>
<p>然后进行压测就ok</p>
<pre class="lang:sh decode:true">[root@sever3 sysbench]# ./sysbench --mysql-socket=/data/mysql_3309/mysql.sock --test=tests/db/test.lua --mysql-user=root --num-threads=12 --report-interval=10 --rand-type=uniform --max-time=30 --max-requests=0 --percentile=99 --mysql-db=test run
sysbench 0.5:  multi-threaded system evaluation benchmark

Running the test with following options:
Number of threads: 12
Report intermediate results every 10 second(s)
Random number generator seed is 0 and will be ignored


Threads started!

[  10s] threads: 12, tps: 0.00, reads/s: 64131.41, writes/s: 0.00, response time: 3291.51ms (99%)
[  20s] threads: 12, tps: 0.00, reads/s: 79980.83, writes/s: 0.00, response time: 1947.61ms (99%)
[  30s] threads: 12, tps: 0.00, reads/s: 78354.15, writes/s: 0.00, response time: 2418.21ms (99%)
OLTP test statistics:
    queries performed:
        read:                            2280000
        write:                           0
        other:                           228
        total:                           2280228
    transactions:                        0      (0.00 per sec.)
    deadlocks:                           0      (0.00 per sec.)
    read/write requests:                 2280000 (72705.35 per sec.)
    other operations:                    228    (7.27 per sec.)

General statistics:
    total time:                          31.3595s
    total number of events:              228
    total time taken by event execution: 368.0393s
    response time:
         min:                                985.61ms
         avg:                               1614.21ms
         max:                               3756.13ms
         approx.  99 percentile:            3289.54ms

Threads fairness:
    events (avg/stddev):           19.0000/3.83
    execution time (avg/stddev):   30.6699/0.42
</pre>
<p>sysbench具体的使用、结果解读可以参数下</p>
<p>http://imysql.com/2014/10/17/sysbench-full-user-manual.shtml</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>777</wp:post_id>
		<wp:post_date><![CDATA[2014-12-10 15:50:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-10 07:50:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sysbench%e8%87%aa%e5%ae%9a%e4%b9%89luo%e8%84%9a%e6%9c%ac%e5%ae%9e%e7%8e%b0%e5%ae%9e%e9%99%85%e7%9a%84%e4%b8%9a%e5%8a%a1%e9%80%bb%e8%be%91%e5%8e%8b%e5%8a%9b%e6%b5%8b%e8%af%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="lua"><![CDATA[lua]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="oltp-lua"><![CDATA[oltp.lua]]></category>
		<category domain="post_tag" nicename="sysbench"><![CDATA[sysbench]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_b02c4d5320c6c82355960f7451e1a755]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1031]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【AWS-AMI】缩小根分区并创建新的AMI</title>
		<link>http://www.itopers.com/?p=780</link>
		<pubDate>Thu, 11 Dec 2014 13:31:13 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=780</guid>
		<description></description>
		<content:encoded><![CDATA[<div><strong>环境及需求：</strong></div>
<div>1. 现在的AMI 根分区有25G</div>
<div>2. 25G有点多，所以想将25G缩小到12G</div>
<div>3. 查看磁盘信息</div>
<blockquote>
<div># df -h</div>
<div>Filesystem      Size  Used Avail Use% Mounted on</div>
<div>/dev/xvda1       17G  1.5G   15G   9% /</div>
<div>tmpfs           498M     0  498M   0% /dev/shm</div></blockquote>
<div></div>
<div><strong>操作步骤：</strong></div>
<div>1. 挂载一块12G的新盘（/dev/xvdf）</div>
<div>2. 分区并格式化新磁盘</div>
<blockquote>
<div>    # fdisk -l</div>
<div>     Device Boot      Start         End      Blocks   Id  System</div>
/dev/xvdf1               1        1045     8393931   83  Linux
/dev/xvdf2            1046        1566     4184932+  82  Linux swap / Solaris
<div>  # mkfs.ext4 /dev/xvdf1</div></blockquote>
<div></div>
<div>3. 挂载新磁盘</div>
<blockquote>
<div>     # mkdir /new</div>
<div>     # mount /dev/xvdf1 /new</div>
<div>     # df |grep new</div>
<div>     /dev/xvdf1      7.9G  1.2G  6.4G  16% /new</div></blockquote>
<div>4. 同步数据（将/下所有数据拷贝到新磁盘）</div>
<blockquote>     # rsync -auv / --exclude="/new/*"   /new</blockquote>
<div></div>
<div>5. 卷标处理</div>
<ul>
	<li>     查看各磁盘卷标</li>
</ul>
<blockquote>
<div>     # e2label /dev/xvda1</div>
<div>     /</div>
<div>     # e2label /dev/xvdf1  (这个没有卷标，所以是空的)</div></blockquote>
<ul>
	<li>     给新磁盘添加卷标</li>
</ul>
<blockquote>
<div>     e2label /dev/xvdf1 ROOT</div>
<div>     mkswap -L SWAP /dev/xvdf2</div>
<div>     ( # e2label /dev/xvda1  ""  //删除卷标可以这样)</div></blockquote>
<div>6. 修改并查看/new/etc/fstab（LABEL为ROOT的挂载到/，LABEL为SWAP的为swap）</div>
<blockquote>
<div> #  cat /new/etc/fstab</div>
<div>LABEL=ROOT      /       ext4    defaults        1 1
LABEL=SWAP      swap    swap    defaults        0 0
tmpfs   /tmp    tmpfs   defaults        0 0
devpts  /dev/pts        devpts  gid=5,mode=620  0 0
sysfs   /sys    sysfs   defaults        0 0
proc    /proc   proc    defaults        0 0</div></blockquote>
<div>
<div>7. 修改并查看/new/boot/grub/grub.conf（从LABEL为ROOT的启动）</div>
</div>
<blockquote>
<div>default=0</div>
<div>timeout=5</div>
<div>splashimage=(hd0,0)/boot/grub/splash.xpm.gz</div>
<div>hiddenmenu</div>
<div>title CentOS (2.6.32-431.3.1.el6.x86_64)</div>
<div>        root (hd0,0)</div>
<div>        kernel /boot/vmlinuz-2.6.32-431.3.1.el6.x86_64 ro <span style="color: #e30000;">root=LABEL=ROOT</span> console=ttyS0 crashkernel=auto SYSFONT=latarcyrheb-sun16 LANG=en_US.UTF-8 KEYTABLE=us</div>
<div>        initrd /boot/initramfs-2.6.32-431.3.1.el6.x86_64.img</div></blockquote>
<div></div>
<div>8. 确保网卡是DHCP</div>
<blockquote>
<div> # cat /new/etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
ONBOOT=yes
BOOTPROTO=dhcp
TYPE=Ethernet</div></blockquote>
<div></div>
<div>9. 创建snapshot</div>
<div><img class="alignnone wp-image-781 size-full" src="http://www.itopers.com/wp-content/uploads/2014/12/snapshot.png" alt="snapshot" width="544" height="190" /></div>
<div></div>
<div>    给snapshot取个名字</div>
<div><a href="http://www.itopers.com/wp-content/uploads/2014/12/snapshot2.png"><img class="alignnone wp-image-782 size-full" src="http://www.itopers.com/wp-content/uploads/2014/12/snapshot2.png" alt="snapshot2" width="635" height="279" /></a></div>
<div></div>
<div>pending需要一段时间（取决于磁盘的大小）,记住创建的snapshot的ID，后面要用</div>
<div></div>
<div>9. 创建完成后，基于这个snapshot注册一个AMI</div>
<blockquote>
<div>#  ec2-register -n "CentOS6.5-x64-base-12G" -d "CentOS6.5-x64-base-12G" -a x86_64 --root-device-name /dev/sda -b /dev/sda=snap-f13d641e:12:true --kernel aki-503e7402 --region ap-southeast-1 <code><code>--virtualization-type hvm </code></code>
<div>-O AKIXXXXXXXXXXXXX -W xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</div>
</div></blockquote>
<div></div>
<div>10. 备注：</div>
<ul>
	<li>系统要运行ec2-register命令，需要安装java环境和aws-api的包,官方命令详解：</li>
</ul>
<div>http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ApiReference-cmd-RegisterImage.html</div>
<ul>
	<li>-b /dev/sda=<b>snap-f13d641e:12:true 表示sda是由</b><b>snap-f13d641e这个snapshot克隆来的，12是磁盘容量</b></li>
</ul>
<div>
<ul>
	<li>--kernel aki-503e7402 不同地区和不是系统位数用的aki名是不一样的，更多AKI详见如下链接</li>
</ul>
<div>http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html#AmazonKernelImageIDs</div>
<ul>
	<li>
<div>-O AKIXXXXXXXXXXXXX -W xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</div>
创建一个用户，授权可以执行ec2-register命令，并记住它的key</li>
</ul>
</div>
<div></div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>780</wp:post_id>
		<wp:post_date><![CDATA[2014-12-11 21:31:13]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-11 13:31:13]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90aws-ec2%e3%80%91%e7%bc%a9%e5%b0%8f%e6%a0%b9%e5%88%86%e5%8c%ba%e5%b9%b6%e5%88%9b%e5%bb%ba%e6%96%b0%e7%9a%84ami]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ami-aws"><![CDATA[AMI]]></category>
		<category domain="post_tag" nicename="ami"><![CDATA[AMI]]></category>
		<category domain="post_tag" nicename="decrease"><![CDATA[decrease]]></category>
		<category domain="post_tag" nicename="ec2"><![CDATA[EC2]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1339]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【从0开始学Django】Django初步</title>
		<link>http://www.itopers.com/?p=790</link>
		<pubDate>Tue, 09 Dec 2014 12:45:41 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=790</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-family: 微软雅黑;">1. 安装Django </span>
<div><span style="font-family: 微软雅黑;">1.1 源码安装  </span></div>
<pre class="lang:vim decode:true">$ wget https://www.djangoproject.com/download/1.6.7/tarball
$ mv tarball Django-1.6.7.tar.gz 
$ tar -zxvf Django-1.6.7.tar.gz
$ cd Django-1.6.7
$ python setup.py  install</pre>
<div><span style="font-family: 微软雅黑;">1.2 python管理工具安装</span></div>
<pre class="lang:vim decode:true">$ easy_install django</pre>
<div><span style="font-family: 微软雅黑;">1.3 查看django版本</span></div>
<div>
<pre class="lang:vim decode:true">$ python -c "import django; print(django.get_version())"</pre>
</div>
<div><span style="font-family: 微软雅黑;"><b>注意：</b>不同的Django版本都有最低Python版本的要求，所以在安装时需要选择正确的版本。
</span>
<blockquote>
<div><span style="font-family: 微软雅黑;"> Django1.7 --&gt;  Python 2.7, 3.2, 3.3, or 3.4 </span></div>
<div><span style="font-family: 微软雅黑;"> Django1.6 --&gt;  Python 2.6, 2.7, 3.2 or 3.3</span></div>
<div><span style="font-family: 微软雅黑;"> Django1.5 --&gt;  Python 2.6.5 to 2.7 </span></div>
<div><span style="font-family: 微软雅黑;"> Django1.4 --&gt;  Python 2.5 to 2.7</span></div>
<div><span style="font-family: 微软雅黑;"> Django1.3 --&gt;  Python 2.4 to 2.7</span></div></blockquote>
<div><span style="font-family: 微软雅黑;">2. 创建第一个项目</span></div>
</div>
<pre class="lang:vim decode:true">$ django-admin.py startproject daop
$ ls *
manage.py
daop:
__init__.py  settings.py  urls.py  wsgi.py</pre>
<div>
<ul>
	<li>__init__.py：一个空文件,告诉Python,这个目录应该是一个Python包。</li>
	<li>manage.py：项目管理文件（文件中指定了入口settings文件）</li>
	<li>settings.py ：默认项目配置文件。包括数据库，调试标志，等</li>
	<li>urls.py : Django项目的URL声明;Django站点的目录</li>
	<li>wsgi.py: WSGI-compatible web服务器作为项目的入口点。</li>
</ul>
</div>
<div><span style="color: #e30000; font-family: 微软雅黑;"><b> </b></span></div>
<div><span style="font-family: 微软雅黑;">3. 创建第一个应用</span></div>
<div>
<pre class="lang:vim decode:true">$ django-admin.py startapp charts
$ ls charts/
__init__.py  admin.py  models.py  tests.py  views.py</pre>
</div>
<div>
<ul>
	<li>__init__.py：一个空文件,告诉Python,这个目录应该是一个Python包。</li>
	<li>admin.py：加载文件中的内容，同时通过admin.site.register注册相应app模块</li>
	<li>models.py ：用来定义数据库结构</li>
	<li>tests.py : 测试文件</li>
	<li>views.py :视图文件，站点中所有请求的处理中心</li>
</ul>
</div>
<div><span style="font-family: 微软雅黑;"> </span></div>
<div><span style="font-family: 微软雅黑;">4. 配置修改</span></div>
<div><span style="font-family: 微软雅黑;">4.1 修改settings.py</span></div>
<div><span style="font-family: 微软雅黑;">要告诉Django这个app是项目里面的一部分，它需要去编辑settings.py。到尾部找到INSTALLED_APPS元组。并添加：</span></div>
<div>
<pre class="lang:vim decode:true">INSTALLED_APPS = (
'django.contrib.auth',
'django.contrib.contenttypes',
'django.contrib.sessions',
'django.contrib.sites',
    'charts',
)</pre>
</div>
<div>
<div>
<div><span style="font-family: 微软雅黑;">设置时区：</span></div>
<div>
<pre class="lang:vim decode:true">TIME_ZONE = 'Asia/Shanghai'</pre>
</div>
<div><span style="font-family: 微软雅黑;">设置编码：</span></div>
<pre class="lang:vim decode:true">LANGUAGE_CODE = 'zh-cn'</pre>
</div>
<div><span style="font-family: 微软雅黑;">设置模板位置：</span></div>
<pre class="lang:vim decode:true">TEMPLATE_DIRS = (
   os.path.join(BASE_DIR,'templates'),
)</pre>
</div>
<div><span style="font-family: 微软雅黑;">设置静态文件位置：</span></div>
<div>
<pre class="lang:vim decode:true">STATIC_URL = '/static/'
STATICFILES_DIRS = (
os.path.join(BASE_DIR, 'static'),
)</pre>
</div>
<div><span style="font-family: 微软雅黑;">设置数据库相关</span></div>
<pre class="lang:vim decode:true"> DATABASES = {
'default': {
'ENGINE': 'django.db.backends.mysql',
'NAME': 'tools',
'user': 'root',
'password': '',
'host': '127.0.0.1',
'port': '3306'
}
}</pre>
<div><span style="font-family: 微软雅黑;">4.2 修改urls.py</span></div>
<ul>
	<li><span style="font-family: 微软雅黑;">修改主urls.py文件</span></li>
</ul>
<pre class="lang:vim decode:true">$ vim daop/urls.py
url(r'^charts/',include('charts.urls')),</pre>
<ul>
	<li>修改charts的urls文件</li>
</ul>
<pre class="lang:vim decode:true">$ vim charts/urls.py
from django.conf.urls import patterns, include, url
urlpatterns = patterns('charts.views',
url(r'^index/','index'),
)</pre>
<div><span style="font-family: 微软雅黑;">4.3 修改views.py</span></div>
<pre class="lang:vim decode:true">$ cat charts/views.py
from django.http import HttpResponse
from django.shortcuts import render_to_responsedef index(request):
username="test"
info = request.POST
try:
username2=info["UserID"]
except Exception,ex:
username2=""
return render_to_response("charts/index.html",{"username":username,"username2":username2})</pre>
<div><span style="font-family: 微软雅黑;">4.4 创建模板及模板目录</span></div>
<pre class="lang:vim decode:true">$ mkdir -p charts/templates/charts/
$ cat charts/templates/charts/index.html
&lt;html&gt;
&lt;h1&gt;{{username}} welcome~&lt;/h1&gt;
&lt;form name="form1" method="post" action="/charts/index/"&gt;
Username:&lt;input style="width: 80; height: 21" name="UserID"&gt;
&lt;input value="Search!" type="submit" name="commit"&gt;
&lt;/form&gt;
&lt;h1&gt;{{username2}} ,welcome~&lt;/h1&gt;
&lt;/html&gt;</pre>
<div><span style="font-family: 微软雅黑;">5. 运行开发服务器</span></div>
<div><span style="font-family: 微软雅黑;">Django内置了web服务器，主要用来做快速开发，优点：</span></div>
<div><span style="font-family: 微软雅黑;">1.不需要安装Apache、Lighttpd</span></div>
<div><span style="font-family: 微软雅黑;">2.它会自动检测到你到Python源码的修改并且重新加载那些模块</span></div>
<div><span style="font-family: 微软雅黑;">3.它知道如何为admin应用程序寻找并显示静态的媒体文件，所以可以直接使用它</span></div>
<div><span style="font-family: 微软雅黑;">启动：</span></div>
<pre class="lang:vim decode:true"># python manage.py runserver
Validating models...
0 errors found
Django version 1.0.4, using settings 'mysite.settings'
Development server is running at http://127.0.0.1:8000/
Quit the server with CONTROL-C.
[06/Nov/2012 13:22:49] "GET / HTTP/1.1" 200 2053   //记录的访问记录
（时间戳、请求、HTTP状态码、以及字节数）</pre>
<div><span style="font-family: 微软雅黑;">访问地址：</span></div>
<div>
<pre class="lang:vim decode:true ">http://127.0.0.1:8000/</pre>
&nbsp;

</div>
<div><span style="font-family: 微软雅黑;"> </span></div>
<div><span style="font-family: 微软雅黑;"> </span></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>790</wp:post_id>
		<wp:post_date><![CDATA[2014-12-09 20:45:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-09 12:45:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e4%bb%8e0%e5%bc%80%e5%a7%8b%e5%ad%a6django%e3%80%91django%e5%88%9d%e6%ad%a5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django-2"><![CDATA[django]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[717]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux-Tips】利用lsof恢复删除的文件</title>
		<link>http://www.itopers.com/?p=804</link>
		<pubDate>Wed, 31 Dec 2014 14:37:58 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=804</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>前提条件：</strong>该文件在删除后，仍然被进程访问着，所以，比较适合用于恢复日志类的文件。

当Linux计算机受到入侵时，常见的情况是日志文件被删除，以掩盖攻击者的踪迹。管理错误也可能导致意外删除重要的文件，比如在清理旧日志时，意外地删除了数据库的活动事务日志。有时可以通过lsof来恢复这些文件。

当进程打开了某个文件时，只要该进程保持打开该文件，即使将其删除，它依然存在于磁盘中。这意味着，进程并不知道文件已经被删除，它仍然可以向打开该文件时提供给它的文件描述符进行读取和写入。除了该进程之外，这个文件是不可见的，因为已经删除了其相应的目录索引节点。

在/proc 目录下，其中包含了反映内核和进程树的各种文件。/proc目录挂载的是在内存中所映射的一块区域，所以这些文件和目录并不存在于磁盘中，因此当我们对这些文件进行读取和写入时，实际上是在从内存中获取相关信息。大多数与 lsof 相关的信息都存储于以进程的 PID 命名的目录中，即 /proc/1234 中包含的是 PID 为 1234 的进程的信息。每个进程目录中存在着各种文件，它们可以使得应用程序简单地了解进程的内存空间、文件描述符列表、指向磁盘上的文件的符号链接和其他系统信息。lsof 程序使用该信息和其他关于内核内部状态的信息来产生其输出。所以lsof 可以显示进程的文件描述符和相关的文件名等信息。也就是我们通过访问进程的文件描述符可以找到该文件的相关信息。当系统中的某个文件被意外地删除了，只要这个时候系统中还有进程正在访问该文件，那么我们就可以通过lsof从/proc目录下恢复该文件的内容。

假如由于误操作将/var/log/messages文件删除掉了，那么这时要将/var/log/messages文件恢复的方法如下：首先使用lsof来查看当前是否有进程打开/var/logmessages文件，如下：
<pre class="lang:vim decode:true"># lsof |grep /var/log/messages
COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME
syslogd   14572      root    1w      REG      253,0     5584    1737237 /var/log/messages
#rm –f /var/log/messages
# lsof |grep /var/log/messages
COMMAND    PID USER   FD   TYPE DEVICE SIZE/OFF    NODE NAME
syslogd   14572      root    1w      REG      253,0     5584    1737237 /var/log/messages (deleted)</pre>
&nbsp;

从上面的信息可以看到 PID 14572（syslogd）打开文件的文件描述符为 1。同时还可以看到/var/log/messages已经标记被删除了。因此我们可以在 /proc/14572/fd/1 （fd下的每个以数字命名的文件表示进程对应的文件描述符）中查看相应的信息，如下：
<pre class="lang:vim decode:true "># tail -n 10 /proc/14572/fd/1
Feb  4 20:02:25 host191 kernel: klogd 1.4.1, log source = /proc/kmsg started.
Feb  4 20:02:45 host191 root: aaa
Feb  4 20:05:07 host191 dhclient: DHCPREQUEST on eth0 to 192.168.0.254 port 67
Feb  4 20:05:07 host191 dhclient: DHCPACK from 192.168.0.254
Feb  4 20:05:07 host191 dhclient: bound to 192.168.0.191 -- renewal in 718 seconds.
Feb  4 20:15:50 host191 syslogd 1.4.1: restart.
Feb  4 20:15:50 host191 kernel: klogd 1.4.1, log source = /proc/kmsg started.
Feb  4 20:17:05 host191 dhclient: DHCPREQUEST on eth0 to 192.168.0.254 port 67
Feb  4 20:17:05 host191 dhclient: DHCPACK from 192.168.0.254
Feb  4 20:17:05 host191 dhclient: bound to 192.168.0.191 -- renewal in 804 seconds.# cat /proc/14572/fd/1 &gt; /var/log/messages</pre>
这时，就将文件恢复了。但是，要记得将应用重启一下，不然，新生成的日志可能写不到新生成的文件哦~~

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>804</wp:post_id>
		<wp:post_date><![CDATA[2014-12-31 22:37:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-31 14:37:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux-tips%e3%80%91%e5%88%a9%e7%94%a8lsof%e6%81%a2%e5%a4%8d%e5%88%a0%e9%99%a4%e7%9a%84%e6%96%87%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="lsof"><![CDATA[lsof]]></category>
		<category domain="post_tag" nicename="%e6%96%87%e4%bb%b6%e6%81%a2%e5%a4%8d"><![CDATA[文件恢复]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[529]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e5%88%a9%e7%94%a8lsof%e6%81%a2%e5%a4%8d%e5%88%a0%e9%99%a4%e7%9a%84%e6%96%87%e4%bb%b6]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90linux-%e5%9f%ba%e7%a1%80%e3%80%91%e5%88%a9%e7%94%a8lsof%e6%81%a2%e5%a4%8d%e5%88%a0%e9%99%a4%e7%9a%84%e6%96%87%e4%bb%b6]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【机房管理】机房选址-网络质量测试</title>
		<link>http://www.itopers.com/?p=807</link>
		<pubDate>Wed, 31 Dec 2014 16:20:19 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=807</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div>     在准备海外项目上线过程中，会遇到这样的情况，有N个点可以提供服务器资源，到底使用哪个点的资源能为用户提供更优的网络质量和稳定性呢？那么在确定该方案之前需要测试</div>
<div></div>
<div>A和B两地区之间网络连通性是否满足要求，下面为在测试过程中使用的两个方法，供大家以后遇到类似需求时参考。</div>
<div></div>
<div><b>1. 利用测评网站进行测试</b></div>
<div>站点地址： <a href="https://cloudmonitor.ca.com/zh_cn/ping.php">https://cloudmonitor.ca.com/zh_cn/ping.php</a></div>
<div>主要测试：ping,traceroute(还可以检查网站和DNS分析)</div>
<div>注意，如果要使用ping测试，目标机必须可以ping，不然测试会失败</div>
<div>该站点还提供全面的网站监控功能，有兴趣的可以看看。</div>
</div>
<div></div>
<div>
<div><strong>2. 写脚本进行测试</strong></div>
<div>几个测试指标：</div>
<div>平均丢包率，平均延时(ms)：使用ping</div>
<div>平均传输速度(Mbps)：使用scp</div>
<div>反向平均丢包率，反向平均延时（ms）：使用ping</div>
<div>反向平均传输速度(Mbps)：使用scp</div>
</div>
<div></div>
<div>
<div><b>测试步骤</b></div>
<div>1. 将N个机房中各任选1个IP，通过网站进行测评，记录测试结果</div>
<div>2. 分析用户的主要区域，筛选出需要比较的测试结果</div>
<div>3. 做成Excel表格，就能很直观地看出网络的优劣了</div>
</div>
<div></div>
<div>注意：为确保数据准确地进行对比，在测试时，最好启用同样大小的带宽</div>
<div></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>807</wp:post_id>
		<wp:post_date><![CDATA[2015-01-01 00:20:19]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2014-12-31 16:20:19]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e7%bd%91%e7%bb%9c%e8%b4%a8%e9%87%8f%e6%b5%8b%e8%af%95%e3%80%91%e6%9c%8d%e5%8a%a1%e5%99%a8%e8%b5%84%e6%ba%90%e9%80%89%e5%9d%80]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%ba%94%e7%94%a8%e5%b7%a5%e5%85%b7"><![CDATA[应用工具]]></category>
		<category domain="post_tag" nicename="%e6%b5%8b%e8%af%95"><![CDATA[测试]]></category>
		<category domain="post_tag" nicename="%e7%bd%91%e7%bb%9c"><![CDATA[网络]]></category>
		<category domain="post_tag" nicename="%e9%a1%b9%e7%9b%ae%e4%b8%8a%e7%ba%bf"><![CDATA[项目上线]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[541]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux-基础】重新挂载var分区</title>
		<link>http://www.itopers.com/?p=819</link>
		<pubDate>Fri, 02 Jan 2015 03:38:39 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=819</guid>
		<description></description>
		<content:encoded><![CDATA[我们有时候有发现这样一个情况，var分区使用du和df看到的占用情况不一致，通常情况下，是由于删除了某些文件，但是文件还被程序占用导致空间未被释放。有时候，你知道是哪个程序占用的话，直接重启程序后，可直接释放；有时候，需要重新卸载var分区才能彻底将空间释放。
<div>查看有哪些程序占用了var分区</div>
<div>
<pre class="lang:vim decode:true"># lsof |grep /var
auditd     1182      root    5w      REG              252,1  3288401    2885177 /var/log/audit/audit.log
rsyslogd   1198      root    1w      REG              252,1     1507    2885223 /var/log/messages
rsyslogd   1198      root    2w      REG              252,1   105277    2885155 /var/log/cron
rsyslogd   1198      root    4w      REG              252,1     4310    2885224 /var/log/secure
....</pre>
第一列列出了是哪个程序占用的文件

</div>
<div>常见的程序有以下几个：<span style="font-family: Tahoma;">pcscd  、</span>crond、syslog、auditd</div>
<div align="left">卸载var分区脚本如下：</div>
<div align="left">
<pre class="lang:vim decode:true">#!/bin/bash
ServerList="pcscd crond syslog auditd"
Disk=$(df -h|grep "/var" |awk '{print $1}')
for server in $ServerList
do
       service $server stop
done
umount /var
for server in $ServerList
do
       service $server start
done
mount $disk /var</pre>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>819</wp:post_id>
		<wp:post_date><![CDATA[2015-01-02 11:38:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-02 03:38:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux-%e5%9f%ba%e7%a1%80%e3%80%91%e9%87%8d%e6%96%b0%e6%8c%82%e8%bd%bdvar%e5%88%86%e5%8c%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="umount"><![CDATA[umount]]></category>
		<category domain="post_tag" nicename="var"><![CDATA[var]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[578]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】mysqldumper安装、使用和参数详解</title>
		<link>http://www.itopers.com/?p=826</link>
		<pubDate>Fri, 02 Jan 2015 11:03:58 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=826</guid>
		<description></description>
		<content:encoded><![CDATA[mysqldumper这个备份工具比较好的点很明显，就是可以并发备份，比mysqldump要快些，另一个就是备份的表是单独的文件，恢复单表时会很方便（表结构和数据文件也是分开一个文件的）。

一、下载安装

下载最新的mysqldumper

mysqldumper 下载地址：https://launchpadlibrarian.net/185032423/mydumper-0.6.2.tar.gz
<pre class="lang:sh decode:true">[root@mysql.dmc.com ]$tar -zxvf mydumper-0.6.2.tar.gz 
[root@mysql.dmc.com bin]$yum install pcre-devel.x86_64 
[root@mysql.dmc.com ~]$cd mydumper-0.6.2
[root@mysql.dmc.com mydumper-0.6.2]$mkdir bin
[root@mysql.dmc.com mydumper-0.6.2]$cd bin
[root@mysql.dmc.com bin]$cmake ../
[root@mysql.dmc.com bin]$make
[root@mysql.dmc.com bin]$ll -rth mydumper myloader 
-rwxr-xr-x. 1 root root 149K Jan  2 16:39 mydumper
-rwxr-xr-x. 1 root root  51K Jan  2 16:39 myloader</pre>
二、mysqldumper参数详解
<pre class="lang:vim decode:true  ">[root@mysql.dmc.com bin]$./mydumper --help |more 
Usage:
  mydumper [OPTION...] multi-threaded MySQL dumping

Help Options:
  -?, --help                  Show help options

Application Options:
  -B, --database              备份数据库
  -T, --tables-list           备份表列表,多个表以“,”逗号分隔
  -o, --outputdir             指定备份目录
  -s, --statement-size        insert长度，单位是byte, default 1000000，这个参数不能太小，不然会报 Row bigger than statement_size for tools.t_serverinfo
  -r, --rows                  分割表，多少行记录为一个chunk. 默认是off的
  -F, --chunk-filesize        分割表，以多个文件备份，单位是MB
  -c, --compress              压缩备份
  -e, --build-empty-files     如果表没有数据，还是创建这个文件
  -x, --regex                 正则匹配数据库、表，如db.table1
  -i, --ignore-engines        忽略指定引擎的表
  -m, --no-schemas            不备份表结构
  -k, --no-locks              不加临时的share read lock，这个可能会造成数据不一致
  --less-locking              innodb表时，最小时间lock
  -l, --long-query-guard      设置最长查询时间，默认是60s
  -K, --kill-long-queries     将长查询进行杀掉
  -D, --daemon                开启守护进程模式
  -I, --snapshot-interval     快照时间，默认是60s
  -L, --logfile               日志文件，默认是标准输出
  --tz-utc                    设置时区，只有备份应用到不同时区的时使用，默认是 --skip-tz-utc是关闭的.
  --skip-tz-utc               
  --use-savepoints            Use savepoints to reduce metadata locking issues, needs SUPER privilege
  --success-on-1146           Not increment error count and Warning instead of Critical in case of table doesn't exist
  --lock-all-tables           Use LOCK TABLE for all, instead of FTWRL
  -h, --host                  主机
  -u, --user                  用户
  -p, --password              密码
  -P, --port                  端口
  -S, --socket                socket文件
  -t, --threads               并发线程数，默认是4
  -C, --compress-protocol     Use compression on the MySQL connection
  -V, --version               Show the program version and exit
  -v, --verbose               Verbosity of output, 0 = silent, 1 = errors, 2 = warnings, 3 = info, default 2</pre>
三、使用方法

备份出来的sql文件，文件以数据库开头.表名[-schema].sql,有schema的为表的表结构创建语句，没有的为表数据插入语句。
<pre class="lang:sh decode:true ">[root@mysql.dmc.com bin]$./mydumper --database=tools --outputdir=/root/mydumper-0.6.2/test/ 
[root@mysql.dmc.com bin]$cd ot/mydumper-0.6.2/test/
[root@mysql.dmc.com test]$ll -rth 
total 112K
-rw-r--r--. 1 root root  972 Jan  2 18:09 tools.django_session.sql
-rw-r--r--. 1 root root 1.1K Jan  2 18:09 tools.t_guid.sql
-rw-r--r--. 1 root root  423 Jan  2 18:09 tools.t_ftpserver-schema.sql
-rw-r--r--. 1 root root  325 Jan  2 18:09 tools.django_session-schema.sql
-rw-r--r--. 1 root root 1.6K Jan  2 18:09 tools.t_serverinfo-schema.sql
-rw-r--r--. 1 root root  133 Jan  2 18:09 metadata</pre>
metadata这个文件记录的是当里的binlog文件及pos，可以使用这个信息搭建slave.
<pre class="lang:vim decode:true ">[root@mysql.dmc.com test]$cat metadata 
Started dump at: 2015-01-02 18:09:40
SHOW MASTER STATUS:
        Log: mysql-bin.000006
        Pos: 4196075

Finished dump at: 2015-01-02 18:09:40</pre>
只备份t_task和t_guid表
<pre class="lang:vim decode:true ">[root@mysql.dmc.com bin]$./mydumper --database=tools --outputdir=/root/mydumper-0.6.2/test/ --tables-list=t_task,t_guid</pre>
只备份以t_server开通的表
<pre class="lang:vim decode:true ">[root@mysql.dmc.com bin]$./mydumper --database=tools --outputdir=/root/mydumper-0.6.2/test/ --regex="tools.t_server*"</pre>
-B,--database只能指定一个库备份，如果需要同时备份多个数据库，可能这样：
<pre class="lang:vim decode:true ">[root@mysql.dmc.com bin]$./mydumper  --outputdir=/root/mydumper-0.6.2/test/ --regex="beebol.*|tools.*"</pre>
--threads并发度
<pre class="lang:sh decode:true">[root@mysql.dmc.com bin]$./mydumper  --outputdir=/root/mydumper-0.6.2/test/ --regex="beebol.*|tools.*" --threads=8
</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>826</wp:post_id>
		<wp:post_date><![CDATA[2015-01-02 19:03:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-02 11:03:58]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91mysqldumper%e5%ae%89%e8%a3%85%e3%80%81%e4%bd%bf%e7%94%a8%e5%92%8c%e5%8f%82%e6%95%b0%e8%af%a6%e8%a7%a3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysqldupmer"><![CDATA[mysqldupmer]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1231]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【故障处理】Web页面访问出错故障总结</title>
		<link>http://www.itopers.com/?p=829</link>
		<pubDate>Fri, 02 Jan 2015 13:21:45 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=829</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>故障现象：</strong>

访问abc.com出现"The page you are looking for is temporarily unavailable。Please try again later."

<strong>故障排查：</strong>

经查看日志，发现nginx访问后端wgapi的resin报502错误，就尝试telnet后端resin的8081端口，发现连接失败，于是登陆wgapi的resin服务器，发现resin的8081服务不存在了。

<strong>解决方法：</strong>

将nginx配置切到resin的8080端口，立即恢复用户访问，调研问题所在

<strong>故障原因：</strong>

系统运维更新代码，重启resin服务，8081端口没有起来，导致wgapi访问失败

<strong>如何避免：</strong>
<blockquote>1. 做网络环境改造的时候将新环境拓扑图发送相关人员

2. 添加针对端口的监控，连续三次发现问题发短信报警

3. 添加日志分析报警，比如503,502等错误报警超过比例，发送短信报

4. 代码更新完成后，负责上线的同事需要做检查服务是否能成功访问</blockquote>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>829</wp:post_id>
		<wp:post_date><![CDATA[2015-01-02 21:21:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-02 13:21:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%95%85%e9%9a%9c%e5%a4%84%e7%90%86%e3%80%91web%e9%a1%b5%e9%9d%a2%e8%ae%bf%e9%97%ae%e5%87%ba%e9%94%99%e6%95%85%e9%9a%9c%e6%80%bb%e7%bb%93]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="case%e6%a1%88%e4%be%8b"><![CDATA[Case案例]]></category>
		<category domain="post_tag" nicename="nginx"><![CDATA[nginx]]></category>
		<category domain="post_tag" nicename="%e6%95%85%e9%9a%9c%e5%a4%84%e7%90%86"><![CDATA[故障处理]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[429]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_old_slug]]></wp:meta_key>
			<wp:meta_value><![CDATA[%e3%80%90%e6%95%85%e9%9a%9c%e5%a4%84%e7%90%86%e3%80%91wg-api%e6%95%85%e9%9a%9c%e6%80%bb%e7%bb%93]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux-故障】Dmesg报错信息：WARNING: NR_CPUS limit of 8 reached. Processor ignored，如何解决</title>
		<link>http://www.itopers.com/?p=835</link>
		<pubDate>Fri, 02 Jan 2015 15:26:48 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=835</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>现象：</strong>
服务器系统日志有warning，具体信息如下：
WARNING: NR_CPUS limit of 8 reached. Processor ignored.

<strong>处理步骤&amp;解决方案：</strong>
个别服务器上能看到例如下面的内核警告信息：WARNING: NR_CPUS limit of 8 reached. Processor ignored.
这个警告信息意思是内核能识别到的逻辑CPU数量为8个，其余的逻辑CPU都被忽略了。

<strong>问：</strong>看起来是有其他更多的逻辑CPU未被真正利用起来，怎么办呢？
<strong>答：</strong>很简单，升级内核版本，例如：
1. 未安装SMP内核模块的，升级到支持SMP模块的内核版本
2. 已安装SMP模块后，还出现这个警告，怎么办？答案还是很简单，安装更nb的支持Largesmp模块内核版本

<strong>处理结果：</strong>
安装正确版本的内核。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>835</wp:post_id>
		<wp:post_date><![CDATA[2015-01-02 23:26:48]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-02 15:26:48]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux-%e6%95%85%e9%9a%9c%e3%80%91dmesg%e6%8a%a5%e9%94%99%e4%bf%a1%e6%81%af%ef%bc%9awarning-nr_cpus-limit-of-8-reached-processor-ignored%ef%bc%8c%e5%a6%82%e4%bd%95%e8%a7%a3%e5%86%b3]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="case%e6%a1%88%e4%be%8b"><![CDATA[Case案例]]></category>
		<category domain="post_tag" nicename="cpu"><![CDATA[CPU]]></category>
		<category domain="post_tag" nicename="smp"><![CDATA[SMP]]></category>
		<category domain="post_tag" nicename="%e5%86%85%e6%a0%b8"><![CDATA[内核]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[495]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Python-基础】Python中的单引，双引和三引</title>
		<link>http://www.itopers.com/?p=839</link>
		<pubDate>Fri, 02 Jan 2015 16:55:14 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=839</guid>
		<description></description>
		<content:encoded><![CDATA[python字符串通常有单引号（'...'）、双引号（"..."）、三引号（"""..."""）或（'''...'''）包围，三引号包含的字符串可由多行组成，一般可表示大段的叙述性字符串。在使用时基本没有差别，但双引号和三引号（"""..."""）中可以包含单引号，三引号('''...''')可以包含双引号，而不需要转义（包括注释）。

双引是为了避免引用如let’s go这样的英语字串（带单引的串）

单引是为了避免引用I like “python”这样的英语字串（带双引的串）

单引双引所表示的字符串通常要写成一行，如果要写换行的内容需要加\n

用（\）对特殊字符转义，如（\）、（'）、（"）

&nbsp;

<strong>双引号所表示的字符串通常要写成一行 </strong>

如：
s1 = "hello,world"
如果要写成多行，那么就要使用\ (“连行符”)吧，如
s2 = "hello,\
world"
s2与s1是一样的。

3个双引号的话，就可以直接写了，如下：
s3 = """hello,
world,
hahaha."""

那么s3实际上就是"hello,\nworld,\nhahaha.", 注意“\n”，所以，如果你的字符串里\n很多，你又不想在字符串中用\n的话，那么就可以使用3个双引号。而且使用3个双引号还可以在字符串中增加注释，如下：
s3 = """hello, #hoho, this is hello, 在3个双引号的字符串内可以有注释哦
world, #hoho, this is world
hahaha."""]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>839</wp:post_id>
		<wp:post_date><![CDATA[2015-01-03 00:55:14]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-02 16:55:14]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90python-%e5%9f%ba%e7%a1%80%e3%80%91python%e4%b8%ad%e7%9a%84%e5%8d%95%e5%bc%95%ef%bc%8c%e5%8f%8c%e5%bc%95%e5%92%8c%e4%b8%89%e5%bc%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="%e5%bc%95%e5%8f%b7"><![CDATA[引号]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[455]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】字符集迁移-latin1到utf8</title>
		<link>http://www.itopers.com/?p=843</link>
		<pubDate>Sat, 10 Jan 2015 14:32:59 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=843</guid>
		<description></description>
		<content:encoded><![CDATA[场景说明：
<pre class="lang:vim decode:true ">1、现上几百台mysql数据库，字符编码latin1,现在需要做一个活动，将现上mysql数据库的一些活动数据同步到一台mysql汇总数据库（latin1），然后再将数据同步oracle中，最后官网显示。
2、oracle是活动库，字符集是ZHS16GBK,由于还有很大一部分数据都在oracle库中，所以需要将mysql中的数据同步到oracle中。
3、mysql中有一个字段name,内容是中文、各种火星文。
4、官网是用java开发的，所有项目都是以utf8编码的。</pre>
首先需要简单了解几个编码：
<pre class="lang:vim decode:true ">1、latin1是ISO-8859-1的别名，ISO-8859-1编码是单字节编码，因此在支持ISO-8859-1的系统中传输和存储其他任何编码的字节流都不会被抛弃。
换言之，把其他任何编码的字节流当作ISO-8859-1编码看待都没有问题。这是个很重要的特性，MySQL数据库默认编码是Latin1就是利用了这个特性。
ASCII编码是一个7位的容器，ISO-8859-1编码是一个8位的容器。

2、gbk,这个就不用说了，汉子的国标码，专门用来表示汉字，是双字节编码，gbk是gb2312的子集，gb2312是gb18030的子集。

3、utf8,这是一个变长编码，它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</pre>
通过java程序解决思路：
<pre class="lang:vim decode:true ">1、将从mysql,iso-8859-1查询出来，再转成gbk的编码存储到oracle中，然后再以gbk的方式读出来官网显示。部分显示没有问题，但是gb18030无法显示火星文，很多火星文都显示成？。
2、将从mysql以utf8的编码读出，以utf8的编码存储到oracle中。这部分果断不行，为什么？因为mysql是latin1的编码，以utf8的编码是无法正常读出的，全部是乱码。
3、将mysql以ISO-8859-1的编码读出来，然后转成utf8，再以utf8的编码存储到oracle中。iso无法正常转成utf8，是不兼容的。

以上方法无法正常进行编码转换,只能在汇总数据库这边着手了。如果将汇总mysql的数据库转成utf8的，那么java程序就能正常显示。开始吧！！！</pre>
&nbsp;

汇总数据库是能正常查看数据库的火星文的，linux支持比java要好多了，可能是由于开源与不开源的问题吧。

1、将数据库进行逻辑备份：
<pre class="lang:sh decode:true ">mysqldump --default-character-set=latin1 -q --single-transaction -t db_collect table1 table2 &gt;db_collect.sql</pre>
&nbsp;

2、重新创建ut8库和表结构
3、通过linux下面的iconv命令进行转码
<pre class="lang:vim decode:true ">LANG=en_US
CRT=default
sed -i 's/latin1/utf8/g'  db_collect.sql
iconv -f gb18030 -c -t UTF-8 db_collect.sql -o db_collect_result.sql
mysql -f db_collect2 &lt; db_collect_result.sql
</pre>
&nbsp;

4、调整系统编码和CRT编码
LANG=en_US.UTF-8
CRT=UTF-8

5、正常显示数据，通过java程序以utf8的编码方式查看，展示正常。

有个问题，为什么java把latin1的转成gb18030火星文无法显示，在linux下用iconv命令转就可以呢？latin1不能直接转成gb18030,只能以gb18030编码为基础，再转给能够支持火星文的utf8.

显示没有问题了，但是新问题出现了，每次这样转码，会导致数据库无法使用。当然也可以增量进行转码，再导入，不过这样太麻烦了。
最后通过一个php脚本解决问题：直接从上百台数据库以默认的编码查询数据，再通过iconv转成utf8编码，直接insert到utf8表中。
但是这里需要注意的是，在insert前需要set names utf8;系统编码需要改成utf8.

php脚本：
<pre class="lang:php decode:true">$total_conn = open_mysql($total_mysql[1], $total_mysql[2], $total_mysql[3], $total_mysql[4]);
mysql_query("set names utf8;",$total_conn);
    ...省略
$total_sql = "insert into db_collect2.table1(name) values ('".iconv('gb18030','UTF-8',$list["name"])."');"
mysql_query($total_sql, $total_conn);
    ...省略</pre>
执行脚本：
<pre class="lang:sh decode:true">export LANG=en_US.UTF-8
php /tmp/collect.php</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>843</wp:post_id>
		<wp:post_date><![CDATA[2015-01-10 22:32:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-10 14:32:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91%e5%ad%97%e7%ac%a6%e9%9b%86%e8%bf%81%e7%a7%bb-latin1%e5%88%b0utf8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="icovn"><![CDATA[icovn]]></category>
		<category domain="post_tag" nicename="latin1"><![CDATA[latin1]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="uft8"><![CDATA[uft8]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[498]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】两个实例参数对比脚本</title>
		<link>http://www.itopers.com/?p=848</link>
		<pubDate>Sat, 10 Jan 2015 15:51:34 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=848</guid>
		<description></description>
		<content:encoded><![CDATA[share一下这个脚本，功能主要是通过mysqladmin var读取所有参数配置项，然后与另一个实例进行比较。有时候在排查问题时有用。
<pre class="lang:sh decode:true">#!/bin/bash
#
#Created by beebol
#URL:http://www.itopers.com
#
BASEDIR="/home/xxx/script"
LIST="${BASEDIR}/iplist.txt"
TMPDIR="${BASEDIR}/log"
cat $LIST |egrep -v "^#|^$"|awk -F"[:|\t| ]+" '{print $1"\t"$2"\t"$3"\t"$4"\t"$5}' |while read ip1 port1 ip2 port2 var
do
        ssh $ip1 "mysqladmin -uroot -P${port1} var " &lt;/dev/null &gt;${TMPDIR}/${ip1}.txt
        ssh $ip2 "mysqladmin -uroot -P${port2} var " &lt;/dev/null &gt;${TMPDIR}/${ip2}.txt
        if [ ! -z "${var}" ];then
                value1=$(egrep -v '^\+|Variable_name|^$' ${TMPDIR}/${ip1}.txt |awk -F"[|| ]+" '$2=="'${var}'" {print $3}')
                value2=$(egrep -v '^\+|Variable_name|^$' ${TMPDIR}/${ip2}.txt |awk -F"[|| ]+" '$2=="'${var}'" {print $3}')
                if [ "${value1}" = "${value2}" ];then
                        echo -e "${ip1} and ${ip2} 's ${var} are the same.[\033[32mOK\033[0m]"
                else
                        echo -e "${ip1} and ${ip2} 's ${var} are different.[\033[5m\033[31mError\033[0m]"
                fi
        else
                egrep -v '^\+|Variable_name|^$' ${TMPDIR}/${ip1}.txt |awk -F"[|| ]+" '{print $2"\t"$3}'|while read key value1
                do
                        value2=$(egrep -v '^\+|Variable_name|^$' ${TMPDIR}/${ip2}.txt |awk -F"[|| ]+" '$2=="'${key}'" {print $3}')
                        if [ "${value1}" = "${value2}" ];then
                                echo -e "${ip1} and ${ip2} 's ${key} are the same.[\033[32mOK\033[0m]"
                        else
                                echo -e "${ip1} and ${ip2} 's ${key} are different.[\033[5m\033[31mError\033[0m]"
                        fi
                done
        fi
done
exit 0</pre>
配置文件：
<pre class="lang:vim decode:true">#ip:port ip2:port2 variable
2.2.2.2:3306     1.1.1.1:3306  tmpdir</pre>
如果variable为空，者检查两个实例所有参数值。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>848</wp:post_id>
		<wp:post_date><![CDATA[2015-01-10 23:51:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-10 15:51:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91%e4%b8%a4%e4%b8%aa%e5%ae%9e%e4%be%8b%e5%8f%82%e6%95%b0%e5%af%b9%e6%af%94%e8%84%9a%e6%9c%ac]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysqladmin"><![CDATA[mysqladmin]]></category>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[495]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【故障处理】crontab任务被清空</title>
		<link>http://www.itopers.com/?p=857</link>
		<pubDate>Wed, 28 Jan 2015 10:27:18 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=857</guid>
		<description></description>
		<content:encoded><![CDATA[<span style="font-family: 微软雅黑; font-size: medium;">背景描述：</span>
<div><span style="font-family: 微软雅黑;">     某次，同事告知有台服务器上的crontab里面的任务全部都没有了，要我帮忙查一下，幸好crontab内容有备份。于是就先恢复了crontab的任务。</span> 再具体查一下是由人为操作导致的还是其他情况</div>
<div></div>
<span style="font-family: 微软雅黑;"><b>问题排查：</b></span>
<div><span style="font-family: 微软雅黑;">     检查一下所有的history记录，发现没有crontab -r之类的操作（已知的是只有crontab -r可以直接清空定时任务）</span>，当然执行crontab -e编辑也可以清空，但这种情况还是排除啦</div>
<div>     但是发现有crontab之类的操作，大家都知道执行crontab不加任何参数，命令行会卡在那里，但一般不会对crontab里面的内容有影响。</div>
<div>     通过询问操作过该服务器的同事及相关日志，大胆做出以下测试：</div>
<div></div>
<div><span style="font-family: 微软雅黑;"><b>场景重现：</b></span></div>
<div><span style="font-family: 微软雅黑;">     1. 先查看一下机器上的crontab内容</span></div>
<div>
<pre class="lang:vim decode:true">$ crontab -l
  * * * * * pwd</pre>
2. 在命令行模式下，不带任何参数执行一下crontab命令

</div>
<div>
<div>
<pre class="lang:vim decode:true ">$ crontab</pre>
3. 直接关闭会话（Close或Discount都行）（模拟网络质量差，或程序异常中止等情况）

</div>
<div><span style="font-family: 微软雅黑;">4. 再次查看crontab内容，发现内容被清空</span></div>
<div>
<pre class="lang:vim decode:true">$ crontab -l
$</pre>
<b>预防方案：</b>

</div>
<blockquote>
<div><span style="font-family: 微软雅黑;">     crontab定时备份</span></div>
<div><span style="font-family: 微软雅黑;">     修改crontab前，先对当前crontab进行备份</span></div>
<div><span style="font-family: 微软雅黑;">     添加crontab和crontab -r的alias</span></div></blockquote>
<div></div>
<div><span style="font-family: 微软雅黑;"><b>Crontab没有备份时如何处理：</b></span></div>
<div><span style="font-family: 微软雅黑;">     只能通过分析/var/log/cron日志，提取执行的内容，并找到时间规律。欢迎提出更好的办法呀！</span></div>
<div></div>
<div></div>
</div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>857</wp:post_id>
		<wp:post_date><![CDATA[2015-01-28 18:27:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-01-28 10:27:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%95%85%e9%9a%9c%e5%a4%84%e7%90%86%e3%80%91crontab%e4%bb%bb%e5%8a%a1%e8%a2%ab%e6%b8%85%e7%a9%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="case%e6%a1%88%e4%be%8b"><![CDATA[Case案例]]></category>
		<category domain="post_tag" nicename="crontab"><![CDATA[crontab]]></category>
		<category domain="category" nicename="fqa"><![CDATA[FQA]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[678]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux基础】系统时区修改</title>
		<link>http://www.itopers.com/?p=1017</link>
		<pubDate>Mon, 09 Feb 2015 15:19:34 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1017</guid>
		<description></description>
		<content:encoded><![CDATA[<p align="left">        以在AWS上新加坡节点的项目为例，系统初始化完成后，需要检查整个项目所有的服务器时区是否一致，以免为后续运维带来困扰。</p>
<p align="left">如果不一致，可以采取以下方法修正：</p>
<p align="left"><span lang="EN-US">rm -rf /etc/localtime</span></p>
<p align="left"><span lang="EN-US">ln -s /usr/share/zoneinfo/Asia/Singapore /etc/localtime</span></p>
<p align="left"><span lang="EN-US">echo "ZONE=\"Asia/Singapore\"" &gt; /etc/sysconfig/clock </span></p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1017</wp:post_id>
		<wp:post_date><![CDATA[2015-02-09 23:19:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-09 15:19:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e5%9f%ba%e7%a1%80%e3%80%91%e7%b3%bb%e7%bb%9f%e6%97%b6%e5%8c%ba%e4%bf%ae%e6%94%b9]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="%e6%97%b6%e5%8c%ba"><![CDATA[时区]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[81]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【oracle】11g dg搭建报错：ORA-16664、ORA-16714、ORA-16810解决</title>
		<link>http://www.itopers.com/?p=866</link>
		<pubDate>Mon, 02 Mar 2015 11:27:08 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=866</guid>
		<description></description>
		<content:encoded><![CDATA[最近在弄11g的dg时，遇到如下问题，记录下。
首先在主上查看报如下错误：
<pre class="lang:plsql decode:true">DGMGRL&gt; show configuration;

Configuration - queue_zs_dg

  Protection Mode: MaxPerformance
  Databases:
    queuedb   - Primary database
    queuedb02 - Physical standby database
      Error: ORA-16664: unable to receive the result from a database

Fast-Start Failover: DISABLED

Configuration Status:
ERROR


DGMGRL&gt; show database verbose queuedb02; 

Database - queuedb02

  Role:            PHYSICAL STANDBY
  Intended State:  APPLY-ON
  Transport Lag:   (unknown)
  Apply Lag:       (unknown)
  Apply Rate:      (unknown)
  Real Time Query: OFF
  Instance(s):
    Queuedb

  Properties:
    DGConnectIdentifier             = 'queuedb_zs02'
    ObserverConnectIdentifier       = ''
    LogXptMode                      = 'ASYNC'
    DelayMins                       = '0'
    Binding                         = 'optional'
    MaxFailure                      = '0'
    MaxConnections                  = '1'
    ReopenSecs                      = '300'
    NetTimeout                      = '30'
    RedoCompression                 = 'DISABLE'
    LogShipping                     = 'ON'
    PreferredApplyInstance          = ''
    ApplyInstanceTimeout            = '0'
    ApplyParallel                   = 'AUTO'
    StandbyFileManagement           = 'AUTO'
    ArchiveLagTarget                = '0'
    LogArchiveMaxProcesses          = '4'
    LogArchiveMinSucceedDest        = '1'
    DbFileNameConvert               = ''
    LogFileNameConvert              = ''
    FastStartFailoverTarget         = ''
    InconsistentProperties          = '(monitor)'
    InconsistentLogXptProps         = '(monitor)'
    SendQEntries                    = '(monitor)'
    LogXptStatus                    = '(monitor)'
    RecvQEntries                    = '(monitor)'
    ApplyLagThreshold               = '0'
    TransportLagThreshold           = '0'
    TransportDisconnectedThreshold  = '30'
    SidName                         = 'Queuedb'
    StaticConnectIdentifier         = '(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=Queuedb_ZS02.cyou.com)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=QUEUEDB02_DGMGRL)(INSTANCE_NAME=Queuedb)(SERVER=DEDICATED)))'
    StandbyArchiveLocation          = 'USE_DB_RECOVERY_FILE_DEST'
    AlternateLocation               = ''
    LogArchiveTrace                 = '0'
    LogArchiveFormat                = '%t_%s_%r.dbf'
    TopWaitEvents                   = '(monitor)'

Database Status:
DGM-17016: failed to retrieve status for database "queuedb02"
ORA-16664: unable to receive the result from a database</pre>
alert日志狂刷：
<pre class="lang:vim decode:true ">Fatal NI connect error 12514, connecting to:
 (DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=Queuedb_ZS.cyou.com)(PORT=1521)))(CONNECT_DATA=(SERVICE_NAME=queuedb_DGB)(SERVER=DEDICATED)(CID=(PROGRAM=oracle)(HOST=Queuedb_ZS02.cyou.com)(USER=oracle))))

  VERSION INFORMATION:
        TNS for Linux: Version 11.2.0.4.0 - Production
        TCP/IP NT Protocol Adapter for Linux: Version 11.2.0.4.0 - Production
  Time: 02-MAR-2015 18:27:06
  Tracing not turned on.
  Tns error struct:
    ns main err code: 12564
    
TNS-12564: TNS:connection refused
    ns secondary err code: 0
    nt main err code: 0
    nt secondary err code: 0
    nt OS err code: 0</pre>
tnsping 都是通的,为什么会报这个错呢？
到standby中查看database信息后，报如下错，primary和standby的报错信息是不一样的。
<pre class="lang:plsql decode:true ">DGMGRL&gt; show configuration;

Configuration - queue_zs_dg

  Protection Mode: MaxPerformance
  Databases:
    queuedb   - Primary database
    queuedb02 - Physical standby database
      Error: ORA-16810: multiple errors or warnings detected for the database

Fast-Start Failover: DISABLED

Configuration Status:
ERROR

DGMGRL&gt; show database verbose queuedb02;   

Database - queuedb02

  Role:            PHYSICAL STANDBY
  Intended State:  APPLY-ON
  Transport Lag:   0 seconds (computed 0 seconds ago)
  Apply Lag:       (unknown)
  Apply Rate:      (unknown)
  Real Time Query: OFF
  Instance(s):
    Queuedb
      Warning: ORA-16714: the value of property ArchiveLagTarget is inconsistent with the database setting
      Warning: ORA-16714: the value of property LogArchiveMaxProcesses is inconsistent with the database setting
      Warning: ORA-16714: the value of property LogArchiveMinSucceedDest is inconsistent with the database setting
      Warning: ORA-16714: the value of property LogArchiveTrace is inconsistent with the database setting
      Warning: ORA-16714: the value of property LogArchiveFormat is inconsistent with the database setting

  Database Error(s):
    ORA-16766: Redo Apply is stopped

  Properties:
    DGConnectIdentifier             = 'queuedb_zs02'
    ObserverConnectIdentifier       = ''
    LogXptMode                      = 'ASYNC'
    DelayMins                       = '0'
    Binding                         = 'optional'
    MaxFailure                      = '0'
    MaxConnections                  = '1'
    ReopenSecs                      = '300'
    NetTimeout                      = '30'
    RedoCompression                 = 'DISABLE'
    LogShipping                     = 'ON'
    PreferredApplyInstance          = ''
    ApplyInstanceTimeout            = '0'
    ApplyParallel                   = 'AUTO'
    StandbyFileManagement           = 'AUTO'
    ArchiveLagTarget                = '0'
    LogArchiveMaxProcesses          = '4'
    LogArchiveMinSucceedDest        = '1'
    DbFileNameConvert               = ''
    LogFileNameConvert              = ''
    FastStartFailoverTarget         = ''
    InconsistentProperties          = '(monitor)'
    InconsistentLogXptProps         = '(monitor)'
    SendQEntries                    = '(monitor)'
    LogXptStatus                    = '(monitor)'
    RecvQEntries                    = '(monitor)'
    ApplyLagThreshold               = '0'
    TransportLagThreshold           = '0'
    TransportDisconnectedThreshold  = '30'
    SidName                         = 'Queuedb'
    StaticConnectIdentifier         = '(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=Queuedb_ZS02.cyou.com)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=QUEUEDB02_DGMGRL)(INSTANCE_NAME=Queuedb)(SERVER=DEDICATED)))'
    StandbyArchiveLocation          = 'USE_DB_RECOVERY_FILE_DEST'
    AlternateLocation               = ''
    LogArchiveTrace                 = '0'
    LogArchiveFormat                = '%t_%s_%r.dbf'
    TopWaitEvents                   = '(monitor)'

Database Status:
ERROR</pre>
看到报这个错：Error: ORA-16810: multiple errors or warnings detected for the database
show database verbose里有5个warnning：
<pre class="lang:vim decode:true  ">Warning: ORA-16714: the value of property ArchiveLagTarget is inconsistent with the database setting
Warning: ORA-16714: the value of property LogArchiveMaxProcesses is inconsistent with the database setting
Warning: ORA-16714: the value of property LogArchiveMinSucceedDest is inconsistent with the database setting
Warning: ORA-16714: the value of property LogArchiveTrace is inconsistent with the database setting
Warning: ORA-16714: the value of property LogArchiveFormat is inconsistent with the database setting</pre>
需要重新设置下这些属性值：
<pre class="lang:vim decode:true ">edit database queuedb02 set property ArchiveLagTarget='0';
edit database queuedb02 set property LogArchiveMaxProcesses='4';
edit database queuedb02 set property LogArchiveMinSucceedDest='1';
edit database queuedb02 set property LogArchiveTrace='0';
edit database queuedb02 set property LogArchiveFormat='%t_%s_%r.dbf';</pre>
原因是由于：
<table border="1" width="100%" cellpadding="5" align="center">
<tbody>
<tr valign="top">
<td nowrap="nowrap"><b>ORA-16714:</b></td>
<td>the value of property <i>string</i> is inconsistent with the database setting</td>
</tr>
<tr valign="top">
<td><b>Cause:</b></td>
<td>The value of the specified configuration property is inconsistent with database in-memory settings or server parameter file settings. This may be caused by changing an initialization parameter that corresponds to a configuration property.</td>
</tr>
<tr valign="top">
<td><b>Action:</b></td>
<td>Query property InconsistentProperties on the database to determine the inconsistent values. Reset the property to make it consistent with the database setting.</td>
</tr>
</tbody>
</table>
然后再enable database 就可以了。之前报的Error: ORA-16664: unable to receive the result from a database这个问题也是这个属性的问题导致。
<pre class="lang:plsql decode:true ">DGMGRL&gt; show configuration;

Configuration - queue_zs_dg

  Protection Mode: MaxPerformance
  Databases:
    queuedb   - Primary database
    queuedb02 - Physical standby database

Fast-Start Failover: DISABLED

Configuration Status:
SUCCESS</pre>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>866</wp:post_id>
		<wp:post_date><![CDATA[2015-03-02 19:27:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-02 11:27:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90oracle%e3%80%9111g-dg%e6%90%ad%e5%bb%ba%e6%8a%a5%e9%94%99%ef%bc%9aora-16664%e3%80%81ora-16714%e3%80%81ora-16810]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dg"><![CDATA[dg]]></category>
		<category domain="post_tag" nicename="dgmgrl"><![CDATA[dgmgrl]]></category>
		<category domain="category" nicename="oracle"><![CDATA[Oracle]]></category>
		<category domain="post_tag" nicename="oracle-2"><![CDATA[oracle]]></category>
		<category domain="post_tag" nicename="standby"><![CDATA[standby]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[452]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】无法启动处理思路</title>
		<link>http://www.itopers.com/?p=873</link>
		<pubDate>Tue, 17 Mar 2015 05:20:50 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=873</guid>
		<description></description>
		<content:encoded><![CDATA[如下是报错信息：
<pre class="lang:sh decode:true ">[root@WH-2-158 mysql_3301]# /usr/local/mysql/bin/mysqld_safe --defaults-file=/data/mysql_3301/my.cnf --pid-file=/data/mysql_3301/mysql.pid --socket=/data/mysql_3301/mysql.sock --ledir=/usr/local/mysql/libexec        
nohup: ignoring input and redirecting stderr to stdout
Starting mysqld daemon with databases from /data/mysql_3301
mysqld_safe[20900]: started
STOPPING server from pid file /data/mysql_3301/mysql.pid
mysqld_safe[20906]: ended
[root@WH-2-158 mysql_3301]#</pre>
1、检查mysql 错误日志，查看无任何错误日志产生;

2、检查数据库目录（datadir），程序所在目录(basedir)权限，都是mysql.mysql

看下配置文件也没有发现异常，如果配置文件异常也会有error日志吧！不用mysqld_safe启，直接用mysqld启动试试，这里就是不用配置文件是可以启动的。
如下已经正常启动。这里除了启动时带的参数外，其它都是默认的。
<pre class="lang:sh decode:true ">[root@WH-2-158 mysql_3301]# /usr/local/mysql/libexec/mysqld --datadir=/data/mysql_3301/ --basedir=/usr/local/mysql/ --pid-file=/data/mysql_3301/mysql.pid --socket=/data/mysql_3301/mysql.sock --user=mysql
InnoDB: Error: log file ./ib_logfile0 is of different size 0 268435456 bytes
InnoDB: than specified in the .cnf file 0 5242880 bytes!
150317 11:36:10 [Note] /usr/local/mysql/libexec/mysqld: ready for connections.
Version: '5.0.67-percona-highperf'  socket: '/data/mysql_3301/mysql.sock'  port: 3306  Source distribution</pre>
这里应该是配置文件有问题了，但为什么没有日志产生呢，直接-x调试下mysqld_safe脚本。看下错误日志已经记录到系统日志里了。
（xxx 2&gt;&amp;1 |logger -p daemon.err -t mysqld_safe -i -t mysqld 这个是关键）
<pre class="lang:sh decode:true  ">sh -x /usr/local/mysql/bin/mysqld_safe --defaults-file=/data/mysql_3301/my.cnf --pid-file=/data/mysql_3301/mysql.pid --socket=/data/mysql_3301/mysql.sock  
……
+ rm -f /data/mysql_3301/mysql.sock /data/mysql_3301/mysql.pid
+ test -z '--port=3301 --socket=/data/mysql_3301/mysql.sock '
+ eval 'nohup /usr/local/mysql/libexec/mysqld --defaults-file=/data/mysql_3301/my.cnf --basedir=/usr/local/mysql --datadir=/data/mysql_3301 --user=mysql --pid-file=/data/mysql_3301/mysql.pid --skip-external-locking --port=3301 --socket=/data/mysql_3301/mysql.sock  2&gt;&amp;1 | logger -p daemon.err -t mysqld_safe -i -t mysqld'
++ nohup /usr/local/mysql/libexec/mysqld --defaults-file=/data/mysql_3301/my.cnf --basedir=/usr/local/mysql --datadir=/data/mysql_3301 --user=mysql --pid-file=/data/mysql_3301/mysql.pid --skip-external-locking --port=3301 --socket=/data/mysql_3301/mysql.sock
++ logger -p daemon.err -t mysqld_safe -i -t mysqld
+ test '!' -f /data/mysql_3301/mysql.pid
+ echo 'STOPPING server from pid file /data/mysql_3301/mysql.pid'
STOPPING server from pid file /data/mysql_3301/mysql.pid
+ break
+ echo ended
+ logger -p daemon.err -t mysqld_safe -i -s
mysqld_safe[22241]: ended</pre>
看下message日志，是有报错日志的，之前都没有注意，呵呵。
<pre class="lang:sh decode:true ">[root@WH-2-158 mysql_3301]#more /var/log/messages
Mar 17 11:48:26 WH-2-158 mysqld[22238]: 150317 11:48:26 [Warning] option 'max_binlog_size': unsigned value 2147483648 adjusted to 10
73741824
Mar 17 11:48:26 WH-2-158 mysqld[22238]: 150317 11:48:26 [ERROR] /usr/local/mysql/libexec/mysqld: unknown variable 'erver-id=10858633
01'</pre>
然后尝试直接带配置文件再执行下果然报参数错误
<pre class="lang:sh decode:true">[root@WH-2-158 mysql_3301]# nohup /usr/local/mysql/libexec/mysqld --defaults-file=/data/mysql_3301/my.cnf --basedir=/usr/local/mysql --datadir=/data/mysql_3301 --user=mysql --pid-file=/data/mysql_3301/mysql.pid --skip-external-locking --port=3301 --socket=/data/mysql_3301/mysql.sock
nohup: ignoring input and appending output to `nohup.out'
[root@WH-2-158 mysql_3301]# ls
bak        ibdata1      ib_logfile1         my.cnf      mysql      query.log  test
error.log  ib_logfile0  innodb_status.2198  my.cnf.bak  nohup.out  slow.log
[root@WH-2-158 mysql_3301]# tail nohup.out 
150317 11:49:01 [Warning] option 'max_binlog_size': unsigned value 2147483648 adjusted to 1073741824
150317 11:49:01 [ERROR] /usr/local/mysql/libexec/mysqld: unknown variable 'erver-id=1085863301'
[root@WH-2-158 mysql_3301]#</pre>
一个致命错误，一个warning，修复参数后，正常启动OK。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>873</wp:post_id>
		<wp:post_date><![CDATA[2015-03-17 13:20:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-17 05:20:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91%e6%97%a0%e6%b3%95%e5%90%af%e5%8a%a8%e5%a4%84%e7%90%86%e6%80%9d%e8%b7%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysqld_safe"><![CDATA[mysqld_safe]]></category>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e5%ba%93"><![CDATA[数据库]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[1571]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Django-实战】Nginx+Django+uWsgi+MySQL生产环境搭建-Linux</title>
		<link>http://www.itopers.com/?p=877</link>
		<pubDate>Mon, 23 Mar 2015 04:33:50 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=877</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>1.     环境说明</h3>
Linux : rhel 5.3
nginx：nginx-1.6.2
python：2.7.9
django： 1.6.7
uwsgi： 2.0.10
注意，要预先装好编译环境必备的开发包及libxml2,python-devel,pcre-devel,mysql-devel
<h3>2.     软件下载地址</h3>
nginx     http://nginx.org/download/nginx-1.6.2.tar.gz
Python     https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz
Django     https://www.djangoproject.com/download/1.6.7/tarball
uwsgi     http://projects.unbit.it/downloads/uwsgi-2.0.10.tar.gz
MySQL-python  https://pypi.python.org/packages/source/M/MySQL-python/MySQL-python-1.2.5.zip#md5=654f75b302db6ed8dc5a898c625e030c
<h3>3.     软件安装</h3>
安装nginx
<pre class="lang:vim decode:true"># yum install pcre-devel gcc openssl-devel –y
# cd /usr/local/src/django-env
# tar -zxvf nginx-1.6.2.tar.gz
# cd nginx-1.6.2
# sed -i -e 's/1.6.2//g' -e 's/nginx\//WS/g' -e 's/"NGINX"/"WS"/g' src/core/nginx.h
# useradd webadmin
# ./configure --user=webadmin --group=webadmin --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module
# make &amp;&amp; make install</pre>
升级python
<pre class="lang:vim decode:true "># cd /usr/local/src/django-env
# tar -zxvf Python-2.7.9.tgz
# cd Python-2.7.9
# ./configure
# make &amp;&amp; make install</pre>
&nbsp;

修改vim /usr/bin/yum （以免yum失效，后面修改的为系统默认的python版本即可）
将首行#!/usr/bin/python 修改成 #!/usr/bin/python2.4
<pre class="lang:vim decode:true"># mv /usr/bin/python /usr/bin/python-old
# python -V
Python 2.7.9</pre>
安装Django-1.5.4
<pre class="lang:vim decode:true"># cd /usr/local/src/django-env/
# tar -zxvf Django-1.5.4.tar.gz
# cd Django-1.6.7
# python setup.py install</pre>
安装uwsgi
<pre class="lang:vim decode:true"># cd /usr/local/src/django-env/
# tar -zxvf uwsgi-2.0.10.tar.gz
# cd uwsgi-2.0.10
# python uwsgiconfig.py --build
# python setup.py install</pre>
安装mysql-python
<pre class="lang:vim highlight:0 decode:true"># cd /usr/local/src/django-env/
# unzip MySQL-python-1.2.5.zip
# cd MySQL-python-1.2.5
# python setup.py install</pre>
注意事项：
如果系统没有安装mysql-devel包，在安装MySQL-python的时候会报如下错误：
<pre class="lang:vim highlight:0 decode:true">Traceback (most recent call last):
File "setup.py", line 16, in &lt;module&gt;
metadata, options = get_config()
File "/root/lzh/MySQL-python-1.2.2/setup_posix.py", line 43, in get_config
libs = mysql_config("libs_r")
File "/root/lzh/MySQL-python-1.2.2/setup_posix.py", line 24, in mysql_config
raise EnvironmentError, "%s not found" % mysql_config.path
EnvironmentError: mysql_config not found</pre>
<h3>4.     软件配置</h3>
配置django项目
部署代码
<pre class="lang:vim highlight:0 decode:true"># mkdir /home/webadmin/djangoproj/tools/ -p
# unzip tools.zip
# ls
dmc  logs  manage.py  plugins  src  static  templates  tools  tools.zip</pre>
在tools的项目配置文件目录（即setting.py所在目录），检查文件wsgi.py
<pre class="lang:vim decode:true"># cd tools
# cat wsgi.py
import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "tools.settings")
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()</pre>
同级目录下，创建uwsgi的启动参数的xml文件(wsgi.xml)
<pre class="lang:vim decode:true">&lt;uwsgi&gt;
&lt;socket&gt;127.0.0.1:9090&lt;/socket&gt;
&lt;listen&gt;20&lt;/listen&gt;
&lt;master&gt;true&lt;/master&gt;
&lt;pidfile&gt;/home/webadmin/logs/tools/uwsgi/uwsgi.pid&lt;/pidfile&gt;
&lt;processes&gt;4&lt;/processes&gt;
&lt;module&gt;wsgi&lt;/module&gt;#就是上面那个wsgi.py文件
&lt;pythonpath&gt;/home/webadmin/djangoproj/tools/tools&lt;/pythonpath&gt;</pre>
#建立项目的路径(此项需要注意，在虚拟环境中需要配置到wsgi所在目录；在非虚拟环境中，只需要配置到项目目录即可)
<pre class="lang:vim decode:true">&lt;profiler&gt;true&lt;/profiler&gt;
&lt;memory-report&gt;true&lt;/memory-report&gt;
&lt;enable-threads&gt;true&lt;/enable-threads&gt;
&lt;logdate&gt;true&lt;/logdate&gt;
&lt;limit-as&gt;6048&lt;/limit-as&gt;
&lt;daemonize&gt;/home/webadmin/logs/tools/uwsgi/tools.log&lt;/daemonize&gt;
&lt;/uwsgi&gt;</pre>
配置nginx
<pre class="lang:vim decode:true">location /{
include uwsgi_params;
uwsgi_pass 127.0.0.1:9090;
}
#静态文件的处理(如果django中有处理静态文件的了，就可以不要这个了；一般建议将静态文件交给nginx处理好些)
location /static/ {
alias /home/webadmin/djangoproj/tools/static/;
expires 30d;
break;
}
#配置django admin需要的文件
location ~* ^/media/(css|img|js)/.*$ {
root /usr/local/lib/python2.6/site-packages/django/contrib/admin;
expires 30d;
break;
}
location ~* ^.+\.(mpg|avi|mp3|swf|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|txt|tar|mid|midi|wav|rtf|mpeg)$ {
access_log off;
break;
}
location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|bmp|js)$ {
expires 30d;
break;
}</pre>
检查和修正目录权限
<pre class="lang:vim decode:true"># chown webadmin:webadmin /home/webadmin/ -R</pre>
<h3>5.     启动服务</h3>
<pre class="lang:vim decode:true">$ uwsgi -x /home/webadmin/djangoproj/tools/tools/wsgi.xml   --- webadmin用户
# /usr/local/nginx/sbin/ngin    ---root用户</pre>
<h3>6.     故障检查思路</h3>
查看的日志包括（nginx日志[Nginx配置文件中定义]，uwsgi日志[xml文件中定义]）
查看uwsgi日志的主要原因是看uwsgi是否正常接管了nginx下发的请求任务
uwsgi日志可查看django执行错误信息，也可在开发中通过print 打印调试
nginx错误日志/访问日志查看
两种日志区别在于，前者针对代码程序级的错误，后者针对网络访问级的错误
<h3>7.     一些建议</h3>
有时候使用killall uwsgi时不能将uwsgi干掉，你可以uwsgi -s reload的方式重启uwsgi或kill -HUP `cat /pathto/uwsgi.pid`
uWSG配置文件的进程数，可以根据实际情况分配。不要开得太大，否则机器可能会内存耗用太高。一般来说，对于一个小社区来说，4个进程已经足够了。
一般情况下，可以编写一下 stop.sh 脚本 来关闭uWSGI。
有了uWSGI为什么还需要nginx？nginx具备优秀的静态内容处理能力，然后将动态内容转发给uWSGI服务器，这样可以达到很好的客户端响应。
<h3>8.     注意事项</h3>
日志里面报类似于“Mon Mar 23 10:26:49 2015 - --- no python application found, check your startup logs for errors ---”这类错误时，需要好好检查一下xml文件
这个文件里面行尾不能有空格，参数左右也不能有空格，这个问题坑了我一晚上！！！
日志里面报类似于”ImportError: No module named wsgi”这类错误，需要检查一下你的xml文件的pythonpath选项
在虚拟环境下，需要配置到uwsgi所在目录（非虚拟环境下，只需要配置到项目所在路径即可）
<h3>9.     备注</h3>
启动时，正常的日志：
Mon Mar 23 10:59:20 2015 - *** Starting uWSGI 2.0.10 (64bit) on [Mon Mar 23 10:59:20 2015] ***
Mon Mar 23 10:59:20 2015 - compiled with version: 4.1.2 20080704 (Red Hat 4.1.2-44) on 22 March 2015 22:08:54
Mon Mar 23 10:59:20 2015 - os: Linux-2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010
Mon Mar 23 10:59:20 2015 - nodename: tools.cyou.com
Mon Mar 23 10:59:20 2015 - machine: x86_64
Mon Mar 23 10:59:20 2015 - clock source: unix
Mon Mar 23 10:59:20 2015 - pcre jit disabled
Mon Mar 23 10:59:20 2015 - detected number of CPU cores: 16
Mon Mar 23 10:59:20 2015 - current working directory: /home/webadmin/djangoproj/tools
Mon Mar 23 10:59:20 2015 - writing pidfile to /home/webadmin/logs/tools/uwsgi/uwsgi.pid
Mon Mar 23 10:59:20 2015 - detected binary path: /home/webadmin/virtualenv/tools/bin/uwsgi
Mon Mar 23 10:59:20 2015 - your processes number limit is 268288
Mon Mar 23 10:59:20 2015 - limiting address space of processes...
Mon Mar 23 10:59:20 2015 - your process address space limit is 6341787648 bytes (6048 MB)
Mon Mar 23 10:59:20 2015 - your memory page size is 4096 bytes
Mon Mar 23 10:59:20 2015 - detected max file descriptor number: 1024
Mon Mar 23 10:59:20 2015 - lock engine: pthread robust mutexes
Mon Mar 23 10:59:20 2015 - thunder lock: disabled (you can enable it with --thunder-lock)
Mon Mar 23 10:59:20 2015 - uwsgi socket 0 bound to TCP address 127.0.0.1:9090 fd 3
Mon Mar 23 10:59:20 2015 - Python version: 2.7.9 (default, Mar 23 2015, 10:40:10)  [GCC 4.1.2 20080704 (Red Hat 4.1.2-44)]
Mon Mar 23 10:59:20 2015 - Python main interpreter initialized at 0x161c5580
Mon Mar 23 10:59:20 2015 - python threads support enabled
Mon Mar 23 10:59:20 2015 - your server socket listen backlog is limited to 20 connections
Mon Mar 23 10:59:20 2015 - your mercy for graceful operations on workers is 60 seconds
Mon Mar 23 10:59:20 2015 - mapped 363840 bytes (355 KB) for 4 cores
Mon Mar 23 10:59:20 2015 - *** Operational MODE: preforking ***
Mon Mar 23 10:59:20 2015 - added /home/webadmin/djangoproj/tools/tools/ to pythonpath.
Mon Mar 23 10:59:20 2015 - WSGI app 0 (mountpoint='') ready in 0 seconds on interpreter 0x161c5580 pid: 24588 (default app)
Mon Mar 23 10:59:20 2015 - *** uWSGI is running in multiple interpreter mode ***
Mon Mar 23 10:59:20 2015 - spawned uWSGI master process (pid: 24588)
Mon Mar 23 10:59:20 2015 - spawned uWSGI worker 1 (pid: 24599, cores: 1)
Mon Mar 23 10:59:20 2015 - spawned uWSGI worker 2 (pid: 24600, cores: 1)
Mon Mar 23 10:59:20 2015 - spawned uWSGI worker 3 (pid: 24601, cores: 1)
Mon Mar 23 10:59:20 2015 - spawned uWSGI worker 4 (pid: 24602, cores: 1)

&nbsp;

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>877</wp:post_id>
		<wp:post_date><![CDATA[2015-03-23 12:33:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:33:50]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90django-%e5%ae%9e%e6%88%98%e3%80%91nginxdjangouwsgimysql%e7%94%9f%e4%ba%a7%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django-2"><![CDATA[django]]></category>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_f42045f94b8bebbf71f37f796409d418]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_fb89dcd2b2991bffcc11f7038f5f1a95]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_299ada9e56915bcc624807b3967e168c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_34eedae3e72a53727180cd7f45fa42b4]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[442]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Django-实战】Nginx+Django+uWsgi+MySQL多站点虚拟环境搭建 - Linux</title>
		<link>http://www.itopers.com/?p=881</link>
		<pubDate>Mon, 23 Mar 2015 04:37:15 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=881</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>1.     环境说明</h3>
Linux : rhel 5.3
nginx：nginx-1.6.2
python：2.7.9
django： 1.6.7
uwsgi： 2.0.10
注意，要预先装好编译环境必备的开发包及libxml2,python-devel,pcre-devel,mysql-devel
<h3>2.     软件下载地址</h3>
nginx     http://nginx.org/download/nginx-1.6.2.tar.gz
Python     https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tgz
Virtualenv     https://pypi.python.org/packages/source/v/virtualenv/virtualenv-12.0.7.tar.gz#md5=e08796f79d112f3bfa6653cc10840114
Django     https://www.djangoproject.com/download/1.6.7/tarball
uwsgi     http://projects.unbit.it/downloads/uwsgi-2.0.10.tar.gz
MySQL-python  https://pypi.python.org/packages/source/M/MySQL-python/MySQL-python-1.2.5.zip#md5=654f75b302db6ed8dc5a898c625e030c
<h3>3.     软件安装</h3>
安装nginx
<pre class="lang:vim decode:true "># yum install pcre-devel gcc openssl-devel –y
# cd /usr/local/src/django-env
# tar -zxvf nginx-1.6.2.tar.gz
# cd nginx-1.6.2
# sed -i -e 's/1.6.2//g' -e 's/nginx\//WS/g' -e 's/"NGINX"/"WS"/g' src/core/nginx.h
# useradd webadmin
# ./configure --user=webadmin --group=webadmin --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module
# make &amp;&amp; make install</pre>
安装python
<pre class="lang:vim decode:true "># cd /usr/local/src/django-env
# tar -zxvf Python-2.7.9.tgz
# cd Python-2.7.9
# ./configure --prefix=/usr/local/python2.7
# make &amp;&amp; make install</pre>
安装virtualenv
<pre class="lang:vim decode:true "># cd /usr/local/src/django-env
# tar –zxvf virtualenv-12.0.7.tar.gz
# cd virtualenv-12.0.7
# /usr/local/python2.7/bin/python setup.py install</pre>
构建虚拟环境
<pre class="lang:vim decode:true "># cd /usr/local/python2.7/bin
# ./virtualenv /home/webadmin/virtualenv/tools
New python executable in /home/webadmin/tools/bin/python
Installing setuptools, pip...done.</pre>
进入并查看虚拟环境
进入虚拟环境在虚拟环境(长前缀的都表示在虚拟环境中的操作)，默认会安装好easy_install这类工具
<pre class="lang:vim decode:true "># source /home/webadmin/virtualenv/tools/bin/activate  (退出执行命令 deactivate)
(tools)[root@tools bin]#
(tools)[root@tools bin]# python -V
Python 2.7.9</pre>
安装Django-1.5.4
<pre class="lang:vim decode:true ">(tools)[root@tools ~]# cd /usr/local/src/django-env/
(tools)[root@tools django-env]# tar -zxvf Django-1.5.4.tar.gz
(tools)[root@tools django-env]# cd Django-1.6.7
(tools)[root@tools Django-1.6.7]# python setup.py install</pre>
安装uwsgi
<pre class="lang:vim decode:true ">(tools)[root@tools ~]# cd /usr/local/src/django-env/
(tools)[root@tools django-env]# tar -zxvf uwsgi-2.0.10.tar.gz
(tools)[root@tools django-env]# cd uwsgi-2.0.10
(tools)[root@tools uwsgi-2.0.10]# python uwsgiconfig.py --build
(tools)[root@tools uwsgi-2.0.10]# python setup.py install</pre>
安装mysql-python
<pre class="lang:vim highlight:0 decode:true ">(tools)[root@tools ~]# cd /usr/local/src/django-env/
(tools)[root@tools django-env]# unzip MySQL-python-1.2.5.zip
(tools)[root@tools django-env]# cd MySQL-python-1.2.5
(tools)[root@tools MySQL-python-1.2.5]# python setup.py install</pre>
注意事项：
如果系统没有安装mysql-devel包，在安装MySQL-python的时候会报如下错误：
<pre class="lang:vim highlight:0 decode:true ">Traceback (most recent call last):
File "setup.py", line 16, in &lt;module&gt;
metadata, options = get_config()
File "/root/lzh/MySQL-python-1.2.2/setup_posix.py", line 43, in get_config
libs = mysql_config("libs_r")
File "/root/lzh/MySQL-python-1.2.2/setup_posix.py", line 24, in mysql_config
raise EnvironmentError, "%s not found" % mysql_config.path
EnvironmentError: mysql_config not found</pre>
<h3>4.     软件配置</h3>
配置django项目
部署代码
<pre class="lang:vim highlight:0 decode:true ">(tools)[root@tools ~]# mkdir /home/webadmin/djangoproj/tools/ -p
(tools)[root@tools tools]# unzip tools.zip
(tools)[root@tools tools]# ls
dmc  logs  manage.py  plugins  src  static  templates  tools  tools.zip</pre>
在tools的项目配置文件目录（即setting.py所在目录），检查文件wsgi.py
<pre class="lang:vim decode:true">(tools)[root@tools tools]# cd tools
(tools)[root@tools tools]# cat wsgi.py
import os
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "tools.settings")
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()</pre>
同级目录下，创建uwsgi的启动参数的xml文件(wsgi.xml)
<pre class="lang:vim decode:true ">&lt;uwsgi&gt;
&lt;socket&gt;127.0.0.1:9090&lt;/socket&gt;
&lt;listen&gt;20&lt;/listen&gt;
&lt;master&gt;true&lt;/master&gt;
&lt;pidfile&gt;/home/webadmin/logs/tools/uwsgi/uwsgi.pid&lt;/pidfile&gt;
&lt;processes&gt;4&lt;/processes&gt;
&lt;module&gt;wsgi&lt;/module&gt;#就是上面那个wsgi.py文件
&lt;pythonpath&gt;/home/webadmin/djangoproj/tools/tools&lt;/pythonpath&gt;</pre>
#建立项目的路径(此项需要注意，在虚拟环境中需要配置到wsgi所在目录；在非虚拟环境中，只需要配置到项目目录即可)
<pre class="lang:vim decode:true ">&lt;profiler&gt;true&lt;/profiler&gt;
&lt;memory-report&gt;true&lt;/memory-report&gt;
&lt;enable-threads&gt;true&lt;/enable-threads&gt;
&lt;logdate&gt;true&lt;/logdate&gt;
&lt;limit-as&gt;6048&lt;/limit-as&gt;
&lt;daemonize&gt;/home/webadmin/logs/tools/uwsgi/tools.log&lt;/daemonize&gt;
&lt;/uwsgi&gt;</pre>
配置nginx
<pre class="lang:vim decode:true">location /{
include uwsgi_params;
uwsgi_pass 127.0.0.1:9090;
}
#静态文件的处理(如果django中有处理静态文件的了，就可以不要这个了；一般建议将静态文件交给nginx处理好些)
location /static/ {
alias /home/webadmin/djangoproj/tools/static/;
expires 30d;
break;
}
#配置django admin需要的文件
location ~* ^/media/(css|img|js)/.*$ {
root /usr/local/lib/python2.6/site-packages/django/contrib/admin;
expires 30d;
break;
}
location ~* ^.+\.(mpg|avi|mp3|swf|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|txt|tar|mid|midi|wav|rtf|mpeg)$ {
access_log off;
break;
}
location ~* ^.+\.(jpg|jpeg|gif|png|ico|css|bmp|js)$ {
expires 30d;
break;
}</pre>
检查和修正目录权限
<pre class="lang:vim decode:true ">(tools)[root@tools webadmin]# chown webadmin:webadmin /home/webadmin/ -R</pre>
<h3>5.     启动服务</h3>
<pre class="lang:vim decode:true">(tools)[webadmin@tools ~]$ uwsgi -x /home/webadmin/djangoproj/tools/tools/wsgi.xml
# /usr/local/nginx/sbin/ngin</pre>
<h3>6.     多站点部署</h3>
重复从构建虚拟环境开始的步骤~然后在虚拟环境中安装好要运行的实际环境，并启动服务即可
配置nginx的虚拟主机即可
<h3>7.     故障检查思路</h3>
查看的日志包括（nginx日志[Nginx配置文件中定义]，uwsgi日志[xml文件中定义]）
查看uwsgi日志的主要原因是看uwsgi是否正常接管了nginx下发的请求任务
uwsgi日志可查看django执行错误信息，也可在开发中通过print 打印调试
nginx错误日志/访问日志查看
两种日志区别在于，前者针对代码程序级的错误，后者针对网络访问级的错误
<h3>8.     一些建议</h3>
有时候使用killall uwsgi时不能将uwsgi干掉，你可以uwsgi -s reload的方式重启uwsgi或kill -HUP `cat /pathto/uwsgi.pid`
uWSG配置文件的进程数，可以根据实际情况分配。不要开得太大，否则机器可能会内存耗用太高。一般来说，对于一个小社区来说，4个进程已经足够了。
一般情况下，可以编写一下 stop.sh 脚本 来关闭uWSGI。
有了uWSGI为什么还需要nginx？nginx具备优秀的静态内容处理能力，然后将动态内容转发给uWSGI服务器，这样可以达到很好的客户端响应。
<h3>9.     注意事项</h3>
日志里面报类似于“Mon Mar 23 10:26:49 2015 - --- no python application found, check your startup logs for errors ---”这类错误时，需要好好检查一下xml文件
这个文件里面行尾不能有空格，参数左右也不能有空格，这个问题坑了我一晚上！！！
日志里面报类似于”ImportError: No module named wsgi”这类错误，需要检查一下你的xml文件的pythonpath选项
在虚拟环境下，需要配置到uwsgi所在目录（非虚拟环境下，只需要配置到项目所在路径即可）
<h3>10.     备注</h3>
启动时，正常的日志：
Mon Mar 23 10:59:20 2015 - *** Starting uWSGI 2.0.10 (64bit) on [Mon Mar 23 10:59:20 2015] ***
Mon Mar 23 10:59:20 2015 - compiled with version: 4.1.2 20080704 (Red Hat 4.1.2-44) on 22 March 2015 22:08:54
Mon Mar 23 10:59:20 2015 - os: Linux-2.6.18-194.el5 #1 SMP Tue Mar 16 21:52:39 EDT 2010
Mon Mar 23 10:59:20 2015 - nodename: tools.cyou.com
Mon Mar 23 10:59:20 2015 - machine: x86_64
Mon Mar 23 10:59:20 2015 - clock source: unix
Mon Mar 23 10:59:20 2015 - pcre jit disabled
Mon Mar 23 10:59:20 2015 - detected number of CPU cores: 16
Mon Mar 23 10:59:20 2015 - current working directory: /home/webadmin/djangoproj/tools
Mon Mar 23 10:59:20 2015 - writing pidfile to /home/webadmin/logs/tools/uwsgi/uwsgi.pid
Mon Mar 23 10:59:20 2015 - detected binary path: /home/webadmin/virtualenv/tools/bin/uwsgi
Mon Mar 23 10:59:20 2015 - your processes number limit is 268288
Mon Mar 23 10:59:20 2015 - limiting address space of processes...
Mon Mar 23 10:59:20 2015 - your process address space limit is 6341787648 bytes (6048 MB)
Mon Mar 23 10:59:20 2015 - your memory page size is 4096 bytes
Mon Mar 23 10:59:20 2015 - detected max file descriptor number: 1024
Mon Mar 23 10:59:20 2015 - lock engine: pthread robust mutexes
Mon Mar 23 10:59:20 2015 - thunder lock: disabled (you can enable it with --thunder-lock)
Mon Mar 23 10:59:20 2015 - uwsgi socket 0 bound to TCP address 127.0.0.1:9090 fd 3
Mon Mar 23 10:59:20 2015 - Python version: 2.7.9 (default, Mar 23 2015, 10:40:10)  [GCC 4.1.2 20080704 (Red Hat 4.1.2-44)]
Mon Mar 23 10:59:20 2015 - Python main interpreter initialized at 0x161c5580
Mon Mar 23 10:59:20 2015 - python threads support enabled
Mon Mar 23 10:59:20 2015 - your server socket listen backlog is limited to 20 connections
Mon Mar 23 10:59:20 2015 - your mercy for graceful operations on workers is 60 seconds
Mon Mar 23 10:59:20 2015 - mapped 363840 bytes (355 KB) for 4 cores
Mon Mar 23 10:59:20 2015 - *** Operational MODE: preforking ***
Mon Mar 23 10:59:20 2015 - added /home/webadmin/djangoproj/tools/tools/ to pythonpath.
Mon Mar 23 10:59:20 2015 - WSGI app 0 (mountpoint='') ready in 0 seconds on interpreter 0x161c5580 pid: 24588 (default app)
Mon Mar 23 10:59:20 2015 - *** uWSGI is running in multiple interpreter mode ***
Mon Mar 23 10:59:20 2015 - spawned uWSGI master process (pid: 24588)
Mon Mar 23 10:59:20 2015 - spawned uWSGI worker 1 (pid: 24599, cores: 1)
Mon Mar 23 10:59:20 2015 - spawned uWSGI worker 2 (pid: 24600, cores: 1)
Mon Mar 23 10:59:20 2015 - spawned uWSGI worker 3 (pid: 24601, cores: 1)
Mon Mar 23 10:59:20 2015 - spawned uWSGI worker 4 (pid: 24602, cores: 1)]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>881</wp:post_id>
		<wp:post_date><![CDATA[2015-03-23 12:37:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-03-23 04:37:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90django-%e5%ae%9e%e6%88%98%e3%80%91nginxdjangouwsgimysql%e5%a4%9a%e7%ab%99%e7%82%b9%e8%99%9a%e6%8b%9f%e7%8e%af%e5%a2%83%e6%90%ad%e5%bb%ba-linux]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django-2"><![CDATA[django]]></category>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[505]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux-Tips】SecureCRT连接Linux后文件编码问题</title>
		<link>http://www.itopers.com/?p=890</link>
		<pubDate>Tue, 07 Apr 2015 07:29:27 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=890</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>问题：</strong>中文字符显示出来成了乱码（当前系统编码为UTF-8,CRT编码为UTF-8）

<strong>原则：</strong>保持文件、系统、CRT三者的编码格式一致即可

<strong>处理过程：</strong>

<span style="color: #ff0000;"><strong>方法1：</strong></span>

<strong>a、查看文件的编码格式</strong>

在Vim中可以直接查看文件编码
<pre class="lang:vim decode:true">:set fileencoding
fileencoding=latin1</pre>
使用命令查看文件编码
<pre class="lang:vim decode:true"># file Mysql2.txt 
Mysql2.txt: ISO-8859 text, with CRLF line terminators</pre>
ISO-8859 又称 Latin或“西欧语言”

<strong>b、查看Linux系统使用的编码是什么格式，将系统的编辑修改成en_US</strong>（如果看到文件编辑为UTF-8或GBK等其他的，这里改成UTF-8或GBK等即可）
<pre class="lang:sh decode:true"># LANG=en_US
# echo $LANG
en_US</pre>
<strong>c、 修改并修改Secure CRT的设置</strong>（如果看到文件编辑为UTF-8或GBK等其他的，这里改成UTF-8或GBK等即可）

右击--选择session的属性进行查看，修改成default

<strong><span style="color: #ff0000;">方法2：</span></strong>

<strong>a、查看文件的编码格式</strong>

在Vim中可以直接查看文件编码
<pre class="lang:vim decode:true ">:set fileencoding
fileencoding=latin1</pre>
使用命令查看文件编码
<pre class="lang:sh decode:true "># file Mysql2.txt 
Mysql2.txt: ISO-8859 text, with CRLF line terminators</pre>
ISO-8859 又称 Latin或“西欧语言”

由于latin1 是一种非常宽松的编码方式，任何一种编码方式得到的文本，用 latin1 进行解码，都不会发生解码失败——当然，解码得到的结果自然也就是理所当然的“乱码”。

让系统能尽量识别文件正确的编码（编辑~/.vimrc文件）：
<pre class="lang:vim decode:true"># vim ~/.vimrc
set encoding=utf-8 fileencodings=ucs-bom,utf-8,cp936
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1</pre>
设置完毕后，就可以让vim自动识别文件编码（可以自动识别UTF-8或者GBK编码的文件），其实就是依照 fileencodings提供的编码列表尝试，如果没有找到合适的编码，就用latin-1(ASCII)编码打开。

再次查看编码
<pre class="lang:vim decode:true ">:set fileencoding
fileencoding=cp936</pre>
这时，应该可以看到vim的时候能正常显示中文了，但是cat的时候还是不行

<strong>b、给文件转码，将cp938格式转化为UTF-8</strong>（直接从latin1转的时候不会报错，但转出来会还是乱的）<strong>          </strong>
<pre class="lang:sh decode:true"># iconv -f cp936 -t UTF-8 Mysql2.txt -o Mysql8.txt   
 -f : from
 -t : to
 -o: output</pre>
<strong>c、查看Linux系统使用的编码是什么格式，将系统的编辑修改成en_US.UTF-8</strong>
<pre class="lang:vim decode:true"># LANG=en_US.UTF-8
# echo $LANG
en_US.UTF-8</pre>
<strong>d、 修改并修改Secure CRT的设置</strong>

右击--选择session的属性进行查看，修改成UTF-8]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>890</wp:post_id>
		<wp:post_date><![CDATA[2015-04-07 15:29:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-04-07 07:29:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux-tips%e3%80%91securecrt%e8%bf%9e%e6%8e%a5linux%e5%90%8e%e6%96%87%e4%bb%b6%e7%bc%96%e7%a0%81%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="vim"><![CDATA[vim]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e7%a0%81"><![CDATA[编码]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[597]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】Navicat工具导出结构及数据问题</title>
		<link>http://www.itopers.com/?p=915</link>
		<pubDate>Tue, 21 Jul 2015 14:20:29 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=915</guid>
		<description></description>
		<content:encoded><![CDATA[最近一个开发同学用navicat连接数据库，进行管理。他想从远程的一个库中导出一份数据，然后再恢复到本地机器，进行开发。在导入后中总是缺少几个view。后来发现navicat导出有问题，如下都是个人的实验复现过程。

首先创建一个模拟的数据库，后面会贴上。

然后，正常地导出一份sql文件，操作：右键库名--转存sql文件--结构和数据--保存为beebol.sql文件到桌面。

直接选择另一个库test,操作：右键库名--运行sql文件，如下图：

<a href="http://www.itopers.com/wp-content/uploads/2015/07/56.jpg"><img class="alignnone size-medium wp-image-917" src="http://www.itopers.com/wp-content/uploads/2015/07/56-300x156.jpg" alt="56" width="300" height="156" /></a>

开始执行后，报如下错误：

<a href="http://www.itopers.com/wp-content/uploads/2015/07/7.jpg"><img class="alignnone size-medium wp-image-916" src="http://www.itopers.com/wp-content/uploads/2015/07/7-300x247.jpg" alt="7" width="300" height="247" /></a>

&nbsp;

（这是在恢复一个视图，创建视图时会调用这个total函数）

很明显是test.total的function不存在报的。（还有很多view没有创建成功的原因就知道了。）为什么function不存在呢，到beebol.sql文件看看。
<pre class="lang:vim decode:true">-- View structure for a_viewtotal
-- ----------------------------
DROP VIEW IF EXISTS `a_viewtotal`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `a_viewtotal` AS select `navicat`.`num1` AS `num1`,`navicat`.`num2` AS `num2`,`total`(`navicat`.`num1`,`navicat`.`num2`) AS `total(num1,num2)` from `navicat` ;

-- ----------------------------
-- Function structure for total
-- ----------------------------
DROP FUNCTION IF EXISTS `total`;
DELIMITER ;;

;;
DELIMITER ;</pre>
发现确实有问题，只有一句drop function，没有create function。问题找到了，但为什么会没有导出呢？于是我尝试导出了好几次，看选项，都没有找到原因，可能这是个bug，<span style="color: #ff0000;">主要是后面view在function后面，因为在view中会调用function，如果按照这样的导出顺序，导入的时候也会报ERROR 1305 (42000) at line 162: FUNCTION test.total does not exist。</span>所以这是两个问题：
<pre class="lang:vim decode:true ">1、function没有导出

2、view和function的顺序没有创建对</pre>
用mysqldump试试：
<pre class="lang:sh decode:true ">[root@mysql.dmc.com ~]$mysqldump -q -R --triggers --single-transaction -B beebol &gt;beebol.sql</pre>
然后再看看里面的顺序及function是否存在
<pre class="lang:sh decode:true">[root@mysql.dmc.com ~]$cat -n beebol.sql|  egrep 'VIEW|FUNCTION' 
    31  /*!50001 DROP VIEW IF EXISTS `a_viewtotal`*/;
   224  /*!50003 DROP FUNCTION IF EXISTS `total` */;
   234  /*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `total`(i_num1 int,i_num2 int) RETURNS int(11)
   253  /*!50001 DROP VIEW IF EXISTS `a_viewtotal`*/;
   262  /*!50001 VIEW `a_viewtotal` AS select `navicat`.`num1` AS `num1`,`navicat`.`num2` AS `num2`,`total`(`navicat`.`num1`,`navicat`.`num2`) AS `total(num1,num2)` from `navicat` */;</pre>
很明显是没有问题的，Create function在234行，Create  View在262行。

当然导入也就没有问题了
<pre class="lang:sh decode:true">[root@mysql.dmc.com ~]$mysql test &lt; beebol.sql 
[root@mysql.dmc.com ~]$</pre>
后面我也是通过mysqldump出一份文件让他正常恢复的，我就建议他还是到命令提示符上操作吧，他的回答是“这太高端了吧”，我也只能“呵呵”了。

贴上准备：
<pre class="lang:mysql decode:true">[root@mysql.dmc.com ~]$mysql beebol
Your MySQL connection id is 195944
Server version: 5.6.6-m9-log MySQL Community Server (GPL)

Copyright (c) 2000, 2012, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

(root:mysql.dmc.com:Tue Jul 21 20:21:38 2015)[beebol]&gt; create table navicat (id int not null auto_increment,num1 int not null,num2 int not null,primary key(id))engine=innodb;
Query OK, 0 rows affected (1.02 sec)

(root:mysql.dmc.com:Tue Jul 21 20:24:19 2015)[beebol]&gt; insert into navicat (num1,num2)values(1,2),(2,3),(6,4),(123,12),(3,45);
Query OK, 5 rows affected (0.04 sec)
Records: 5  Duplicates: 0  Warnings: 0

(root:mysql.dmc.com:Tue Jul 21 20:25:09 2015)[beebol]&gt; delimiter //

(root:mysql.dmc.com:Tue Jul 21 20:32:30 2015)[beebol]&gt; set global log_bin_trust_function_creators =1//
Query OK, 0 rows affected (0.00 sec)

(root:mysql.dmc.com:Tue Jul 21 20:32:38 2015)[beebol]&gt; create function total(i_num1 int,i_num2 int) returns int begin declare total_num int; set total_num=(i_num1+i_num2)/2; return(total_num); end//
Query OK, 0 rows affected (0.02 sec)

(root:mysql.dmc.com:Tue Jul 21 20:32:41 2015)[beebol]&gt; delimiter ;
(root:mysql.dmc.com:Tue Jul 21 20:32:52 2015)[beebol]&gt; create view a_viewtotal as select num1,num2,total(num1,num2) from navicat;
Query OK, 0 rows affected (0.27 sec)

(root:mysql.dmc.com:Tue Jul 21 20:34:00 2015)[beebol]&gt; select * from navicat;
+----+------+------+
| id | num1 | num2 |
+----+------+------+
|  1 |    1 |    2 |
|  2 |    2 |    3 |
|  3 |    6 |    4 |
|  4 |  123 |   12 |
|  5 |    3 |   45 |
+----+------+------+
5 rows in set (0.00 sec)

(root:mysql.dmc.com:Tue Jul 21 20:34:13 2015)[beebol]&gt; select * from a_viewtotal;
+------+------+------------------+
| num1 | num2 | total(num1,num2) |
+------+------+------------------+
|    1 |    2 |                2 |
|    2 |    3 |                3 |
|    6 |    4 |                5 |
|  123 |   12 |               68 |
|    3 |   45 |               24 |
+------+------+------------------+
5 rows in set (0.03 sec)

(root:mysql.dmc.com:Tue Jul 21 20:35:21 2015)[beebol]&gt; grant all privileges on *.* to navicat@'%' identified by 'navicat';
Query OK, 0 rows affected (0.00 sec)

(root:mysql.dmc.com:Tue Jul 21 20:36:34 2015)[beebol]&gt; flush privileges;
Query OK, 0 rows affected (0.01 sec)

(root:mysql.dmc.com:Tue Jul 21 20:36:45 2015)[beebol]&gt; exit
Bye
</pre>
表名和函数名，视图的名字特意按字母顺序给取的，主要是将函数名的字母顺序放到视图的后面。

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>915</wp:post_id>
		<wp:post_date><![CDATA[2015-07-21 22:20:29]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-21 14:20:29]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91navicat%e5%b7%a5%e5%85%b7%e5%af%bc%e5%87%ba%e7%bb%93%e6%9e%84%e5%8f%8a%e6%95%b0%e6%8d%ae%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e5%ba%93"><![CDATA[数据库]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[264]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Django】Admin密码问题</title>
		<link>http://www.itopers.com/?p=922</link>
		<pubDate>Wed, 22 Jul 2015 16:09:18 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=922</guid>
		<description></description>
		<content:encoded><![CDATA[之前用Django做了一个资源查询平台，近期把备份的代码和数据库重新部署上后，发现Admin的密码给忘记了，遇到这种情况如何处理呢？
<div>     方法一：再创建一个超级用户</div>
<blockquote>
<div># python manage.py createsuperuser</div>
<div>Username (leave blank to use 'root'): root_test</div>
<div style="text-align: left;">Email address: root_test@itopers.com</div>
<div>Password:</div>
<div>Password (again):</div>
<div>Superuser created successfully.</div>
<div></div></blockquote>
<div>     方法二：给原来的超级用户重置密码</div>
<div>          确定超级用户的名字,进入数据库</div>
<blockquote>
<div>mysql&gt; select username,is_superuser from auth_user where is_superuser=1;</div>
<div>+-----------+--------------+</div>
<div>| username  | is_superuser |</div>
<div>+-----------+--------------+</div>
<div>| vaster    |            1 |</div>
<div>+-----------+--------------+</div>
<div>7 rows in set (0.00 sec)</div></blockquote>
<div>         为vaster用户重置密码</div>
<blockquote>
<div># python manage.py shell</div>
<div>Python 2.6.6 (r266:84292, Jan 22 2014, 09:42:36)</div>
<div>[GCC 4.4.7 20120313 (Red Hat 4.4.7-4)] on linux2</div>
<div>Type "help", "copyright", "credits" or "license" for more information.</div>
<div>(InteractiveConsole)</div>
<div>&gt;&gt;&gt; from django.contrib.auth.models import User</div>
<div>&gt;&gt;&gt;user = User.objects.get(username='vaster')</div>
<div>&gt;&gt;&gt;user.set_password('new_password')</div>
<div>&gt;&gt;&gt;user.save()</div></blockquote>
<div></div>
<div>修改完毕之后，又可以开心地玩耍啦！~</div>
<div> <a href="http://www.itopers.com/wp-content/uploads/2015/07/QQ截图20150723001130.jpg"><img class="alignnone size-medium wp-image-924" src="http://www.itopers.com/wp-content/uploads/2015/07/QQ截图20150723001130-300x232.jpg" alt="QQ截图20150723001130" width="300" height="232" /></a></div>
<div></div>
<div></div>
<div></div>
<div></div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>922</wp:post_id>
		<wp:post_date><![CDATA[2015-07-23 00:09:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-22 16:09:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90django%e3%80%91admin%e5%af%86%e7%a0%81%e9%97%ae%e9%a2%98]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="admin"><![CDATA[admin]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django-2"><![CDATA[django]]></category>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[215]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【jquery】如何给对象赋值</title>
		<link>http://www.itopers.com/?p=928</link>
		<pubDate>Wed, 22 Jul 2015 16:32:02 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=928</guid>
		<description></description>
		<content:encoded><![CDATA[<div align="left">
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">Web前端开发的知识，一边开发一边学，Mark！</span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;"> </span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">两个对象：</span></div>
<blockquote>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">&lt;input id="idc_name_e" name="idc_name_e" type="text" placeholder="机房名称" onblur= "checkNull('idc_name_e','idc_name_e_font');" /&gt;</span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">&lt;textarea id="idc_address_e" name="idc_address_e" type="text" placeholder="机房地址" onblur="checkNull('idc_address_e','idc_address_e_font');" &gt;&lt;/textarea&gt;</span></div></blockquote>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;"> </span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">分别给两个对象赋值</span></div>
<blockquote>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">function IDCEdit(idc_name,idc_address){</span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">       //input对象</span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">       $( "#idc_name_e").attr("value" ,idc_name);</span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">       //textarea 对象</span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">       $( "#idc_address_e").val(idc_address);</span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">}</span></div></blockquote>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">  </span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;"> </span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">扩展：http://www.cnblogs.com/huanhuan86/archive/2012/06/13/2548071.html</span></div>
<div align="left"><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;"> </span></div>
<div align="left"></div>
<div align="left"><span style="color: #000080; font-family: Consolas;"> </span></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>928</wp:post_id>
		<wp:post_date><![CDATA[2015-07-23 00:32:02]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-22 16:32:02]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90jquery%e3%80%91%e5%a6%82%e4%bd%95%e7%bb%99%e5%af%b9%e8%b1%a1%e8%b5%8b%e5%80%bc]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="category" nicename="web%e5%89%8d%e7%ab%af"><![CDATA[Web前端]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[154]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【业务】项目上线运维清单</title>
		<link>http://www.itopers.com/?p=934</link>
		<pubDate>Thu, 23 Jul 2015 06:00:08 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=934</guid>
		<description></description>
		<content:encoded><![CDATA[针对目前的工作，整理了一下关于一个游戏项目上线的大概工作内容，每一个部分都可以再进行细致拆分，后续将陆续更新，如果您看到有遗漏的，欢迎留言补充哈~！

<a href="http://www.itopers.com/wp-content/uploads/2015/07/项目上线运维工作清单.jpg"><img class="alignnone size-full wp-image-942" src="http://www.itopers.com/wp-content/uploads/2015/07/项目上线运维工作清单.jpg" alt="项目上线运维工作清单" width="690" height="880" />
</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>934</wp:post_id>
		<wp:post_date><![CDATA[2015-07-23 14:00:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-23 06:00:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e9%a1%b9%e7%9b%ae%e3%80%91%e9%a1%b9%e7%9b%ae%e4%b8%8a%e7%ba%bf%e8%bf%90%e7%bb%b4%e6%b8%85%e5%8d%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<category domain="post_tag" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[374]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【业务】项目文档梳理</title>
		<link>http://www.itopers.com/?p=947</link>
		<pubDate>Thu, 23 Jul 2015 08:51:12 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=947</guid>
		<description></description>
		<content:encoded><![CDATA[带过一些项目后，深深觉得写文档不论是对项目的传承和自己对业务的管理都是一件非常重要的事，下面就列一下我自己整理的业务相关的文档分类，作为以后带项目的一个标准。（随着工作类型的变化，会不定期地完善）
<div></div>
<div>

<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">1. 项目历程</span></strong>
<div><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">            项目接入，项目上线，项目下线，运营计划</span></div>
<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     大事件记录（迁移、大升级、成本优化等都需要记录关键信息）</span>

<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">2. 项目架构</span></strong>
<div><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">          项目介绍</span></div>
<div><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">          项目架构（使用的端口，协议，逻辑访问等）</span></div>
<div><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">          运维管理通道等</span></div>
<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">3. 机器信息</span></strong>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     机器信息（服务器数量，功能，硬件，费用，配置等详细信息）</span>

<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">4. 系统管理</span></strong>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     服务器管理（用户管理，端口管理，系统初始化，定时任务，系统压测...）</span>
<div><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">           脚本清单</span></div>
<div>

<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">5. 项目管理</span></strong>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     业务部署及配置</span>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     业务日常运维（更新、维护、换备机、故障处理）</span>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     脚本清单，</span> 定时任务

</div>
<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">6. 监控管理</span></strong>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     监控介绍及监控项</span>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     监控部署（系统监控，业务监控，业务运营监控）</span>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     监控的日常运维</span>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     常见监控报警的处理办法</span>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     脚本清单</span>

<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">7. 故障处理</span></strong>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     故障级别定义</span>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     线上故障响应</span>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     故障记录总结</span>

<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">8. 运营数据</span></strong>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     营收、人数等</span>

<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">9. 项目周/月/季报</span></strong>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     项目监控、项目优化等等等</span>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     机房监控、优化等</span>

<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">10. 项目联系人</span></strong>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     姓名、电话、负责内容</span>

<strong><span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">11. 其他</span></strong>

<span style="color: #333333; font-family: 微软雅黑, Verdana, Arial, Helvetica, sans-serif;">     项目文档列表</span>

</div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>947</wp:post_id>
		<wp:post_date><![CDATA[2015-07-23 16:51:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-07-23 08:51:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e4%b8%9a%e5%8a%a1%e3%80%91%e9%a1%b9%e7%9b%ae%e6%96%87%e6%a1%a3%e6%a2%b3%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<category domain="post_tag" nicename="%e6%96%87%e6%a1%a3"><![CDATA[文档]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[201]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】read_only全局系统变量</title>
		<link>http://www.itopers.com/?p=956</link>
		<pubDate>Sat, 29 Aug 2015 05:41:08 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=956</guid>
		<description></description>
		<content:encoded><![CDATA[最近在沟通在线切换从库时，将master设置为read_only后，再进行做切换好不好使在纠结，所以做下实验。首先看下资料，read_only仅是一个全局变量，改变它需要有super权限，如果不是会报如下错误:
<pre class="lang:mysql decode:true">mysql&gt; set read_only=0;
ERROR 1229 (HY000): Variable 'read_only' is a GLOBAL variable and should be set with SET GLOBAL</pre>
如下是测试使用tpcc-mysql进行load数据，然后将read_only开启，最后看是否能阻塞tpcc的insert操作。答案是肯定的。不过需要注意下测试方法，tpcc_load数据时用户不能为root，为什么？后面有。

创建一个用户：
<pre class="lang:mysql decode:true">grant update,insert,select on *.* to test@'127.0.0.1' identified by '123456';
flush privileges;</pre>
进行loaddata:
<pre class="lang:sh decode:true">[root@localhost tpcc-mysql]# ./tpcc_load 127.0.0.1 tpcc1000 test 123456 100
...
.................................................. 70000
.................................................. 75000
.................................................. 80000
.................................................. 85000
.................................................. 90000
.................................................. 95000</pre>
使用super用户登录mysql进行设置read_only：
<pre class="lang:mysql decode:true">mysql&gt; set global read_only=1;
Query OK, 0 rows affected (0.07 sec)</pre>
很明显insert失败
<pre class="lang:sh decode:true">..
1290, HY000, The MySQL server is running with the --read-only option so it cannot execute this statement</pre>
由于insert失败，整个事务回滚
<pre class="lang:sh decode:true">mysql&gt; show processlist;        
+-----+-------+---------------------+----------+---------+------+-------+------------------+
| Id  | User  | Host                | db       | Command | Time | State | Info             |
+-----+-------+---------------------+----------+---------+------+-------+------------------+
| 161 | root  | localhost           | NULL     | Query   |    0 | NULL  | show processlist |
| 162 | slave | 192.168.0.104:35121 | sbtest   | Sleep   | 4465 |       | NULL             |
| 238 | test  | 127.0.0.1:37066     | tpcc1000 | Query   |   29 | NULL  | rollback         |
| 289 | root  | localhost           | sbtest   | Sleep   | 1862 |       | NULL             |
| 306 | root  | localhost           | sbtest   | Sleep   | 1578 |       | NULL             |
+-----+-------+---------------------+----------+---------+------+-------+------------------+</pre>
如下是read_only详细的描述：
<table style="height: 182px;border:1px ;" border="1" summary="Options for read_only" width="584"><colgroup> <col class="title" /> <col class="vt" /> <col class="vd" /> <col class="v" /></colgroup>
<tbody>
<tr>
<td scope="row"><span class="bold"><strong>Command-Line Format</strong></span></td>
<td colspan="3"><code class="literal">--read_only</code></td>
</tr>
<tr>
<td rowspan="3" scope="row"><span class="bold"><strong>System Variable</strong></span></td>
<td><span class="bold"><strong>Name</strong></span></td>
<td colspan="2"><code class="literal"><a class="link" href="server-administration.html#sysvar_read_only">read_only</a></code></td>
</tr>
<tr>
<td scope="row"><span class="bold"><strong>Variable Scope</strong></span></td>
<td colspan="2">Global</td>
</tr>
<tr>
<td scope="row"><span class="bold"><strong>Dynamic Variable</strong></span></td>
<td colspan="2">Yes</td>
</tr>
<tr>
<td rowspan="2" scope="row"><span class="bold"><strong>Permitted Values</strong></span></td>
<td><span class="bold"><strong>Type</strong></span></td>
<td colspan="2"><code class="literal">boolean</code></td>
</tr>
<tr>
<td scope="row"><span class="bold"><strong>Default</strong></span></td>
<td colspan="2"><code class="literal">OFF</code></td>
</tr>
</tbody>
</table>
read_only系统变量默认是关闭的，当开启后，mysql不允许客户端进行DML/DDL，除了有SUPER权限的用户。但是在有些情况下，即使这个变量ON的状态，也可以允许出下操作：

1、如果是slave，slave 线程是可以进行更新的，所以说slave设置read_only后，不影响复制；

2、analyze table和optimize table可以执行，read_only开始状态下保护的是表结构及数据的变更，analyze和optimize不属于这类变更；

3、temporary表可以进行变更；

4、日志表可以进行日志写入，如mysql.general_log,mysql.slow_log

如下是具体的测试过程：

1、主从就不在测试了，这个基本上都是把从进行了read_only设置；

2、analyze or optimize
<pre class="lang:mysql decode:true ">mysql&gt; set global read_only = 1;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; analyze table t1; 
+-----------+---------+----------+----------+
| Table     | Op      | Msg_type | Msg_text |
+-----------+---------+----------+----------+
| sbtest.t1 | analyze | status   | OK       |
+-----------+---------+----------+----------+
1 row in set (0.00 sec)</pre>
3、tepmorary table
<pre class="lang:mysql decode:true ">mysql&gt; set global read_only = 1;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; create temporary table t2 (id int,name varchar(20))engine=innodb;
Query OK, 0 rows affected (0.16 sec)

mysql&gt; insert into t2 (id,name)values(1,'ding');
Query OK, 1 row affected (0.68 sec)
</pre>
不过一个线上非常忙的库中执行read_only也会有阻塞情况。如下就是几种情况下会阻塞read_only，官方资料：

&nbsp;

<a href="http://www.itopers.com/wp-content/uploads/2015/08/xx.png"><img class="alignnone size-medium wp-image-958" src="http://www.itopers.com/wp-content/uploads/2015/08/xx-300x85.png" alt="xx" width="300" height="85" /></a>

lock table
<pre class="lang:mysql decode:true">mysql&gt; use sbtest
Database changed
mysql&gt; lock table t1 write;
Query OK, 0 rows affected (0.05 sec)

mysql&gt; set global read_only=1;  这里就会hang住
</pre>
metadata lock

session 1:
<pre class="lang:mysql decode:true ">mysql&gt; use sbtest
Database changed
mysql&gt; start transaction;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; select * from t1;
+------------+
| nane       |
+------------+
| 1234521231 |
| 1234521231 |
| 2222       |
+------------+
3 rows in set (0.05 sec)

mysql&gt; update t1 set nane = '444' where nane = '2222';
Query OK, 1 row affected (0.05 sec)
Rows matched: 1  Changed: 1  Warnings: 0

</pre>
session 2:
<pre class="lang:mysql decode:true">mysql&gt; alter table t1 add column id int not null;  这里被阻塞</pre>
此时metadata lock已经存在：
<pre class="lang:mysql decode:true ">mysql&gt; show processlist;
+-----+-------+---------------------+----------+---------+------+---------------------------------+------------------------------------------------------------------------------------------------------+
| Id  | User  | Host                | db       | Command | Time | State                           | Info                                                                                                 |
+-----+-------+---------------------+----------+---------+------+---------------------------------+------------------------------------------------------------------------------------------------------+
| 161 | root  | localhost           | NULL     | Query   |    0 | NULL                            | show processlist                                                                                     |
| 162 | slave | 192.168.0.104:35121 | sbtest   | Sleep   |  919 |                                 | NULL                                                                                                 |
| 238 | test  | 127.0.0.1:37066     | tpcc1000 | Execute |    0 | update                          | INSERT INTO stock values(33585,18,97,'GQjdF6ctBBjVNjW0hF4RsAQY','NiPIf1W5j8InkByvtRIcxHJA','i0U9Y4UE |
| 289 | root  | localhost           | sbtest   | Query   |    4 | Waiting for table metadata lock | alter table t1 add primary key(id)                                                                   |
| 306 | root  | localhost           | sbtest   | Sleep   |    7 |                                 | NULL                                                                                                 |
+-----+-------+---------------------+----------+---------+------+---------------------------------+------------------------------------------------------------------------------------------------------+
5 rows in set (0.00 sec)</pre>
session  3:
<pre class="lang:mysql decode:true ">mysql&gt; set global read_only=1; 这里也被阻塞
</pre>
所以说，需要等待session 1提交或者回滚后，session 2执行完毕，session 3的read_only设置才能成功。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>956</wp:post_id>
		<wp:post_date><![CDATA[2015-08-29 13:41:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-29 05:41:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91read_only%e5%85%a8%e5%b1%80%e7%b3%bb%e7%bb%9f%e5%8f%98%e9%87%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="read_only"><![CDATA[read_only]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[183]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【机房管理】工作事项及简述</title>
		<link>http://www.itopers.com/?p=969</link>
		<pubDate>Sat, 29 Aug 2015 13:41:59 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=969</guid>
		<description></description>
		<content:encoded><![CDATA[过去一段时间有管理过三个机房的服务器，大概500来台机器，趁最近休假有时间简单总结一下。所做的机房管理的工作内容大概是以下几方面
<div>     1. 机器信息采集</div>
<div>     运行中的机器</div>
<div>          利用Server-Client模式的程序，给所有服务器预装（通过装机系统）好Client，Client将定义的需要的数据传输给Server</div>
<div>     停机/坏掉的机器</div>
<div>          从Server端发起，通过如Ilo管理卡，进行数据收集</div>
<div></div>
<div>     2. 机器信息变更记录</div>
<div>     数据变更</div>
<div>          负责人、运行的项目等可手动变更</div>
<div>          负责人、运行的项目等可定义统一的文件路径，将信息写入，直接采集后自动变更</div>
<div>          硬件、系统相关系统可直接采集后自动变更</div>
<div>     数据对比</div>
<div>          将收集到的数据变更后，保留变更记录</div>
<div>          统计分析各项目机器使用数量，确认机器用途，了解机器去向，以后后期做优化</div>
<div>          每天将变更情况汇总发送管理员，遇到数据（SN、IP等）冲突，需要特殊标志</div>
<div></div>
<div>     3. 机房费用预算记录</div>
<div>          利用Django，开发好Web系统，用于进行数据的添加、编辑、删除和图表展示；</div>
<div>          做好费用预算与实际使用情况的对比</div>
<div>          机房实际使用情况变化曲线，关键节点可添加说明</div>
<div></div>
<div>     4. 服务器使用情况分析</div>
<div>          给所有服务器部署好监控系统（nagios,zabbix, and so on）</div>
<div></div>
<div>     5. 成本优化方案</div>
<div>          通过机房费用记录曲线及说明，结合当前业务使用情况进行整合和优化</div>
<div>          优化1，服务器负载低时，可使用虚拟化或合并功能服务</div>
<div>          优化2，针对云服务器（如AWS），可查看历史服务器资源使用情况进行升降配</div>
<div>          优化3，针对云服务器（如AWS），根据项目运营情况，购保一定量的一次性付费实例或其他类似</div>
<div></div>
<div>     6. 故障处理</div>
<div>          机房掉电</div>
<div>               收集掉电信息（服务器重启情况，总掉，掉电机器数），确认掉电造成的影响</div>
<div>               跟机房反馈情况</div>
<div>               联系商务处理后续事宜</div>
<div>          网络攻击</div>
<div>               确认攻击目标，分析攻击源，攻击方式</div>
<div>               联系机房协助从机房核心Drop攻击源</div>
<div>          机器故障</div>
<div>               登录Ilo确认机器故障情况，如有故障，记录并在出差时做处理</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>969</wp:post_id>
		<wp:post_date><![CDATA[2015-08-29 21:41:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-29 13:41:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%9c%ba%e6%88%bf%e7%ae%a1%e7%90%86%e3%80%91%e5%b7%a5%e4%bd%9c%e4%ba%8b%e9%a1%b9%e5%8f%8a%e7%ae%80%e8%bf%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<category domain="post_tag" nicename="%e6%9c%ba%e6%88%bf%e7%ae%a1%e7%90%86"><![CDATA[机房管理]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[156]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】global &amp; session variables</title>
		<link>http://www.itopers.com/?p=973</link>
		<pubDate>Sun, 30 Aug 2015 06:23:51 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=973</guid>
		<description></description>
		<content:encoded><![CDATA[续上篇“<a href="http://www.itopers.com/?p=956" target="_blank">【mysql】read_only全局系统变量</a>”这里保留了一个问题，都认为全局变量只影响变量设置值之后的新连接，已经存在的连接是不受影响的。为什么read_only会有影响到其它已经存在的连接呢？

官方是这么说的：
<pre class="lang:vim decode:true"> If you change a session system variable, the value remains in effect until your session ends or
 until you change the variable to a different value. The change is not visible to other clients.

If you change a global system variable, the value is remembered and used for new connections 
until the server restarts. (To make a global system variable setting permanent, 
you should set it in an option file.) The change is visible to any client that accesses that global
 variable. However, the change affects the corresponding session variable only for clients that 
connect after the change. The global variable change does not affect the session variable for any
 client that is currently connected (not even that of the client that issues the SET GLOBAL statement).</pre>
session变量的值的影响时间是直到这个session结束或者这个session变量值被改成其它值，对其它客户端是不可见的。

如果你更改了一个全局变量，该值将被记住并用于新的连接直到重新启动服务器。（使全局系统变量设置永久性，你应该把它放在一个配置文件中）对任何访问该全局的客户来说，变化是可见的。然而，<span style="color: #ff0000;">变化只会影响客户的相应的会话变量连接后的变化。全局变量变化不影响会话变量当前连接的客户端</span>。

标红的这句话是没有问题的，但正是这句话让很多人忽略了一个问题，如果一个变量仅是全局变量呢？根本就没有会话变量，如max_connections,read_only等等，大家在第一时间，都认为都有session级别的了。所以需要注意系统变量是的范围。主要可以参考下“<a href="http://dev.mysql.com/doc/refman/5.6/en/dynamic-system-variables.html" target="_blank">5.1.5.2 Dynamic System Variables</a>”，看下是global,还是global/session。

那么为什么设置全局变量后，不影响当前连接，而影响新创建的连接呢？

结果可以看如下这断话：
<pre class="lang:vim decode:true  "> The server maintains two kinds of system variables. Global variables affect the overall operation of
 the server. Session variables affect its operation for individual client connections. A given system 
variable can have both a global and a session value. Global and session system variables are related
 as follows:
    When the server starts, it initializes all global variables to their default values. These defaults
 can be changed by options specified on the command line or in an option file. (See Section 4.2.3,
 “Specifying Program Options”.)
    The server also maintains a set of session variables for each client that connects. The client's
 session variables are initialized at connect time using the current values of the corresponding
 global variables. For example, the client's SQL mode is controlled by the session sql_mode value,
 which is initialized when the client connects to the value of the global sql_mode value. 

</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>973</wp:post_id>
		<wp:post_date><![CDATA[2015-08-30 14:23:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-30 06:23:51]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91global-session-variables]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="global"><![CDATA[global]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="session"><![CDATA[session]]></category>
		<category domain="post_tag" nicename="variables"><![CDATA[variables]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[137]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】存储过程事务未提交/回滚，导致应用异常</title>
		<link>http://www.itopers.com/?p=979</link>
		<pubDate>Tue, 01 Sep 2015 07:55:35 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=979</guid>
		<description></description>
		<content:encoded><![CDATA[由于XX情况，上线一个应用，平时很少访问数据库，只有特定的时候存在访问。每次进行这个应用测试的时候，很大概率会产生DB死锁，导致业务异常。经后面检查发现是由于存储过程中，执行insert失败退出，没有提交，也没有回滚。导致其它应用访问这个记录时，出现Lock wait timeout exceeded; try restarting transaction。

如下是具体的模拟线上情况：
<pre class="lang:vim decode:true">CREATE TABLE `test` (
  `a` int(11) NOT NULL auto_increment,
  `b` int(11) DEFAULT NULL,
  `c` int(11) DEFAULT NULL,
  `d` int(11) DEFAULT NULL,
  PRIMARY KEY (`a`),
  UNIQUE KEY `uk_bc` (`b`,`c`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;


insert into test values(1,10035,1003501,0);
insert into test values(2,10035,1003502,1);
insert into test values(3,10035,1003503,2);
insert into test values(4,10035,1003504,3);
insert into test values(5,10035,1003505,4);
insert into test values(6,10035,1003506,5);

-- 创建一个存储过程进行insert
delimiter $$
drop procedure if exists save_test$$
create procedure save_test(nb int,nc int,nd int)
begin
    start transaction;
    insert into test (b,c,d)values(nb,nc,nd);
    select 'insert over';
    commit;
end$$
delimiter ;</pre>
session  1:
<pre class="lang:vim decode:true">start transaction;
insert into test (b,c,d)values(10035,1003509,0);</pre>
session 2:
<pre class="lang:vim decode:true ">call save_test(10035,1003509,1);</pre>
session 3:
<pre class="lang:vim decode:true ">call save_test(10035,1003509,2);</pre>
看到这种情况，都会第一感觉到deadlock很常会出现的，这次不讨论deadlock，关于insert死锁的情况可以参考下官方的文档“<a href="http://dev.mysql.com/doc/refman/5.5/en/innodb-locks-set.html">http://dev.mysql.com/doc/refman/5.5/en/innodb-locks-set.html</a>”，这里主要讨论存储过程中出现死锁后的情况。

这三个session执行的三个语句，在session 1没有提交或回滚时，session 2 和session 3都在等待S锁,当session 1提交后，其中session 2 和3都会插入失败，报唯一键冲突，插入失败，存储过程失败退出，此时事务还没有未提交，也没有回滚。

问题来了，由于insert报唯一键冲突后，还获得了一个S锁，并没有释放，因为此时的事务并没有提交。此时，如果有其它session访问这条记录，就会导致锁等待，一值如此。直到session 2和session 3提交、回滚，这是做不到的，另外一种情况是新的事务开始，就会提交这个事务。
<pre class="lang:vim decode:true ">Trx id counter 2847
Purge done for trx's n:o &lt; 2844 undo n:o &lt; 0 state: running but idle
History list length 6
LIST OF TRANSACTIONS FOR EACH SESSION:
---TRANSACTION 0, not started
MySQL thread id 6, OS thread handle 0x41c93940, query id 43 localhost root init
show engine innodb status
---TRANSACTION 2844, not started
MySQL thread id 1, OS thread handle 0x407e9940, query id 42 localhost root cleaning up
---TRANSACTION 2846, ACTIVE 55 sec
2 lock struct(s), heap size 360, 1 row lock(s)   #这里看，还锁着一行数据
MySQL thread id 3, OS thread handle 0x41c62940, query id 38 localhost root cleaning up
---TRANSACTION 2845, ACTIVE 68 sec
2 lock struct(s), heap size 360, 1 row lock(s)   #这里看，还锁着一行数据
MySQL thread id 2, OS thread handle 0x41c31940, query id 34 localhost root cleaning up</pre>
如下可以看出，事务还在：
<pre class="lang:vim decode:true ">[information_schema]&gt; select * from INNODB_TRX\G
*************************** 1. row ***************************
                    trx_id: 2859
                 trx_state: RUNNING
               trx_started: 2015-05-25 23:21:25
     trx_requested_lock_id: NULL
          trx_wait_started: NULL
                trx_weight: 2
       trx_mysql_thread_id: 3
                 trx_query: NULL
       trx_operation_state: NULL
         trx_tables_in_use: 0
         trx_tables_locked: 0
          trx_lock_structs: 2
     trx_lock_memory_bytes: 360
           trx_rows_locked: 1
         trx_rows_modified: 0
   trx_concurrency_tickets: 0
       trx_isolation_level: READ COMMITTED
         trx_unique_checks: 1
    trx_foreign_key_checks: 1
trx_last_foreign_key_error: NULL
 trx_adaptive_hash_latched: 0
 trx_adaptive_hash_timeout: 10000
          trx_is_read_only: 0
trx_autocommit_non_locking: 0
*************************** 2. row ***************************
                    trx_id: 2858
                 trx_state: RUNNING
               trx_started: 2015-05-25 23:21:13
     trx_requested_lock_id: NULL
          trx_wait_started: NULL
                trx_weight: 2
       trx_mysql_thread_id: 2
                 trx_query: NULL
       trx_operation_state: NULL
         trx_tables_in_use: 0
         trx_tables_locked: 0
          trx_lock_structs: 2
     trx_lock_memory_bytes: 360
           trx_rows_locked: 1
         trx_rows_modified: 0
   trx_concurrency_tickets: 0
       trx_isolation_level: READ COMMITTED
         trx_unique_checks: 1
    trx_foreign_key_checks: 1
trx_last_foreign_key_error: NULL
 trx_adaptive_hash_latched: 0
 trx_adaptive_hash_timeout: 10000
          trx_is_read_only: 0
trx_autocommit_non_locking: 0
2 rows in set (0.00 sec)</pre>
这两个事务一直卡着，不会提交，主要原因是新增加的应用，平时不会访问数据库，只有特定的时间及测试时有访问数据库，期间不会有事务提交、回滚、新创建事务的操作。当然，这种情况也会出现在其它应用连接中，如果卡在其它忙的连接中，就会有新的事务开始，那个这个事务也就会自动提交，也就很难感觉到。

如果解决这个问题呢？

1、临时解决，都是把thread 给kill掉，让应用自动 再重连；

2、彻底解决，存储过程中添加异常捕获，sql执行失败后，执行rollback，成功后执行commit,然后统一返回一个值给应用，反馈整个过程中执行失败或成功。如0，1

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>979</wp:post_id>
		<wp:post_date><![CDATA[2015-09-01 15:55:35]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-01 07:55:35]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b%e4%ba%8b%e5%8a%a1%e6%9c%aa%e6%8f%90%e4%ba%a4%e5%9b%9e%e6%bb%9a%ef%bc%8c%e5%ba%94%e7%94%a8%e5%bc%82%e5%b8%b8]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="commit"><![CDATA[commit]]></category>
		<category domain="post_tag" nicename="deadlock"><![CDATA[deadlock]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="procedure"><![CDATA[procedure]]></category>
		<category domain="post_tag" nicename="rollback"><![CDATA[rollback]]></category>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e5%ba%93"><![CDATA[数据库]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[163]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux基础】大硬盘xfs格式化和挂载注意</title>
		<link>http://www.itopers.com/?p=998</link>
		<pubDate>Wed, 02 Sep 2015 14:05:10 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=998</guid>
		<description></description>
		<content:encoded><![CDATA[<div>     每个项目都会有专用和共用的日志服务器，通常日志服务器上的磁盘容量非常大，下面介绍一下关于大硬盘（&gt;2T）的xfs挂载和格式化</div>
<div>1、 fdisk –l 查看</div>
<div>
<pre class="lang:vim decode:true ">Disk /dev/sdb: 1934.2 GB, 1934295564288 bytes
255 heads, 63 sectors/track, 235164 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes</pre>
</div>
<div> 2、 安装xfs包（一般服务器上没有需拷）</div>
<div>
<pre class="lang:vim decode:true"># rpm -ivh xfsprogs-2.9.4-4.el5.x86_64.rpm
warning: xfsprogs-2.9.4-4.el5.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID e42d547b
Preparing...                ########################################### [100%]
   1:xfsprogs               ########################################### [100%]
# rpm -ivh xfsprogs-devel-2.9.4-4.el5.x86_64.rpm
warning: xfsprogs-devel-2.9.4-4.el5.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID e42d547b
Preparing...                ########################################### [100%]
   1:xfsprogs-devel         ########################################### [100%]
# rpm -vih kernel-module-xfs-2.6.18-128.el5-0.4-4.slc5.x86_64.rpm
warning: kernel-module-xfs-2.6.18-128.el5-0.4-4.slc5.x86_64.rpm: Header V3 DSA signature: NOKEY, key ID 1d1e034b
Preparing...                ########################################### [100%]
   1:kernel-module-xfs-2.6.1########################################### [100%]
# locate xfs.ko
/lib/modules/2.6.18-128.el5/kernel/fs/freevxfs/freevxfs.ko
/lib/modules/2.6.18-128.el5/kernel/fs/xfs/xfs.ko
/lib/modules/2.6.18-128.el5_cyou_1.0/kernel/fs/freevxfs/freevxfs.ko
/lib/modules/2.6.18-128.el5debug/kernel/fs/freevxfs/freevxfs.ko</pre>
</div>
<div> 3、 加载模块（公司的内核是被定制过的）</div>
<div>
<pre class="lang:vim decode:true"># mkdir /lib/modules/2.6.18-128.el5_cyou_1.0/kernel/fs/xfs
# cp /lib/modules/2.6.18-128.el5/kernel/fs/xfs/xfs.ko /lib/modules/2.6.18-128.el5_cyou_1.0/kernel/fs/xfs
# insmod /lib/modules/2.6.18-128.el5_cyou_1.0/kernel/fs/xfs/xfs.ko
# lsmod |grep xfs
xfs                   508360  0</pre>
</div>
<div>4、格式化操作</div>
<div>
<pre class="lang:vim decode:true"># mkfs.xfs /dev/sdb
mkfs.xfs: /dev/sdb appears to contain an existing filesystem (xfs).
mkfs.xfs: Use the -f option to force overwrite.
# mkfs.xfs -f /dev/sdb （有时候需要加 –f 参数 强制格式化）
meta-data=/dev/sdb               isize=256    agcount=32, agsize=14757504 blks
         =                       sectsz=512   attr=0
data     =                       bsize=4096   blocks=472240128, imaxpct=25
         =                       sunit=0      swidth=0 blks, unwritten=1
naming   =version 2              bsize=4096
log      =internal log           bsize=4096   blocks=32768, version=1
         =                       sectsz=512   sunit=0 blks, lazy-count=0
realtime =none                   extsz=4096   blocks=0, rtextents=0</pre>
</div>
<div>5、再挂载成功了</div>
<div>
<pre class="lang:vim decode:true"># mount -t xfs /dev/sdb /data/
# mount
/dev/sdb on /data type xfs (rw)</pre>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>998</wp:post_id>
		<wp:post_date><![CDATA[2015-09-02 22:05:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-02 14:05:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e5%9f%ba%e7%a1%80%e3%80%91%e5%a4%a7%e7%a1%ac%e7%9b%98xfs%e6%a0%bc%e5%bc%8f%e5%8c%96%e5%92%8c%e6%8c%82%e8%bd%bd%e6%b3%a8%e6%84%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="xfs"><![CDATA[xfs]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[161]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux日志】系统日志分析项目</title>
		<link>http://www.itopers.com/?p=1000</link>
		<pubDate>Thu, 03 Sep 2015 14:27:47 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1000</guid>
		<description></description>
		<content:encoded><![CDATA[<div>        Linux的系统日志是我们分析系统安全和稳定性的重要分析源，通过message,secure等系统日志，我们可以发现系统硬件，软件及安全方面存在的问题，以下列举了我们最常分析的一些指标，暂时只列这一些，后续将补充完善~~</div>
<div></div>
<div><b>登录类：</b></div>
<div>ssh登录Token验证失败</div>
<div>ssh登录Token成功</div>
<div>ssh登录密码验证失败</div>
<div>不存在用户尝试ssh登录</div>
<div>ssh通过信任方式登录</div>
<div>ssh通过交互方式登录</div>
<div>su切换到root失败</div>
<div>不合法用户登录</div>
<div>不合法ip登录</div>
<div></div>
<div><b>系统类：</b></div>
<div>服务器重启</div>
<div>磁盘掉线</div>
<div>Panic服务器</div>
<div>内存溢出</div>
<div></div>
<div>未完待续…</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1000</wp:post_id>
		<wp:post_date><![CDATA[2015-09-03 22:27:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-03 14:27:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e6%97%a5%e5%bf%97%e3%80%91%e7%b3%bb%e7%bb%9f%e6%97%a5%e5%bf%97%e5%88%86%e6%9e%90%e9%a1%b9%e7%9b%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%ae%89%e5%85%a8"><![CDATA[Linux安全]]></category>
		<category domain="post_tag" nicename="%e6%97%a5%e5%bf%97"><![CDATA[日志]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux基础】Ubutun进单用户方法</title>
		<link>http://www.itopers.com/?p=1019</link>
		<pubDate>Wed, 03 Jun 2015 15:24:15 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1019</guid>
		<description></description>
		<content:encoded><![CDATA[<div>机器重启按esc进入</div>
<div>1、开机到grub时，用上下键移到第二行的恢复模式，按e（注意不是回车）</div>
<div>即Ubuntu，With Linux 3.2.0-23-generic（recovery mode）</div>
<div>2、把ro recovery nomodeset 改为rw single init=/bin/bash</div>
<div>3、按ctrl+x 就可以进入 单用户模式。然后输入exit就可以passwd改root密码了</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1019</wp:post_id>
		<wp:post_date><![CDATA[2015-06-03 23:24:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-03 15:24:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e5%9f%ba%e7%a1%80%e3%80%91ubutun%e8%bf%9b%e5%8d%95%e7%94%a8%e6%88%b7%e6%96%b9%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="ubuntu"><![CDATA[ubuntu]]></category>
		<category domain="post_tag" nicename="%e5%8d%95%e7%94%a8%e6%88%b7"><![CDATA[单用户]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[86]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【故障总结-装机】the installer was unable to find any supported network devices</title>
		<link>http://www.itopers.com/?p=1050</link>
		<pubDate>Wed, 10 Jun 2015 16:34:05 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1050</guid>
		<description></description>
		<content:encoded><![CDATA[<div>手动装机时，遇到以下错误：</div>
<div>the installer was unable to find any supported network devices</div>
<div></div>
<div>解决办法：</div>
<div>ilo连上后先F10进去，然后操作系统选 vmvare 那个，让它先自己装dell的驱动，然后提示挂iso时候 再挂 3.5的iso装 就识别网卡了</div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1050</wp:post_id>
		<wp:post_date><![CDATA[2015-06-11 00:34:05]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-10 16:34:05]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%95%85%e9%9a%9c%e6%80%bb%e7%bb%93-%e8%a3%85%e6%9c%ba%e3%80%91the-installer-was-unable-to-find-any-supported-network-devices]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dell"><![CDATA[dell]]></category>
		<category domain="category" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<category domain="post_tag" nicename="%e8%a3%85%e6%9c%ba"><![CDATA[装机]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[120]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Mysql基础】Mysql登录授权</title>
		<link>http://www.itopers.com/?p=1057</link>
		<pubDate>Mon, 15 Jun 2015 03:55:56 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1057</guid>
		<description></description>
		<content:encoded><![CDATA[<div><strong>添加授权</strong></div>
<div>
<pre class="lang:vim decode:true">GRANT ALL ON tools.* TO vaster@'%' IDENTIFIED BY "passwd";</pre>
</div>
<div><strong>删除授权</strong></div>
<div>
<pre class="lang:vim decode:true">REVOKE ALL ON tools.*  FROM vaster@'%';
FLUSH PRIVILEGES;</pre>
</div>
<div>或</div>
<div>
<pre class="lang:vim decode:true  ">DELETE FROM user WHERE user='vaster';
FLUSH PRIVILEGES;</pre>
</div>
<div><strong>查看授权信息</strong></div>
<div>
<pre class="lang:vim decode:true">USE mysql;
SELECT host,user,password FROM user;</pre>
</div>
<div><strong>修改授权信息</strong></div>
<div>
<pre class="lang:vim decode:true">UPDARE USER SET host=’%’  WHERE user=’abc’;</pre>
</div>
<div>这里是授权成，abc用户可以成任意主机登录数据库。</div>
<div></div>
<div><strong>Mysql登录</strong></div>
<div>登录语句：Mysql –h 主机名/IP –u用户名 –p密码</div>
<div>在本机登录可写成：Mysql –u用户名 –p密码</div>
<div></div>
<div><strong>从远程的主机连接过来，要注意的事项：</strong></div>
<div>1. 数据库允许从该远程主机连接过来。</div>
<div>      意思就是说，用户拥有对该库的一些权限，并可以从某远程 IP连接过来</div>
<div>      GRANT ALL ON dbname.* TO <a href="mailto:abc@192.168.1.10">abc@192.168.1.10</a> IDENTIFIED BY “123456”</div>
<div>     授权abc 用户对dbname数据库拥有（ ALL）权限，允许用户从192.168.1.10机器上用密码 123456登录。</div>
<div>2. 防火墙正常开通</div>
<div>3. BIND地址正确</div>
<div></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1057</wp:post_id>
		<wp:post_date><![CDATA[2015-06-15 11:55:56]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-06-15 03:55:56]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e5%9f%ba%e7%a1%80%e3%80%91mysql%e7%99%bb%e5%bd%95%e6%8e%88%e6%9d%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="%e6%8e%88%e6%9d%83"><![CDATA[授权]]></category>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e5%ba%93"><![CDATA[数据库]]></category>
		<category domain="post_tag" nicename="%e7%99%bb%e5%bd%95"><![CDATA[登录]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[120]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【项目-基本信息】带项目需要了解的信息</title>
		<link>http://www.itopers.com/?p=1067</link>
		<pubDate>Fri, 14 Aug 2015 07:23:47 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1067</guid>
		<description></description>
		<content:encoded><![CDATA[<div><strong>项目的时间点</strong></div>
<div>     各个里程碑阶段</div>
<div></div>
<div><strong>项目基本信息</strong></div>
<div>     人员介绍及职责</div>
<div>     项目的最大承载</div>
<div>     用户分布情况</div>
<div>     对产品的不间断服务时长要求</div>
<div></div>
<div><strong>约定</strong></div>
<div>     需求提出（如何提）</div>
<div>     需求响应（时长）</div>
<div>     需求处理（时长）</div>
<div></div>
<div><strong>需要做的事</strong></div>
<div>     上线前压测</div>
<div>     架构优化，了解架构</div>
<div>     监控完善（资源监控、应用监控、网络情况）</div>
<div>     费用</div>
<div>     提升上线效率</div>
<div>     每周汇报数据</div>
<div></div>
<div><strong>问题收集</strong></div>
<div>     上传速度慢</div>
<div></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1067</wp:post_id>
		<wp:post_date><![CDATA[2015-08-14 15:23:47]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-08-14 07:23:47]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e9%a1%b9%e7%9b%ae-%e5%9f%ba%e6%9c%ac%e4%bf%a1%e6%81%af%e3%80%91%e5%b8%a6%e9%a1%b9%e7%9b%ae%e9%9c%80%e8%a6%81%e4%ba%86%e8%a7%a3%e7%9a%84%e4%bf%a1%e6%81%af]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<category domain="post_tag" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<category domain="post_tag" nicename="%e9%a1%b9%e7%9b%ae"><![CDATA[项目]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[101]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】pt工具之pt-table-checksum</title>
		<link>http://www.itopers.com/?p=984</link>
		<pubDate>Wed, 09 Sep 2015 04:16:18 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=984</guid>
		<description></description>
		<content:encoded><![CDATA[pt-table-checksum是percona-toolkit工具组中的其中之一，主要功能是检查mysql复制的一致性。大概的原理是在主上执行一致性检查，检查方式就是执行replace into的语句完成，然后通过复制传递到从库，再通过update更新master_src的值，然后通过决断this_src和master_src的值来判断复制是否一致。一般情况都是在线进行检查，如果在业务特别忙时，可以通过--max-load参数进行设置负载峰值，到达这个值后就将暂停运行，直到负载下来。如果发现一致性有问题，可以通过tp-table-sync来进行数据修复。

安装：

直接下载官网最新版本"https://www.percona.com/downloads/percona-toolkit/"，这里使用的为2.2.12-1版本，需要安装如下东东：
<pre class="lang:sh decode:true">perl(DBI) &gt;= 1.13
perl(DBD::mysql) &gt;= 1.0
perl(Time::HiRes)  
perl(IO::Socket::SSL)  
perl(Digest::MD5)  
rpmlib(PayloadFilesHavePrefix) &lt;= 4.0-1
rpmlib(CompressedFileNames) &lt;= 3.0.4-1</pre>
使用：

先要有一个主从环境，部署参考“<a href="http://www.itopers.com/?p=627">mysql主从复制</a>”，开始进行检查：
<pre class="lang:vim decode:true">[root@mysql.dmc.com ~]$pt-table-checksum --max-load="Threads_connected=1025" --no-check-replication-filters  --no-check-binlog-format -h 10.1.16.74 -u checksum -p checksum -P 3306 
            TS ERRORS  DIFFS     ROWS  CHUNKS SKIPPED    TIME TABLE
09-07T18:24:29      0      0        3       1       0   2.265 beebol.history
09-07T18:24:30 Cannot checksum table beebol.history_2: There is no good index and the table is oversized. at /usr/bin/pt-table-checksum line 6454.

09-07T18:24:36      0      0        5       6       0   5.568 beebol.navicat
09-07T18:24:50      0      0       20      11       0  14.076 beebol.people
09-07T18:24:50 Cannot checksum table beebol.t1: There is no good index and the table is oversized. at /usr/bin/pt-table-checksum line 6454.

09-07T18:24:50 Cannot checksum table beebol.t2: There is no good index and the table is oversized. at /usr/bin/pt-table-checksum line 6454.

09-07T18:24:51      0      0        0       1       0   0.805 beebol.t5
09-07T18:24:52      0      0        0       1       0   0.904 cor.accounts_auth_user_user_permissions
09-07T18:24:53      0      0        0       1       0   0.835 cor.accounts_members
09-07T18:24:54      0      0        0       1       0   1.182 cor.accounts_permissions
09-07T18:24:57      0      0        1       1       0   1.233 cor.auth_group
09-07T18:24:59      0      0        1       1       0   1.499 cor.auth_group_permissions
09-07T18:25:04 Checksum queries for table cor.auth_permission are executing very slowly.  --chunk-size has been automatically reduced to 1.  Check that the server is not being overloaded, or increase --chunk-time.  The last chunk, number 1 of table cor.auth_permission, selected 2 rows and took 4.695 seconds to execute.
Checksumming cor.auth_permission:  75% 00:10 remain
09-07T18:25:54      0      0       36      37       0  54.930 cor.auth_permission</pre>
如上已经正常执行，默认没有指定replicate库和表，默认为percona.checksums。如上已经正常执行了。其中有些输出这里再详细说明下：
<pre class="lang:vim decode:true">TS --&gt; The timestamp (without the year) when the tool finished checksumming the table.
ERRORS --&gt; The number of errors and warnings that occurred while checksumming the table. Errors and warnings are
printed to standard error while the table is in progress.
DIFFS  --&gt; The number of chunks that differ from the master on one or more replicas. If --no-replicate-check is
specified, this column will always have zeros. If --replicate-check-only is specified, then only tables
with differences are printed.
ROWS --&gt; The number of rows selected and checksummed from the table. It might be different from the number of rows
in the table if you use the –where option.
CHUNKS --&gt;  The number of chunks into which the table was divided.
SKIPPED -- &gt; The number of chunks that were skipped due one or more of these problems:
* MySQL not using the --chunk-index
* MySQL not using the full chunk index (--[no]check-plan)
* Chunk size is greater than --chunk-size * --chunk-size-limit
* Lock wait timeout exceeded (--retries)
* Checksum query killed (--retries)
As of pt-table-checksum 2.2.5, skipped chunks cause a non-zero “EXIT STATUS”.
TIME --&gt;  The time elapsed while checksumming the table.
TABLE --&gt;  The database and table that was checksummed.</pre>
<pre class="lang:vim decode:true">09-07T18:24:30 Cannot checksum table beebol.history_2: There is no good index and the table is oversized. at /usr/bin/pt-table-checksum line 6454.</pre>
这个由于是beebol.history_2中没有主键和唯一索引，因为该工具是根据主键索引或者唯一索引来分块进行校验的，默认是1000行为一块。
<pre class="lang:vim decode:true ">09-07T18:25:04 Checksum queries for table cor.auth_permission are executing very slowly.  --chunk-size has been automatically reduced to 1.  Check that the server is not being overloaded, or increase --chunk-time.  The last chunk, number 1 of table cor.auth_permission, selected 2 rows and took 4.695 seconds to execute.</pre>
这个是由于在这个表上选择2行数据的执行时间已经超过了chunk-time默认时间0.5s。这个提示自动将chunk-size降低为1，默认是1000.

如下一直在刷新如下信息，可以将--max-load进行设置一下：
<pre class="lang:vim decode:true ">Pausing because Threads_running=0.
Pausing because Threads_running=0.
Pausing because Threads_running=0.</pre>
我这里设置--max-load="Threads_running=1025"还是会刷，后来将这个connected设置下就ok了，--max-load="Threads_connected=1025"。
<pre class="lang:vim decode:true ">Diffs cannot be detected because no slaves were found.  Please read the --recursion-method documentation for information.</pre>
<span class="pun">这个表示找不到</span><span class="pln">slave</span><span class="pun">，检查可能会无效。需要指定</span> <span class="pun">--</span><span class="pln">recursion</span><span class="pun">-</span><span class="pln">method</span>

获取slave信息的方式有：<span class="pun">--</span><span class="pln">recursion</span><span class="pun">-</span><span class="pln">method</span>

<a href="http://www.itopers.com/wp-content/uploads/2015/09/method.png"><img class="alignnone size-full wp-image-985" src="http://www.itopers.com/wp-content/uploads/2015/09/method.png" alt="method" width="635" height="125" /></a>

参数，可以参考下官方文档和tp-table-checksum  --help

不一致情况：
<pre class="lang:sh decode:true ">[root@mysql.dmc.com ~]$pt-table-checksum --max-load="Threads_connected=1025" --no-check-replication-filters  --no-check-binlog-format -h 10.1.16.74 -u checksum -p checksum -P 3306 --databases=test
            TS ERRORS  DIFFS     ROWS  CHUNKS SKIPPED    TIME TABLE
09-07T19:49:20      0      0        3       1       0   0.896 test.history
09-07T19:49:22      0      0        0       1       0   1.816 test.history_2
09-07T19:49:24      0      0        6       1       0   2.517 test.navicat
09-07T19:49:26      0      0       20       1       0   1.236 test.people
09-07T19:49:27      0      0        2       1       0   1.158 test.t1
09-07T19:49:29      0      0        7       1       0   1.484 test.t2
09-07T19:49:31      0      0        4       1       0   1.935 test.t3
09-07T19:49:32      0      0        3       1       0   1.247 test.t4
09-07T19:49:33      0      0        0       1       0   1.114 test.t5
09-07T19:49:35      0      1        6       1       0   1.843 test.t_order</pre>
检查后，发现test.t_order表有不一致情况，原因是由于我手动到从上进行了一次update操作。可以通过pt-table-sync进行修复。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>984</wp:post_id>
		<wp:post_date><![CDATA[2015-09-09 12:16:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-09 04:16:18]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91pt%e5%b7%a5%e5%85%b7%e4%b9%8bpt-table-checksum]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="pt-table-checksum"><![CDATA[pt-table-checksum]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[218]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】pt工具之pt-table-sync</title>
		<link>http://www.itopers.com/?p=989</link>
		<pubDate>Wed, 09 Sep 2015 07:01:40 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=989</guid>
		<description></description>
		<content:encoded><![CDATA[pt-table-sync是percona-toolkit工具组中的其中之一，主要功能是解决mysql复制的不一致性问题。参考“<a title="详细阅读 【mysql】pt工具之pt-table-checksum" href="http://www.itopers.com/?p=984" rel="bookmark">【mysql】pt工具之pt-table-checksum</a>”，进行一致性检查。大概原理：基于主上的数据，生成sql执行，同步到从上，主上的数据不会变。可以通过--print 或者--dry-run查看有哪些数据变更，然后再进行execute。
<pre class="lang:sh decode:true">[root@mysql.dmc.com ~]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74,D=test,t=t_order h=10.1.16.76 --print
UPDATE `test`.`t_order` SET `customer_id`='6' WHERE `order_id`='6' LIMIT 1 /*percona-toolkit src_db:test src_tbl:t_order src_dsn:D=test,h=10.1.16.74,p=...,t=t_order,u=checksum dst_db:test dst_tbl:t_order dst_dsn:D=test,h=10.1.16.76,p=...,t=t_order,u=checksum lock:0 transaction:1 changing_src:0 replicate:0 bidirectional:0 pid:27004 user:root host:mysql.dmc.com*/;</pre>
如上是将test库中的t_order表变更语句打印出来了。
<pre class="lang:sh decode:true ">[root@mysql.dmc.com ~]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74,D=test,t=t_order h=10.1.16.76 --execute</pre>
如上是进行数据一致性同步
<pre class="lang:sh decode:true ">[root@mysql.dmc.com ~]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74 h=10.1.16.76 --replicate percona.checksums --print</pre>
根据checksum显示出所有不一致的数据变更
<pre class="lang:sh decode:true ">[root@mysql.dmc.com ~]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74 h=10.1.16.76 --replicate percona.checksums --print --databases test
REPLACE INTO `test`.`t_order`(`order_id`, `customer_id`) VALUES ('6', '6') /*percona-toolkit src_db:test src_tbl:t_order src_dsn:h=10.1.16.74,p=...,u=checksum dst_db:test dst_tbl:t_order dst_dsn:h=slave_16.76,p=...,u=checksum lock:1 transaction:1 changing_src:percona.checksums replicate:percona.checksums bidirectional:0 pid:27194 user:root host:mysql.dmc.com*/;
[root@mysql.dmc.com ~]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74 h=10.1.16.76 --replicate percona.checksums --execute --databases test</pre>
同步test库的不一致
<pre class="lang:vim decode:true  "># at 61854
#150909 14:46:35 server id 1  end_log_pos 62290 CRC32 0x226770f7        Query   thread_id=231653        exec_time=0     error_code=0
SET TIMESTAMP=1441781195/*!*/;
REPLACE INTO `test`.`t_order`(`order_id`, `customer_id`) VALUES ('6', '6') /*percona-toolkit src_db:test src_tbl:t_order src_dsn:h=10.1.16.74,p=...,u=checksum dst_db:test dst_tbl:t_order dst_dsn:h=slave_16.76,p=...,u=checksum lock:1 transaction:1 changing_src:percona.checksums replicate:percona.checksums bidirectional:0 pid:11064 user:root host:mysql.dmc.com*/
/*!*/;</pre>
进行同步后，可以看master上的binlog或者看slave中的relaylog都可以看到如上的日志，这里就看出sync的原理了。

但是，没有通过checksum的方式 进行sync,直接修改从库，就不会在主上有binlog了。
<pre class="lang:sh decode:true ">[root@mysql.dmc.com mysql]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74,D=test,t=t_order h=10.1.16.76 --print
UPDATE `test`.`t_order` SET `customer_id`='6' WHERE `order_id`='6' LIMIT 1 /*percona-toolkit src_db:test src_tbl:t_order src_dsn:D=test,h=10.1.16.74,p=...,t=t_order,u=checksum dst_db:test dst_tbl:t_order dst_dsn:D=test,h=10.1.16.76,p=...,t=t_order,u=checksum lock:0 transaction:1 changing_src:0 replicate:0 bidirectional:0 pid:11559 user:root host:mysql.dmc.com*/;    
[root@mysql.dmc.com mysql]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74,D=test,t=t_order h=10.1.16.76 --execute 

</pre>
你会很清楚发现，直接根据主库数据修改从库的数据时，产生的sql是不一样的。直接修改从库是update,而通过checksum修改者是repalce into。
<pre class="lang:sh decode:true ">[root@mysql.dmc.com mysql]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74,D=test,t=t_order h=10.1.16.76 --replicate percona.checksums --print           REPLACE INTO `test`.`t_order`(`order_id`, `customer_id`) VALUES ('6', '6') /*percona-toolkit src_db:test src_tbl:t_order src_dsn:D=test,h=10.1.16.74,p=...,t=t_order,u=checksum dst_db:test dst_tbl:t_order dst_dsn:D=test,h=10.1.16.76,p=...,t=t_order,u=checksum lock:1 transaction:1 changing_src:percona.checksums replicate:percona.checksums bidirectional:0 pid:11550 user:root host:mysql.dmc.com*/;</pre>
主要看--replicate percona.checksums 这个参数

如果是master-master架构，或者slave开启了binlog，主要是为了数据安全。直接修改就会提示如下：
<pre class="lang:sh decode:true ">[root@mysql.dmc.com mysql]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74,D=test,t=t_order h=10.1.16.76 --print 
Can't make changes on D=test,h=10.1.16.76,p=...,t=t_order,u=checksum because it's a slave. See the documentation section 'REPLICATION SAFETY' for solutions to this problem. at /usr/bin/pt-table-sync line 10669.  while doing test.t_order on 10.1.16.76</pre>
可以通过--no-bin-log参数来解决，不记录bin-log，不然在主主架构上会导致复制回去。
<pre class="lang:sh decode:true ">[root@mysql.dmc.com mysql]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74,D=test,t=t_order h=10.1.16.76 --print --no-bin-log
UPDATE `test`.`t_order` SET `customer_id`='6' WHERE `order_id`='6' LIMIT 1 /*percona-toolkit src_db:test src_tbl:t_order src_dsn:D=test,h=10.1.16.74,p=...,t=t_order,u=checksum dst_db:test dst_tbl:t_order dst_dsn:D=test,h=10.1.16.76,p=...,t=t_order,u=checksum lock:0 transaction:1 changing_src:0 replicate:0 bidirectional:0 pid:11559 user:root host:mysql.dmc.com*/;</pre>
&nbsp;

前面这些测试t_order 表是有主键和唯一索引的，如果没有通过checksum就无法进行修复：
<pre class="lang:sh decode:true">[test]&gt; show create table t5;
 CREATE TABLE `t5` (
  `id` int(11) DEFAULT NULL,
  `dt` datetime NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1
/*!50100 PARTITION BY RANGE (TO_DAYS(dt))
(PARTITION p0 VALUES LESS THAN (735599) ENGINE = InnoDB,
 PARTITION p1 VALUES LESS THAN (735630) ENGINE = InnoDB,
 PARTITION p2 VALUES LESS THAN (735658) ENGINE = InnoDB,
 PARTITION p3 VALUES LESS THAN MAXVALUE ENGINE = InnoDB) */ |

[root@mysql.dmc.com mysql]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74,D=test,t=t5 h=10.1.16.76 --replicate percona.checksums --print        
Can't make changes on the master because no unique index exists at /usr/bin/pt-table-sync line 10648.  while doing test.t5 on 10.1.16.76</pre>
这是由于test.t5没有唯一索引导致，如果需要修复可选择如下方式。
<pre class="lang:sh decode:true ">[root@mysql.dmc.com mysql]$pt-table-sync --user=checksum --password=checksum h=10.1.16.74,D=test,t=t5 h=10.1.16.76 --print --no-bin-log
DELETE FROM `test`.`t5` WHERE `id`='2' AND `dt`='2015-09-07 16:26:00' LIMIT 1 /*percona-toolkit src_db:test src_tbl:t5 src_dsn:D=test,h=10.1.16.74,p=...,t=t5,u=checksum dst_db:test dst_tbl:t5 dst_dsn:D=test,h=10.1.16.76,p=...,t=t5,u=checksum lock:0 transaction:1 changing_src:0 replicate:0 bidirectional:0 pid:12026 user:root host:mysql.dmc.com*/;
INSERT INTO `test`.`t5`(`id`, `dt`) VALUES ('2', '2015-09-07 00:00:00') /*percona-toolkit src_db:test src_tbl:t5 src_dsn:D=test,h=10.1.16.74,p=...,t=t5,u=checksum dst_db:test dst_tbl:t5 dst_dsn:D=test,h=10.1.16.76,p=...,t=t5,u=checksum lock:0 transaction:1 changing_src:0 replicate:0 bidirectional:0 pid:12026 user:root host:mysql.dmc.com*/;</pre>
没有唯一索引的数据修复是通过delete后再insert，把print改为execute即可修复。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>989</wp:post_id>
		<wp:post_date><![CDATA[2015-09-09 15:01:40]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-09 07:01:40]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91pt%e5%b7%a5%e5%85%b7%e4%b9%8bpt-table-sync]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="pt-table-rsync"><![CDATA[pt-table-rsync]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[217]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】如何回收delete之后mysql所占用的磁盘空间</title>
		<link>http://www.itopers.com/?p=1008</link>
		<pubDate>Fri, 04 Sep 2015 14:45:25 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1008</guid>
		<description></description>
		<content:encoded><![CDATA[我们都知道，当使用 <strong>innodb_file_per_table=OFF</strong>的时候，数据文件都会存储在ibdata文件中，当我们从表中delete数据之后，除非使用dump/reload的方法，没有其他的办法来释放被占用的磁盘空间，数据只能一直增长。当使用了<strong>Innodb_file_per_table=ON</strong>的时候，当你delete数据之后，数据删除了，但是磁盘的空间并不会释放，除了dump/reload之外，还有如下的方法来回收这部分的空间。请参考下面的连接。

<a href="http://www.mysqlperformanceblog.com/2013/09/25/how-to-reclaim-space-in-innodb-when-innodb_file_per_table-is-on/">http://www.mysqlperformanceblog.com/2013/09/25/how-to-reclaim-space-in-innodb-when-innodb_file_per_table-is-on/</a>

注：之前使用optimize回收空间，但是在执行的过程中会锁表，因此会影响正在跑的业务，如下的连接里面介绍了percona toolkit的一个回收磁盘空间的命令，不会锁表

主要的原理是：创建一个triggers，创建一个临时表，将原来表中数据复制到临时表中，触发器的作用是保证执行复制的过程中，源表和临时表中同时插入数据。之后删除源表，重命名一下临时表即可。这个过程中应该保证，磁盘空间能够容下源表的两倍的数据大小

命令：Pt-online-schema-change --alter "ENGINE=InnoDB" D=DatabaseName,t=TableName  --execute]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1008</wp:post_id>
		<wp:post_date><![CDATA[2015-09-04 22:45:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-04 14:45:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91%e5%a6%82%e4%bd%95%e5%9b%9e%e6%94%b6delete%e4%b9%8b%e5%90%8emysql%e6%89%80%e5%8d%a0%e7%94%a8%e7%9a%84%e7%a3%81%e7%9b%98%e7%a9%ba%e9%97%b4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[146]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【AWS】整盘格式化与分区格式化</title>
		<link>http://www.itopers.com/?p=1014</link>
		<pubDate>Sat, 05 Sep 2015 15:16:39 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1014</guid>
		<description></description>
		<content:encoded><![CDATA[AWS上的资源是按时按量收费的，所以，我们在项目前期评估资源通常是按最小化使用进行资源分配，后期量大了再将资源扩大。

例如：一个<span lang="EN-US">20GB</span>的磁盘，用着用着就发现不够用了，于是决定采用以下办法将磁盘扩容：

（<span lang="EN-US">1</span>）将磁盘做成快照（<span lang="EN-US">2</span>）基于快照创建一个大点的磁盘（<span lang="EN-US">3</span>）在实例上换成新的磁盘

这过程看着没啥问题，可问题在于，你的文件系统上有分区吗，你的文件系统能扩展吗，你创建的分区能扩展吗？ 尤其那些喜欢在单盘上建单分区的同学，整个磁盘是变大了，可是你创建的分区不会跟着变大，这时你需要手动修改分区表这种危险操作将例如<span lang="EN-US">/dev/xvdf1</span>这样的分区变大，冒着数据丢失的风险。

最好和最简单的办法就是：根分区已经弄好了，单独创建的一块<span lang="EN-US">EBS</span>磁盘用于存储数据，不需要再给数据盘做分区了，直接整盘格式化使用就好（<span lang="EN-US">mkfs.ext4 /dev/xvdf</span> ）

在云上，一块磁盘上建一个分区，然后挂载分区使用，这样会造成文件系统扩容难度及风险增大，尤其是通过快照扩容磁盘的时候。

在云上，一块磁盘不创建分区，直接创建文件系统使用，这样基于快照的扩大磁盘的时候，因为没分区，整个文件系统就在磁盘上，磁盘变大文件系统跟着变大，即使没跟着变大，使用<span lang="EN-US">resize2fs /dev/xvdf</span>也能扩大，<span lang="EN-US">windows</span>下是需要手动修改。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1014</wp:post_id>
		<wp:post_date><![CDATA[2015-09-05 23:16:39]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-05 15:16:39]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90aws%e3%80%91%e6%95%b4%e7%9b%98%e6%a0%bc%e5%bc%8f%e5%8c%96%e4%b8%8e%e5%88%86%e5%8c%ba%e6%a0%bc%e5%bc%8f%e5%8c%96]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="post_tag" nicename="ebs"><![CDATA[EBS]]></category>
		<category domain="category" nicename="ec2"><![CDATA[EC2]]></category>
		<category domain="post_tag" nicename="ec2"><![CDATA[EC2]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[153]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【AWS】获取EC2实例信息写入登录提示文件/etc/motd</title>
		<link>http://www.itopers.com/?p=1020</link>
		<pubDate>Wed, 09 Sep 2015 15:39:59 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1020</guid>
		<description></description>
		<content:encoded><![CDATA[在管理EC2的过程中，需要做一些人性化的处理，如登录到EC2之后，会显示一些EC2相关的信息，如IP，所在节点，实例类型等，下面这个脚本就是获取这些信息。
<pre class="lang:vim decode:true">#  cat /usr/local/tools/ec2-metadata.sh 
#!/bin/bash
#
function print_help()
{
        echo "Directly use this to create /etc/motd to show instance info."
}

#check some basic configurations before running the code
function chk_config()
{
        #check if run inside an ec2-instance
        x=$(curl -s http://169.254.169.254/)
        if [ $? -gt 0 ]; then
                echo '[ERROR] Command not valid outside EC2 instance. Please run this command within a running EC2 instance.'
                exit 1
        fi
}

#print standard metric
function print_normal_metric() {
        metric_path=$2
        echo -ne "\033[33m$1:\t\033[0m"
        RESPONSE=$(curl -fs http://169.254.169.254/latest/${metric_path}/)
        if [ $? == 0 ]; then
                echo -e "\033[35m$RESPONSE\033[0m"
        else
                echo "not available"
        fi
}

#get hostname
function print_hostname(){
        x=$(/bin/grep HOSTNAME /etc/sysconfig/network | /bin/awk -F "=" '{print $2}')
        if [ -n "$x" ]; then
                echo -e "\033[33mHostname:\t\033[0m""\033[35m$x\033[0m"
        else
                echo "not available"
        fi
}

function print_all()
{
        echo "*************************************"
        print_hostname
        print_normal_metric Location meta-data/placement/availability-zone
        print_normal_metric InstanceID meta-data/instance-id
        print_normal_metric InstanceType meta-data/instance-type
        print_normal_metric PrivateIP meta-data/local-ipv4
        print_normal_metric PublicIP meta-data/public-ipv4
        print_normal_metric VirtualTech meta-data/profile
        echo "*************************************"
}

#check if run inside an EC2 instance
chk_config

#command called in default mode
if [ "$#" -eq 0 ]; then
        print_all
fi</pre>
在/etc/profile中写入以下行，实现将获取的内容写入到motd文件中
<pre class="lang:vim decode:true"> /bin/bash /usr/local/tools/ec2-metadata.sh &gt; /etc/motd</pre>
注意：之所以要写到profile文件，是因为EC2的信息很有可能会变，所以需要及时更新。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1020</wp:post_id>
		<wp:post_date><![CDATA[2015-09-09 23:39:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-09 15:39:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90aws%e3%80%91%e8%8e%b7%e5%8f%96ec2%e5%ae%9e%e4%be%8b%e4%bf%a1%e6%81%af%e5%86%99%e5%85%a5%e7%99%bb%e5%bd%95%e6%8f%90%e7%a4%ba%e6%96%87%e4%bb%b6etcmotd]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="aws"><![CDATA[AWS]]></category>
		<category domain="category" nicename="ec2"><![CDATA[EC2]]></category>
		<category domain="post_tag" nicename="ec2"><![CDATA[EC2]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[161]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Django】项目开发规范</title>
		<link>http://www.itopers.com/?p=1025</link>
		<pubDate>Thu, 10 Sep 2015 06:08:15 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1025</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<div><span style="color: #008000;"><strong>开发环境：</strong></span></div>
<div>          Python：python-2.7.8</div>
<div>          Django：Django-1.7.1</div>
<div></div>
<div><span style="color: #008000;"><strong>文件规则：</strong></span></div>
<div>位置，</div>
<div>               模板文件-html，/projectpath/templates/appname/js</div>
<div>               静态文件-js，/projectpath/static/appname/js</div>
<div>               静态文件-css，/projectpath/static/appname/css</div>
<div>               静态文件-img，/projectpath/static/appname/img</div>
<div>               功能文件-function，/projectpath/plugins/funcname</div>
<div></div>
<div>命名规则，</div>
<div>               页面功能.html</div>
<div>               文件功能.js</div>
<div>               文件功能.css</div>
<div>               图片内容.img</div>
<div>               功能_func.py</div>
<div>               功能_class.py</div>
<div></div>
<div><span style="color: #008000;"><strong>函数规则：</strong></span></div>
<div>        命名规则，</div>
<div>               看名字知道功能就行，根据个人习惯来吧</div>
<div>        注意事项，</div>
<div>               每个函数都需要标明创建人，及功能</div>
<div>               views里面尽量不要写业务逻辑，将业务逻辑写到单独的文件中，做模块导入</div>
<div>        示例，</div>
<blockquote>
<div>   def index(request):</div>
<div>    '''</div>
<div>    @author: Vaster</div>
<div>    @note: For Testing</div>
<div>    '''</div>
<div>     #主体内容</div>
<div>    return render_to_response('otp/blank-page.html',{"a":'xxx'})</div></blockquote>
<div></div>
<div><span style="color: #008000;"><strong>变量</strong></span></div>
<div>        命名规则，</div>
<div>               看名字知道功能就行，根据个人习惯来吧</div>
<div></div>
<div></div>
<div><span style="color: #008000;"><strong>数据库相关</strong></span></div>
<div>       如果数据采用手动创建，需要保留创建语句</div>
<div>       数据库结构有变更，需要在SVN中写个文件说明一下</div>
<div></div>
<div><span style="color: #008000;"><strong>版本提交</strong></span></div>
<div>       在commit前，一定要先做update操作</div>
<div>       在commit前，遇到版本冲突或有修改的部分，最好确认一下再提交</div>
<div></div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1025</wp:post_id>
		<wp:post_date><![CDATA[2015-09-10 14:08:15]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-10 06:08:15]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90django%e3%80%91%e9%a1%b9%e7%9b%ae%e5%bc%80%e5%8f%91%e8%a7%84%e8%8c%83]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django-2"><![CDATA[django]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="%e5%bc%80%e5%8f%91%e8%a7%84%e8%8c%83"><![CDATA[开发规范]]></category>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[167]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux进阶】利用iptables做代理</title>
		<link>http://www.itopers.com/?p=1031</link>
		<pubDate>Sun, 06 Sep 2015 06:46:16 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1031</guid>
		<description></description>
		<content:encoded><![CDATA[一直在负责海外的项目，有时候访问国外的某个统计系统或其他业务时，速度特别慢，这时，需求方要求我们给他做加速。这种情况下，一个最方便的方法就是使用iptables的NAT做代理来实现。

实现方法：

(代理机x.x.x.x，这个机器通常选择香港的机器)

1. 开启系统的ip转发

#sysctl -w net.ipv4.ip_forward=1

2. 添加访问的规则
<pre class="lang:vim decode:true"># Generated by iptables-save v1.3.5 on Tue Jan 27 14:55:31 2015
*nat
:PREROUTING ACCEPT [2308135:172237250]
:POSTROUTING ACCEPT [852905:57536025]
:OUTPUT ACCEPT [852905:57536025]
-A PREROUTING -d x.x.x.x -p tcp -m tcp --dport 1080 -j DNAT --to-destination x1.x1.x1.x1:80
-A POSTROUTING -d x1.x1.x1.x1 -p tcp -m tcp --dport 80 -j MASQUERADE
COMMIT
# Completed on Tue Jan 27 14:55:31 2015</pre>
(目的机x1.x1.x1.x1)

3. 防火墙开通代理机访问本机80

访问方法：

直接在浏览器输入x.x.x.x:1080即可实现访问x1.x1.x1.x1:80

&nbsp;
<div></div>
<div></div>
<div></div>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1031</wp:post_id>
		<wp:post_date><![CDATA[2015-09-06 14:46:16]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-06 06:46:16]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e8%bf%9b%e9%98%b6%e3%80%91%e5%88%a9%e7%94%a8iptables%e5%81%9a%e4%bb%a3%e7%90%86]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="iptables"><![CDATA[iptables]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="nat"><![CDATA[nat]]></category>
		<category domain="category" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[163]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【故障排查-Linux】执行ls命令,session卡死（一个服务导致的麻烦）</title>
		<link>http://www.itopers.com/?p=1034</link>
		<pubDate>Fri, 11 Sep 2015 06:56:06 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1034</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<h1><span style="font-family: 微软雅黑; font-size: medium;">背景描述：</span></h1>
</div>
<div><span style="font-family: 微软雅黑;">     开发同学反馈，登录服务器后，执行ls命令session就会卡死。开发同学的家目录是/home/yanfa</span></div>
<div><span style="font-family: 微软雅黑;"> </span></div>
<div><b><span style="font-family: 微软雅黑;">问题排查：</span></b></div>
<div><span style="font-family: 微软雅黑;">     切换到开发的帐号，模拟现象，故障重现;直接在root用户下，执行ls命令，正常执行</span></div>
<div><span style="font-family: 微软雅黑;">          怀疑权限问题，查看messaage、secure日志</span></div>
<div><span style="font-family: 微软雅黑;">     直接在root用户下，执行ls /home/yanfa，故障重现; 执行/bin/ls,strace ls正常执行</span></div>
<div><span style="font-family: 微软雅黑;">          怀疑是命令的问题，alias查看，查看命令的版本/md5，差点就要以为命令有bug了</span></div>
<div><span style="font-family: 微软雅黑;">    取消alias后，ls没问题，ls -l执行仍然会卡死；执行strace ls -l /home/yanfa 执行到某处的时候会卡死</span></div>
<div><span style="font-family: 微软雅黑;">          仔细查看strace的输出，发现最后卡在ftpdir这个地方，想起这是一个nfs目录的挂载点，心想是nfs出问题了。</span></div>
<div><span style="font-family: 微软雅黑;">          执行一下df，也输出不了内容，之前遇到过类似连不上nfs服务器，df执行不了命令的情况。</span></div>
<div><span style="font-family: 微软雅黑;">          showmount -e x.x.x.x   输出不了结果k</span></div>
<div><span style="font-family: 微软雅黑;">          登录x.x.x.x nfs 服务器，果然服务挂掉了。果断启起来</span></div>
<div><span style="font-family: 微软雅黑;">          回来开发中控机，showmount -e x.x.x.x   可以看到输出了。等一下下再df，可以看到有正常输出了。然后再执行一下ls -l /home/yanfa  输出正常。</span></div>
<div><span style="font-family: 微软雅黑;">          修复刚刚的alias</span></div>
<div><span style="font-family: 微软雅黑;"> </span></div>
<div><b><span style="font-family: 微软雅黑;">总结：</span></b></div>
<div><span style="font-family: 微软雅黑;">     耗时1.5小时。</span></div>
<div><span style="font-family: 微软雅黑;">     其实这种类似原因的因为以前发生过一次，这次排查了1个多小时，实在是有点久了，得多多积累经验，一击即中要害呀。</span></div>
<div><span style="font-family: 微软雅黑;">     缺少一些监控，既然有远程挂载服务，应该要加一下检查服务是否正常的监控的，but这个暂时没有。</span></div>
<div><span style="font-family: 微软雅黑;">     nfs这种服务在这方面确实有点不好，有空看一下其他更好的替代解决方案</span></div>
<div><span style="font-family: 微软雅黑;"> </span></div>
<div><span style="font-family: 微软雅黑;"> </span></div>
<div><span style="font-family: 微软雅黑;"> </span></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1034</wp:post_id>
		<wp:post_date><![CDATA[2015-09-11 14:56:06]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-11 06:56:06]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%95%85%e9%9a%9c%e6%8e%92%e6%9f%a5-linux%e3%80%91%e6%89%a7%e8%a1%8cls%e5%91%bd%e4%bb%a4session%e5%8d%a1%e6%ad%bb%ef%bc%88%e4%b8%80%e4%b8%aa%e6%9c%8d%e5%8a%a1%e5%af%bc%e8%87%b4%e7%9a%84]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="nfs"><![CDATA[nfs]]></category>
		<category domain="category" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[318]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【脚本】中备中控同步机制</title>
		<link>http://www.itopers.com/?p=1037</link>
		<pubDate>Mon, 07 Sep 2015 07:15:07 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1037</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><a name="_Toc410663294"></a></h2>
<div>        通常情况下，我们会为同一项目准备两个中控，一主一备，以下是为主备中控做数据备份的一个方法。此处仅包含用户常用的文件，不包含系统重要文件</div>
<div></div>
<div><b>1.</b> <b>备中控部署</b><b>rsync</b><b>服务</b></div>
<div>
<pre class="lang:vim decode:true">#cat /etc/rsync_ccs_backup.conf
pid file = /var/run/rsyncd.pid
port=873
address = 10.10.10.20
uid = root
gid = root
use chroot = no
read only = no
hosts allow = 10.10.10.10
hosts deny = *
 [iplist]
path = /home
[user1]
path = /home/user1
[user2]
path = /home/user2
[root]
path = /root</pre>
</div>
<div>PS:主中控IP10.10.10.10，备中控IP10.10.10.20</div>
<div></div>
<div><b>2.</b> <b>启动</b><b>rsync</b><b>服务(备中控)</b></div>
<div>
<pre class="lang:vim decode:true">/usr/bin/rsync --daemon --config=/etc/rsync_ccs_backup.conf --port=873</pre>
</div>
<div><b>3.</b> <b>主中控部署</b><b>crontab</b></div>
<div>
<pre class="lang:vim decode:true">00 4 * * * /bin/bash /home/ccsbakup/backup.sh &gt; /root/ccs-backup.log 2&gt;&amp;1</pre>
</div>
<div><b>4.</b> <b>同步脚本内容</b></div>
<div>
<pre class="lang:vim decode:true"># less /home/ccsbakup/backup.sh
#!/bin/bash
#For transfering important files to sccs, and getting ccs bakup files from sccs
#trap
trap 'echo exit...;exit 1' 2 15
#sccs -&gt; second ccs
wdir="/home/ccsbakup"
sccs="10.10.10.20"
date=$(date +%Y%m%d)
yesterday=$(date -d "1 days ago" +%Y%m%d)
account="user1 user2"
#transfer important files for root
        #auvz -&gt; rlptgoDuvz
        /usr/bin/rsync -rptgoDuvz --progress /home/{wind,*.lst} ${sccs}::iplist
#transfer files for accounts
for i in $account;
do
        /usr/bin/rsync -rptgoDuvz --progress "/home/${i}/" --exclude=".ssh/*"  ${sccs}::${i}
done
        /usr/bin/rsync -rptgoDuvz --progress "/root" --exclude=".ssh/*"  ${sccs}::root
exit 0</pre>
&nbsp;

</div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1037</wp:post_id>
		<wp:post_date><![CDATA[2015-09-07 15:15:07]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-07 07:15:07]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e6%a1%88%e4%be%8b%e3%80%91%e4%b8%ad%e5%a4%87%e4%b8%ad%e6%8e%a7%e5%90%8c%e6%ad%a5%e6%9c%ba%e5%88%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<category domain="post_tag" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[159]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux进阶】core dump文件的形成和设置</title>
		<link>http://www.itopers.com/?p=1047</link>
		<pubDate>Mon, 07 Sep 2015 16:26:11 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1047</guid>
		<description></description>
		<content:encoded><![CDATA[<div>    Core，又称之为Core Dump文件，是Unix/Linux操作系统的一种机制，对于线上服务而言，Core令人闻之色变，因为出Core的过程意味着服务暂时不能正常响应， 需要恢复，并且随着吐Core进程的内存空间越大，此过程可能持续很长一段时间（例如当进程占用60G+以上内存时，完整Core文件需要15分钟才能完 全写到磁盘上）</div>
<div>    OS在出Core的同时，虽然会终止掉当前进程，但是也会保留下第一手的现场数据，OS仿佛是一架被按下快门的相机，而照片就是产出的Core文件。里面含有当进程被终止时内存、CPU寄存器等信息，可以供后续开发人员进行调试。</div>
<div>    关于Core产生的原因很多，比如过去一些Unix的版本不支持现代Linux上这种GDB直接附着到进程上进行调试的机制，需要先向进程发送终止信号，然后用工具阅读core文件。在Linux上，我们就可以使用kill向一个指定的进程发送信号或者使用gcore命令来使其主动出Core并退 出。如果从浅层次的原因上来讲，出Core意味着当前进程存在BUG，需要程序员修复。从深层次的原因上讲，是当前进程触犯了某些OS层级的保护机制，逼迫OS向当前进程发送诸如SIGSEGV(即signal 11)之类的信号, 例如访问空指针或数组越界出Core，实际上是触犯了OS的内存管理，访问了非当前进程的内存空间，OS需要通过出Core来进行警示，这就好像一个人身 体内存在病毒，免疫系统就会通过发热来警示，并导致人体发烧是一个道理（有意思的是，并不是每次数组越界都会出Core，这和OS的内存管理中虚拟页面分 配大小和边界有关，即使不出Core，也很有可能读到脏数据，引起后续程序行为紊乱，这是一种很难追查的BUG）。</div>
<div></div>
<div><b>core文件的生成</b></div>
<div>ulimit -c</div>
<div>此命令可以显示当前OS对于Core文件大小的限制，如果为0，则表示不允许产生Core文件。</div>
<div>ulimit -c  n</div>
<div>其中n为数字，表示允许Core文件体积的最大值，单位为Kb</div>
<div>ulimit -c   unlimited</div>
<div>设置core文件为无限大</div>
<div></div>
<div><b>core文件名格式</b></div>
<div>/proc/sys/kernel/core_pattern文件，此文件用于控制Core文件产生的文件名，此文件支持定制，一般使用%配合不同的字符，这里罗列几种：</div>
<div>%p  出Core进程的PID</div>
<div>%u  出Core进程的UID</div>
<div>%g  出core进程的GID</div>
<div>%s  造成Core的signal号</div>
<div>%t  出Core的时间，从1970-01-0100:00:00开始的秒数</div>
<div>%e  出Core进程对应的可执行文件名</div>
<div>%h 出主机名</div>
<div></div>
<div><b>core文件的生成目录</b></div>
<div><b>临时修改</b></div>
<div>echo "/data/corefile/core-%e-%p-%t" &gt; /proc/sys/kernel/core_pattern</div>
<div>sysctl -w kernel.core_pattern=/data/corefile/core-%e-%p-%t</div>
<div>永久修改</div>
<div>在/etc/sysctl.conf文件中添加</div>
<div>kernel.core_pattern = /data/corefile/core-%e-%p-%t</div>
<div>将所产生的core文件存放到/data/corefile目录，文件名为core-命令-pid-时间戳</div>
<div></div>
<div><b>配置ulimit永久生效</b></div>
<div># cat /etc/security/limits.conf</div>
<div>*               soft    core            unlimited</div>
<div># ulimit -c unlimited</div>
<div></div>
<div><b>C文件</b></div>
<div># cat a.c</div>
<div>#include "stdio.h"</div>
<div>#include "stdlib.h"</div>
<div>int main(){</div>
<div>int* stack_of = malloc(sizeof(int)*100000000);</div>
<div>int b;</div>
<div>int* a;</div>
<div>*a=b;</div>
<div>}</div>
<div></div>
<div><b>编译</b></div>
<div>普通编译</div>
<div>gcc -g a.c -o a</div>
<div>优化编译</div>
<div>gcc -O3 -g a.c -o a</div>
<div>-O3参数，可以对程序进行优化，一个负面效应是优化过程中会舍弃部分局部变量，导致调试时出现困难。</div>
<div></div>
<div></div>
<div><b>执行</b></div>
<div># ./a</div>
<div>Segmentation fault</div>
<div></div>
<div><b>调试C程序</b></div>
<div>调试c程序和core dump文件，最常用的工作就是gdb了</div>
<div>安装GDB命令</div>
<div># yum whatprovides */gdb</div>
<div>gdb-7.2-83.el6.x86_64 : A GNU source-level debugger for C, C++, Java and other languages</div>
<div>Repo        : base</div>
<div>Matched from:</div>
<div>Filename    : /usr/share/gdb/python/gdb</div>
<div>Filename    : /usr/share/gdb</div>
<div>Filename    : /usr/bin/gdb</div>
<div>#  yum install gdb-7.2-83.el6.x86_64</div>
<div></div>
<div><b>gdb工具的使用</b></div>
<div><b>调试程序</b></div>
<div># gdb a   <b>&lt;---------- 启动GDB</b></div>
<div>GNU gdb (GDB) Red Hat Enterprise Linux (7.2-83.el6)</div>
<div>Copyright (C) 2010 Free Software Foundation, Inc.</div>
<div>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</div>
<div>This is free software: you are free to change and redistribute it.</div>
<div>There is NO WARRANTY, to the extent permitted by law.  Type "show copying"</div>
<div>and "show warranty" for details.</div>
<div>This GDB was configured as "x86_64-redhat-linux-gnu".</div>
<div>For bug reporting instructions, please see:</div>
<div>&lt;http://www.gnu.org/software/gdb/bugs/&gt;...</div>
<div>Reading symbols from /home/vaster/a...done.</div>
<div>(gdb) l   <b>&lt;-------------------- l命令相当于list，从第一行开始例出原码。</b></div>
<div>1       #include "stdio.h"</div>
<div>2       #include "stdlib.h"</div>
<div>3       int main(){</div>
<div>4       int* stack_of = malloc(sizeof(int)*100000000);</div>
<div>5       int b;</div>
<div>6       int* a;</div>
<div>7       *a=b;</div>
<div>8       }</div>
<div>(gdb) break 6   &lt;-------------------- 设置断点，在源程序第6行处</div>
<div>Breakpoint 1 at 0x4004da: file a.c, line 6.</div>
<div>(gdb) info break    &lt;-------------------- 查看断点信息。</div>
<div>Num     Type           Disp Enb Address            What</div>
<div>1       breakpoint     keep y   0x00000000004004da in main at a.c:6</div>
<div>(gdb) r   &lt;--------------------- 运行程序，run命令简写</div>
<div>Starting program: /home/vaster/a</div>
<div>warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000</div>
<div>Breakpoint 1, main () at a.c:7      &lt;---------- 在断点处停住</div>
<div>7       *a=b;</div>
<div>Missing separate debuginfos, use: debuginfo-install glibc-2.12-1.132.el6_5.4.x86_64</div>
<div>(gdb) n    &lt;--------------------- 单条语句执行，next命令简写</div>
<div>Program received signal SIGSEGV, Segmentation fault.</div>
<div>0x00000000004004e1 in main () at a.c:7</div>
<div>7       *a=b;</div>
<div>(gdb) c    &lt;--------------------- 继续运行程序，continue命令简写</div>
<div>Continuing.</div>
<div>Program terminated with signal SIGSEGV, Segmentation fault.</div>
<div>The program no longer exists.</div>
<div>(gdb) bt   &lt;--------------------- 查看函数堆栈。</div>
<div>No stack.</div>
<div>(gdb) q     &lt;--------------------- 退出gdb。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1047</wp:post_id>
		<wp:post_date><![CDATA[2015-09-08 00:26:11]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-07 16:26:11]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux-%e8%bf%9b%e9%98%b6%e3%80%91core-dump%e6%96%87%e4%bb%b6%e7%9a%84%e5%bd%a2%e6%88%90%e5%92%8c%e8%ae%be%e7%bd%ae]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="core-dump"><![CDATA[core dump]]></category>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[165]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【项目-日志】日志备份需求变更实践</title>
		<link>http://www.itopers.com/?p=1065</link>
		<pubDate>Tue, 15 Sep 2015 06:39:37 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1065</guid>
		<description></description>
		<content:encoded><![CDATA[<div>     对一个项目来说，日志是相当重要的内容，通过它，我们可以分析项目的各项运营数据及项目运行的稳定性，对后续项目的定位和推进提供一个重要指标。</div>
<div></div>
<div>     在做好日志备份后，随着项目的进展，日志备份的需求很可能发生变化，根据目前负责的业务情况，常见的变更及处理方法有几下几方面。</div>
<div></div>
<div>1. 需要备份的服务器列表发生变化？</div>
<div>     由运维同学维护一张固定的列表，脚本中直接从列表中获取服务器信息，当列表发生变化时，不需要做任何修改。这样做有就可有效避免由于添加/删除服务器造成的备份漏掉和误报的可能性</div>
<div></div>
<div>2. 需要备份的日志类型/保留策略 发生变化？</div>
<div>     可维护一张日志类型和保留策略的列表，当日志类型有增减或保留时间延长或缩短，都直接修改该列表即可，不修改脚本能最大限度减少误操作的可能性。</div>
<div></div>
<div>注意：每天的日志备份情况都通过邮件或其他方式将结果进行汇总，如备份了哪些机器，备份情况（数量，成功/失败），备份的类型，占用空间大小等，供相关人员查看，一方面便于自己了解备份情况，另一方面运营人员也可以监督备份情况，有问题及时解决。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1065</wp:post_id>
		<wp:post_date><![CDATA[2015-09-15 14:39:37]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-15 06:39:37]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e9%a1%b9%e7%9b%ae-%e6%97%a5%e5%bf%97%e3%80%91%e6%97%a5%e5%bf%97%e5%a4%87%e4%bb%bd%e9%9c%80%e6%b1%82%e5%8f%98%e6%9b%b4%e5%ae%9e%e8%b7%b5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e5%a4%87%e4%bb%bd"><![CDATA[备份]]></category>
		<category domain="category" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<category domain="post_tag" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[144]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>mac虚拟机VirtualBox中配置host-only方式</title>
		<link>http://www.itopers.com/?p=1072</link>
		<pubDate>Thu, 08 Oct 2015 13:56:36 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1072</guid>
		<description></description>
		<content:encoded><![CDATA[新工作发了个mac，想安装个虚拟机，当然最好的免费虚拟机VirtualBox了，安装完后，发现无法通过host-only进行网络设置。为什么要用host-only呢？原因是需要从物理机ssh方式管理虚拟机操作系统，这样，多个虚拟机用CRT管理起来比较方便。

进入VirtualBox中的设置--网络，选择『仅主机（host-only）适配器』，但是界面名称为未指定（如图），无法设置，需要在VirtualBox的偏好设置中进行添加host-only配置，就像windows vnet1和8一样。

<a href="http://www.itopers.com/wp-content/uploads/2015/10/FB4FCF.png"><img class="alignnone  wp-image-1073" src="http://www.itopers.com/wp-content/uploads/2015/10/FB4FCF.png" alt="FB4FCF" width="508" height="427" /></a>

打开VirtualBox，然后进入偏好设置。

<a href="http://www.itopers.com/wp-content/uploads/2015/10/28AF13EE-5B16-4313-88DE-F6E256F6E419.png"><img class="alignnone size-full wp-image-1074" src="http://www.itopers.com/wp-content/uploads/2015/10/28AF13EE-5B16-4313-88DE-F6E256F6E419.png" alt="28AF13EE-5B16-4313-88DE-F6E256F6E419" width="494" height="474" /></a>

然后进行添加host-only网卡，进行ip地址配置

<a href="http://www.itopers.com/wp-content/uploads/2015/10/C3EFBEB6-9840-4481-A7F3-F7A64F793669.png"><img class="alignnone  wp-image-1076" src="http://www.itopers.com/wp-content/uploads/2015/10/C3EFBEB6-9840-4481-A7F3-F7A64F793669.png" alt="C3EFBEB6-9840-4481-A7F3-F7A64F793669" width="521" height="350" /></a>

点击+号图标进行添加，点击工具图标进行ip地址设置。如果添加提示如下错误：

VBoxNetAdpCtl:Error while adding new interface:failed to open /dev/vboxnetctl:no such file or directory

<a href="http://www.itopers.com/wp-content/uploads/2015/10/940BDA90-9E51-4152-937B-EF25EC29B846.png"><img class="alignnone  wp-image-1075" src="http://www.itopers.com/wp-content/uploads/2015/10/940BDA90-9E51-4152-937B-EF25EC29B846.png" alt="940BDA90-9E51-4152-937B-EF25EC29B846" width="571" height="168" /></a>

提示这个说明/dev/vboxnetctl网卡设备没有创建成功，重新启动下如下就ok了。

sudo /Library/Application\ Support/VirtualBox/LaunchDaemons/VirtualBoxStartup.sh restart

&nbsp;

关于如何进行host-only配置，比较简单，将物理机上的host-only配置一个ip地址，然后在虚拟机内的操作系统内配置同网段ip地址，网关设置为物理机上host-only配置的ip地址。

如果是windows配置vmware也一样，只是物理机上有多个host-only网卡，vnet1和vnet8，其实都可以，你还可创建其它名字的网卡，需要与哪个创建关系，在虚拟要中选择哪个就行，vnet1或者vnet8或者其它（前提是host-only）。

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1072</wp:post_id>
		<wp:post_date><![CDATA[2015-10-08 21:56:36]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-08 13:56:36]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[mac%e8%99%9a%e6%8b%9f%e6%9c%bavirtualbox%e4%b8%ad%e9%85%8d%e7%bd%aehost-only%e6%96%b9%e5%bc%8f]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="host-only"><![CDATA[host-only]]></category>
		<category domain="post_tag" nicename="mac"><![CDATA[mac]]></category>
		<category domain="post_tag" nicename="virtualbox"><![CDATA[VirtualBox]]></category>
		<category domain="category" nicename="%e8%99%9a%e6%8b%9f%e5%8c%96"><![CDATA[虚拟化]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[223]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【linux】source命令有个&quot;坑&quot;</title>
		<link>http://www.itopers.com/?p=1082</link>
		<pubDate>Thu, 15 Oct 2015 07:32:41 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1082</guid>
		<description></description>
		<content:encoded><![CDATA[source命令有个"坑"，这个坑是带引号的，原因是我不知道source还有这么个点。什么点？就是source filename时，查找filename的问题。

看如下例子：
<pre class="lang:sh decode:true ">[root@localhost osc]# sh a.sh 
a.sh: line 4: source: 1.sh: file not found
[root@localhost osc]# cat a.sh 
#!/bin/bash
cd /data/osc/bin/
if [ -f 1.sh ];then
source 1.sh
fi</pre>
哎，为什么1.sh文件not found?不是前面if判断都没有问题啊。

刚开始，还以为权限问题，一阵给权限，但结果还是一样。还把PATH变量打印出来了。

于是，把cd给去了，直接source ，结果ok了。到这里的时候，刚开始还无语，难道是cd后环境变量有问题？一值在猜.....
<pre class="lang:sh decode:true ">[root@localhost osc]# sh a.sh     
aaa
[root@localhost osc]# cat a.sh 
#!/bin/bash
#cd /data/osc/bin/
if [ -f bin/1.sh ];then
source bin/1.sh
fi</pre>
把前后环境变量输出看了，一样啊。这时把注意力放到了source这个命令上，准备用strace source 1.sh来看看，但找不到source命令。没有办法看了...

还是看看手册吧，man source ,果然，找到原因了。就是source时找filename的问题。

这个source 命令找filename是在当前的shell环境下找的，如果没有反斜线，就在path中找，如果没有就没有。
<pre class="lang:vim decode:true ">source filename [arguments]
              Read  and  execute commands from filename in the current shell environment and return the exit status of the last command exe-
              cuted from filename.  If filename does not contain a slash, file names in PATH are used to find the directory containing file-
              name.   The  file  searched  for  in  PATH  need  not be executable.  When bash is not in posix mode, the current directory is
              searched if no file is found in PATH.  If the sourcepath option to the shopt builtin command is turned off, the  PATH  is  not
              searched.   If  any  arguments  are  supplied, they become the positional parameters when filename is executed.  Otherwise the
              positional parameters are unchanged.  The return status is the status of the last command exited within the script  (0  if  no
              commands are executed), and false if filename is not found or cannot be read.</pre>
如下方式都可以：

1、将脚本所在的目录加到PATH中

2、加上相对路径或绝对路径

3、就算是当前目录也得加./]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1082</wp:post_id>
		<wp:post_date><![CDATA[2015-10-15 15:32:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-15 07:32:41]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91source%e5%91%bd%e4%bb%a4%e6%9c%89%e4%b8%aa%e5%9d%91]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="category" nicename="shell"><![CDATA[Shell]]></category>
		<category domain="post_tag" nicename="source"><![CDATA[source]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[136]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>29104</wp:comment_id>
			<wp:comment_author><![CDATA[vaster]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[linuxzhen520@163.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[180.149.148.123]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2015-10-16 14:25:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2015-10-16 06:25:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[点个赞，学习一下]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1444976749.8686630725860595703125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1445570814.581612110137939453125;s:5:"event";s:15:"status-approved";s:4:"user";s:6:"vaster";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>【码农】Coding时空格TAB混用的后果</title>
		<link>http://www.itopers.com/?p=1088</link>
		<pubDate>Fri, 23 Oct 2015 06:59:33 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1088</guid>
		<description></description>
		<content:encoded><![CDATA[前几天，在改一个其他同学写的python脚本，运行的时候，老是报“IndentationError: unexpected indent”，这表示脚本有对齐方面的问题。

我VI的时候看，明明就是对齐的呀！~但还是报错！

然后我cat -A 一看，空格和TAB混用了，赶紧将所有TAB都转成空格，然后再编辑就没啥问题了。

（这里也可以将N个空格转成TAB哈，具体几个就看编辑器的设置了）

今天又遇一例，cat看到的结果是这样的：

<img class="alignnone size-full wp-image-1090" src="http://www.itopers.com/wp-content/uploads/2015/10/空格Tab混用1.jpg" alt="空格Tab混用1" width="1008" height="164" />

vi 看到的结果是这样的：

<a href="http://www.itopers.com/wp-content/uploads/2015/10/空格Tab混用.jpg"><img class="alignnone size-full wp-image-1089" src="http://www.itopers.com/wp-content/uploads/2015/10/空格Tab混用.jpg" alt="空格Tab混用" width="1129" height="163" /></a>

&nbsp;

这个时候，运行脚本是没有问题的，不报错，cat的时候，显示对齐也OK，但是vi的时候，全是乱的。

在此再提醒一下：

如果你对注意缩进问题，如果你用像Python这种对缩进有严格要求的语言，要么全用TAB，要么全用空格

如果是团队协作开发，一定要事先规定好是统一用空格还是统一用TAB（不遵守最后肯定被打）

&nbsp;

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1088</wp:post_id>
		<wp:post_date><![CDATA[2015-10-23 14:59:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-23 06:59:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e7%a0%81%e5%86%9c%e3%80%91coding%e6%97%b6%e7%a9%ba%e6%a0%bctab%e6%b7%b7%e7%94%a8%e7%9a%84%e5%90%8e%e6%9e%9c]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="%e5%b7%a5%e4%bd%9c%e6%80%bb%e7%bb%93"><![CDATA[工作总结]]></category>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<category domain="post_tag" nicename="%e7%bc%a9%e8%bf%9b"><![CDATA[缩进]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[114]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Python-基础】基本语法</title>
		<link>http://www.itopers.com/?p=1093</link>
		<pubDate>Mon, 12 Oct 2015 15:05:43 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1093</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>#   注释</h3>
<h3>\   续行</h3>
<h3>： 多个语句构成代码组</h3>
代码组由不同的缩进分隔（用空格/Tab缩进，注意避免空格和Tab混用）
<h3>;   同一行书写多个语句</h3>
ex:import sys;sys.stdout.write('hello world \n')
<h3>=   变量赋值</h3>
链式赋值：y=x=x+1

增量赋值：x+=1,x**=2,x%=2
<div>多元赋值：x,y,z=1,2,'a strubg'</div>
<div></div>
<div>
<div>在python中，对象赋值是通过引用传递的。如何理解，对象是通过引用传递的。</div>
<div>
<pre class="lang:vim decode:true ">&gt;&gt;&gt; a=[1,2,3]
&gt;&gt;&gt; b=a
&gt;&gt;&gt; id(a)
40243400L
&gt;&gt;&gt; id(b)
40243400L
&gt;&gt;&gt; b=[1,2,3]
&gt;&gt;&gt; a
[1, 2, 3]
&gt;&gt;&gt; b
[1, 2, 3]
&gt;&gt;&gt; id(a)
40243400L
&gt;&gt;&gt; id(b)
40106824L</pre>
通过实验发现，变量赋值后，则他们的地址也是相同的。当一个变量的值重新赋值时，它的地址也跟着变化了。（小数据除外）

</div>
</div>
<div>
<div>注意:</div>
<div>python的赋值语句不会返回值。如：y=(x=x+1)是错误的</div>
<div>链式赋值没有问题。如：y=x=x+1</div>
</div>
<div></div>
<h3><strong>Python关键字</strong></h3>
<div>and break class continue def del elif else except exec finally for from global if import in is lambda not or pass print raise return try while with yield none</div>
<div></div>
<div>
<h3><b>标识符</b></h3>
<div>由字母数字下划线组成；</div>
<div>严格区分大小写；</div>
<div>第一个字符必须是字母或下划线；</div>
<div>最好避免用下划线作为变量名的开始，因为下划线对解释器有特殊的意义，而且是内建标识符所使用的符号，建议避免用下划线作为变量名的开始。一般来讲，变量名_xxx被看作是“私有的”，在模块或类外不可以使用。<b>当变量是私有的时候，用_xxx 来表示变量是很好的习惯。</b>变量名__xxx__对 Python 来说有特殊含义，对于普通的变量应当避免这种命名风格。</div>
</div>
<div></div>
<div>
<div><b>专用下划线标识符</b></div>
<div>_xxx  不用'from modele import *'</div>
<div>__xxx___ 系统定义名字</div>
<div>__xxx 类中的私有变量名</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1093</wp:post_id>
		<wp:post_date><![CDATA[2015-10-12 23:05:43]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-10-12 15:05:43]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90python-%e5%9f%ba%e7%a1%80%e3%80%91%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="%e5%9f%ba%e6%9c%ac%e8%af%ad%e6%b3%95"><![CDATA[基本语法]]></category>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[55]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Python-基础】详解Python中的下划线</title>
		<link>http://www.itopers.com/?p=1096</link>
		<pubDate>Thu, 12 Nov 2015 14:26:59 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1096</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

本文将讨论Python中下划线（_）字符的使用方法。我们将会看到，正如Python中的很多事情，下划线的不同用法大多数（并非所有）只是常用惯例而已。
<h3>单下划线（_）</h3>
通常情况下，会在以下3种场景中使用：

1、<strong>在解释器中</strong>：在这种情况下，“_”代表交互式解释器会话中上一条执行的语句的结果。这种用法首先被标准CPython解释器采用，然后其他类型的解释器也先后采用。
<div title="切换是否显示行编号">
<div>
<pre>&gt;&gt;&gt; _ Traceback (most recent call last):
File "&lt;stdin&gt;", line 1, in &lt;module&gt;
NameError: name '_' is not defined
&gt;&gt;&gt; 42
&gt;&gt;&gt; _
42
&gt;&gt;&gt; 'alright!' if _ else ':('
'alright!'
&gt;&gt;&gt; _
'alright!'
</pre>
</div>
</div>
2、<strong>作为一个名称</strong>：这与上面一点稍微有些联系，此时“_”作为临时性的名称使用。这样，当其他人阅读你的代码时将会知道，你分配了一个特定的名称，但是并不会在后面再次用到该名称。例如，下面的例子中，你可能对循环计数中的实际值并不感兴趣，此时就可以使用“_”。
<div title="切换是否显示行编号">
<div>
<pre class="">n = 42
for _ in range(n):
    do_something()
</pre>
3、<strong>国际化</strong>：也许你也曾看到”_“会被作为一个函数来使用。这种情况下，它通常用于实现国际化和本地化字符串之间翻译查找的函数名称，这似乎源自并遵循相应的C约定。例如，在<a href="https://docs.djangoproject.com/en/dev/topics/i18n/translation/" target="_blank">Django文档“转换”章节</a>中，你将能看到如下代码：

</div>
</div>
<div title="切换是否显示行编号">
<div>
<pre class="">from django.utils.translation import ugettext as _
from django.http import HttpResponse
def my_view(request):
output = _("Welcome to my site.")
return HttpResponse(output)
</pre>
</div>
</div>
可以发现，场景二和场景三中的使用方法可能会相互冲突，所以我们需要避免在使用“_”作为国际化查找转换功能的代码块中同时使用“_”作为临时名称。

&nbsp;
<h3>名称前的单下划线（如：_shahriar）</h3>
程序员使用名称前的单下划线，用于指定该名称属性为“私有”。这有点类似于惯例，为了使其他人（或你自己）使用这些代码时将会知道以“_”开头的名称只供内部使用。正如Python文档中所述：

以下划线“_”为前缀的名称（如_spam）应该被视为API中非公开的部分（不管是函数、方法还是数据成员）。此时，应该将它们看作是一种实现细节，在修改它们时无需对外部通知。

正如上面所说，这确实类似一种惯例，因为它对解释器来说确实有一定的意义，如果你写了代码“from &lt;模块/包名&gt; import *”，那么以“_”开头的名称都不会被导入，除非模块或包中的“__all__”列表显式地包含了它们。了解更多请查看“<a href="http://shahriar.svbtle.com/importing-star-in-python" target="_blank">Importing * in Python</a>”。

Importing * in Python主要讲的是，在py文件中，指定好__all__的值，如： <span class="pln">__all__ </span><span class="pun">=</span> <span class="pun">[</span><span class="str">'_private_variable'</span><span class="pun">,</span> <span class="str">'PublicClass'</span><span class="pun">]，不管方法是不是用_开头，使用import *导入时，都将以__all__指定的内容为准</span>

&nbsp;
<h3>名称前的双下划线（如：__shahriar）</h3>
名称（具体为一个方法名）前双下划线（__）的用法并不是一种惯例，对解释器来说它有特定的意义。Python中的这种用法是为了避免与子类定义的名称冲突。Python文档指出，“__spam”这种形式（至少两个前导下划线，最多一个后续下划线）的任何标识符将会被“_classname__spam”这种形式原文取代，在这里“classname”是去掉前导下划线的当前类名。例如下面的例子：
<div title="切换是否显示行编号">
<div>
<pre>&gt;&gt;&gt; class A(object):
... def _internal_use(self):
... pass
... def __method_name(self):
... pass
...
&gt;&gt;&gt; dir(A())
['_A__method_name', ..., '_internal_use']
</pre>
正如所预料的，“_internal_use”并未改变，而“__method_name”却被变成了“_ClassName__method_name”。此时，如果你创建A的一个子类B，那么你将不能轻易地覆写A中的方法“__method_name”。

</div>
</div>
<div title="切换是否显示行编号">
<div>
<pre>&gt;&gt;&gt; class B(A):
... def __method_name(self):
... pass
...
&gt;&gt;&gt; dir(B())
['_A__method_name', '_B__method_name', ..., '_internal_use']
</pre>
这里的功能几乎和Java中的final方法和C++类中标准方法（非虚方法）一样。

&nbsp;

</div>
</div>
<h3>名称前后的双下划线（如：__init__）</h3>
这种用法表示Python中特殊的方法名。其实，这只是一种惯例，对Python系统来说，这将确保不会与用户自定义的名称冲突。通常，你将会覆写这些方法，并在里面实现你所需要的功能，以便Python调用它们。例如，当定义一个类时，你经常会覆写“__init__”方法。

虽然你也可以编写自己的特殊方法名，但不要这样做。
<div title="切换是否显示行编号">
<div>
<pre class="">&gt;&gt;&gt; class C(object):
... def __mine__(self):
... pass
...
&gt;&gt;&gt; dir(C)
... [..., '__mine__', ...]
</pre>
很容易摆脱这种类型的命名，而只让Python内部定义的特殊名称遵循这种约定。

</div>
</div>
</div>
<div></div>
<h3>总结一下：</h3>
<div>_ 表示上一次操作的结果；作为一个临时变量；作为国际化时的一种用法
_xxx   私有变量名，不能用’from module import *’导入，除非__all__列表中有指明显示 （一种习惯用法）
__xxx  类中的私有变量名，以防止方法/对象被重写，在使用这类方法/对象时需要注意名称（对解释器有特殊意义）
__xxx__  系统定义名字，以避免跟用户定义的变量名冲突（用户可重写）（一种习惯用法）</div>
<div></div>
<div></div>
<div>英文出处：http://shahriar.svbtle.com/underscores-in-python
译文地址：http://python.jobbole.com/81129/</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1096</wp:post_id>
		<wp:post_date><![CDATA[2015-11-12 22:26:59]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-12 14:26:59]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e8%bd%ac%e3%80%91%e3%80%90python-%e5%9f%ba%e7%a1%80%e3%80%91%e8%af%a6%e8%a7%a3python%e4%b8%ad%e7%9a%84%e4%b8%8b%e5%88%92%e7%ba%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="%e4%b8%8b%e5%88%92%e7%ba%bf"><![CDATA[下划线]]></category>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[65]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux-vim】vim中粘贴数据的时候如何取消自动缩进</title>
		<link>http://www.itopers.com/?p=1112</link>
		<pubDate>Thu, 12 Nov 2015 15:13:45 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1112</guid>
		<description></description>
		<content:encoded><![CDATA[<div>

vim中在粘贴剪贴板中的数据时会自动增加缩进，这对python这种对缩进要求严格的语言来说简直是恶梦。如何让它不缩进,保持原格式呢？答案就是paste模式。

在粘贴数据之前，输入下面指定开启paste模式
<pre class="">:set paste
</pre>
粘贴完毕后，输入下面指定关闭paste模式
<pre class="">:set nopaste
</pre>
每次都需要输入是不是太麻烦，那么在.vimrc中加入下面内容吧：
<pre class="">"Paste toggle - when pasting something in, don't indent.
set pastetoggle=&lt;F3&gt;</pre>
</div>
<div>这样就可以用F3来切换了。</div>
<div></div>
<div>当然，如果我们希望默认情况下粘贴就不缩进可以在.vimrc中加入以下内容：</div>
<div>
<pre class="lang:vim decode:true">set noautoindent</pre>
&nbsp;

</div>
<div></div>
<div></div>
<div></div>
<div></div>
<div></div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1112</wp:post_id>
		<wp:post_date><![CDATA[2015-11-12 23:13:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-12 15:13:45]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux%e3%80%91vim%e4%b8%ad%e7%b2%98%e8%b4%b4%e6%95%b0%e6%8d%ae%e7%9a%84%e6%97%b6%e5%80%99%e5%a6%82%e4%bd%95%e5%8f%96%e6%b6%88%e8%87%aa%e5%8a%a8%e7%bc%a9%e8%bf%9b]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e5%9f%ba%e7%a1%80"><![CDATA[Linux基础]]></category>
		<category domain="post_tag" nicename="vim"><![CDATA[vim]]></category>
		<category domain="post_tag" nicename="%e7%b2%98%e8%b4%b4"><![CDATA[粘贴]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[67]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux-vim】给Python脚本自动套用模板</title>
		<link>http://www.itopers.com/?p=1122</link>
		<pubDate>Fri, 13 Nov 2015 15:35:22 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1122</guid>
		<description></description>
		<content:encoded><![CDATA[大家每次写python脚本之前第一件事就是要加上#!/usr/bin/env python之类的东西觉得麻烦吗？下面就给大家介绍一下方便的办法：通过vim编辑器来调用函数，判断之后，实现自动填充。

下面这段代码的作用就是，当打开一个*.py的文件时，判断第一行是否为#!/，如果有这一行的话，就不修改了，如果没有这一行，就视它为新文件，则添加下面这段：
<pre class="lang:vim decode:true">#!/usr/bin/env python
#-*- coding:utf-8 -*-
… ….</pre>
这个文件在你要执行的用户的家目录下，如果没有这个文件可以创建它，有的话，直接在后面加上这段代码就可以了。

注：如果要注释某行的话，在行前面加一个双引号（“）就可以了。

setline后面接的数字是第N行
<pre class="lang:vim decode:true ">[root@localhost ~]# vim .vimrc
function InsertPythonHeader()
    let l1 = getline(1)
    if  match('\#!/', l1) == 0
        exec 1
        normal O
        call setline(1,'#!/usr/bin/env python')
        call setline(2,'#-*- coding:utf-8 -*-')
        call setline(3,'''''''')
        call setline(4,'##############################')
        call setline(5,'@filename:      ')
        call setline(6,'@author:        ')
        call setline(7,'@date:          ')
        call setline(8,'@function:      ')
        call setline(9,'##############################')
        call setline(10,'''''''')
    endif
endfunction
au FileType python call InsertPythonHeader()</pre>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1122</wp:post_id>
		<wp:post_date><![CDATA[2015-11-13 23:35:22]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-13 15:35:22]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux-vim%e3%80%91%e7%bb%99python%e8%84%9a%e6%9c%ac%e8%87%aa%e5%8a%a8%e5%a5%97%e7%94%a8%e6%a8%a1%e6%9d%bf]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="vim"><![CDATA[vim]]></category>
		<category domain="post_tag" nicename="%e5%b0%8f%e6%8a%80%e5%b7%a7"><![CDATA[小技巧]]></category>
		<category domain="category" nicename="%e6%93%8d%e4%bd%9c%e7%b3%bb%e7%bb%9f"><![CDATA[操作系统]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[91]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【学习笔记】Python性能鸡汤</title>
		<link>http://www.itopers.com/?p=1126</link>
		<pubDate>Thu, 19 Nov 2015 14:28:38 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1126</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><b>第一部分</b></h3>
<div>     阅读Zen of Python,在Python 解析器中输入import this. 一个犀利的Python 新手可能会注意到"解析"一词, 认为Python 不过是另一门脚本语言. "它肯定很慢!"</div>
<div>     毫无疑问:Python 程序没有编译型语言高效快速. 甚至Python 拥护者们会告诉你Python 不适合这些领域. 然而,YouTube 已用Python 服务于每小时4 千万视频的请求. 你所要做的就是编写高效的代码和需要时使用外部实现(C/C++)代码. 这里有一些建议,可以帮助你成为一个更好的Python 开发者:</div>
<div></div>
<div><b>1. 使用内建函数:</b></div>
<div>     你可以用Python 写出高效的代码,但很难击败内建函数. 经查证. 他们非常快速. <img src="file:///C:/Users/beebol/AppData/Local/Temp/enhtmlclip/Image(1).png" alt="" /></div>
<div>    <a href="http://www.itopers.com/wp-content/uploads/2015/11/1.png"><img class="alignnone size-full wp-image-1127" src="http://www.itopers.com/wp-content/uploads/2015/11/1.png" alt="1" width="282" height="160" /></a></div>
<div></div>
<div></div>
<div><b>2.使用 join()连接字符串.</b></div>
<div>     你可以使用"+" 来连接字符串. 但<span style="color: #800080;">由于string 在Python 中是不可变的,每一个"+"操作都会创建一个新的字符串并复制旧内容.</span> 常见用法是使用Python 的数组模块单个的修改字符;当完成的时候,使用join() 函数创建最终字符串.</div>
<div>
<pre class="lang:vim decode:true">&gt;&gt;&gt; #This is good to glue a large number of strings
&gt;&gt;&gt; for chunk in input():
&gt;&gt;&gt;     my_string.join(chunk)</pre>
</div>
<div><b>3. 使用 Python多重赋值，交换变量</b></div>
<div>     这在Python 中即优雅又快速:</div>
<div>
<pre class="lang:vim decode:true">&gt;&gt;&gt; x, y = y, x</pre>
</div>
<div>     这样很慢:</div>
<div>
<pre class="lang:vim decode:true">&gt;&gt;&gt; temp = x
&gt;&gt;&gt; x = y
&gt;&gt;&gt; y = temp</pre>
</div>
<div><b>4. 尽量使用局部变量</b></div>
<div>     Python 检索局部变量比检索全局变量快. 这意味着,避免"global" 关键字.</div>
<div>     变量的查找顺序是：（局部变量-&gt;全局变量-&gt;内建名字空间）</div>
<div></div>
<div><b>5. 尽量使用 "in"</b></div>
<div>     使用"in" 关键字. 简洁而快速.</div>
<div>
<pre class="lang:vim decode:true">&gt;&gt;&gt; for key in sequence:
&gt;&gt;&gt;     print “found”</pre>
</div>
<div><b>6. 使用延迟加载加速</b></div>
<div>     將"import" 声明移入函数中,仅在需要的时候导入. 换句话说,如果某些模块不需马上使用,稍后导入他们. 例如,你不必在一开使就导入大量模块而加速程序启动. 该技术不能提高整体性能. 但它可以帮助你更均衡的分配模块的加载时间.</div>
<div></div>
<div><b>7. 为无限循环使用 "while 1"</b></div>
<div>     有时候在程序中你需一个无限循环.(例如一个监听套接字的实例) 尽管"while true" 能完成同样的事, 但"while 1" 是单步运算. 这招能提高你的Python 性能.</div>
<div>
<pre class="lang:vim decode:true">&gt;&gt;&gt; while 1:
&gt;&gt;&gt;     #do stuff, faster with while 1
&gt;&gt;&gt; while True:
&gt;&gt;&gt;     # do stuff, slower with wile True</pre>
</div>
<div><b>8. 使用 list comprehension（列表推导式）</b></div>
<div>     从Python 2.0 开始,你可以使用list comprehension 取代大量的"for" 和"while" 块.使用List comprehension 通常更快，Python 解析器能在循环中发现它是一个可预测的模式而被优化.额外好处是，list comprehension 更具可读性（函数式编程），并在大多数情况下，它可以节省一个额外的计数变量。例如，让我们计算1 到10 之间的偶数个数：</div>
<div>
<pre class="lang:vim decode:true">&gt;&gt;&gt; # the good way to iterate a range
&gt;&gt;&gt; evens = [ i for i in range(10) if i%2 == 0]
&gt;&gt;&gt; [0, 2, 4, 6, 8]
&gt;&gt;&gt; # the following is not so Pythonic
&gt;&gt;&gt; i = 0
&gt;&gt;&gt; evens = []
&gt;&gt;&gt; while i &lt; 10:
&gt;&gt;&gt;     if i %2 == 0: evens.append(i)
&gt;&gt;&gt;     i += 1
&gt;&gt;&gt; [0, 2, 4, 6, 8]</pre>
</div>
<div><b>9. 使用 xrange()处理长序列：</b></div>
<div>     这样可为你节省大量的系统内存，因为xrange()在序列中每次调用只产生一个整数元素（迭代器）。而相反range()，它將直接给你一个完整的元素列表，用于循环时会有不必要的开销。</div>
<div></div>
<div><b>10. 使用 Python generator（生成器推导式）：</b></div>
<div>     这也可以节省内存和提高性能。例如一个视频流，你可以一个一个字节块的发送，而不是整个流。例如，</div>
<div>
<pre class="lang:vim decode:true">&gt;&gt;&gt; chunk = ( 1000 * i for i in xrange(1000))
&gt;&gt;&gt; chunk
&lt;generator object &lt;genexpr&gt; at 0x7f65d90dcaa0&gt;
&gt;&gt;&gt; chunk.next()
0
&gt;&gt;&gt; chunk.next()
1000
&gt;&gt;&gt; chunk.next()
2000</pre>
</div>
<div><b>11. 了解 itertools模块：</b></div>
<div>     该模块对迭代和组合是非常有效的。让我们生成一个列表[1，2，3]的所有排列组合,仅需三行Python 代码：</div>
<div>
<pre class="lang:vim decode:true">&gt;&gt;&gt; import itertools
&gt;&gt;&gt; iter = itertools.permutations([1,2,3])
&gt;&gt;&gt; list(iter)
[(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]</pre>
</div>
<div><b>12. 学习 bisect模块保持列表排序：</b></div>
<div>     这是一个免费的二分查找实现和快速插入有序序列的工具。也就是说，你可以使用：</div>
<div>
<pre class="lang:vim decode:true ">&gt;&gt;&gt; import bisect
&gt;&gt;&gt; a=[1,2,3,4,5,7,0]
&gt;&gt;&gt; bisect.insort(a,6)
&gt;&gt;&gt; a
[1, 2, 3, 4, 5, 6, 7, 0]</pre>
你已將一个元素插入列表中, 而你不需要再次调用sort() 来保持容器的排序, 因为这在长序列中这会非常昂贵.

</div>
<div></div>
<div><b>13. 理解 Python列表，实际上是一个数组：</b></div>
<div>     Python 中的列表实现并不是以人们通常谈论的计算机科学中的普通单链表实现的。</div>
<div>     Python 中的列表是一个数组。也就是说，你可以以常量时间O(1) 检索列表的某个元素，而不需要从头开始搜索。这有什么意义呢？ Python 开发人员使用列表对象insert（）时, 需三思.</div>
<div>      例如：&gt;&gt;&gt; list.insert（0，item）</div>
<div>     <span style="color: #800080;">在列表的前面插入一个元素效率不高, 因为列表中的所有后续下标不得不改变.</span> 然而，您可以使用list.append()在列表的尾端有效添加元素. 挑先deque，如果你想快速的在两插入或时。它是快速的，因为在Python 中的deque 用双链表实现。不再多说。:)</div>
<div></div>
<div><b>14. 使用 dict 和 set 测试成员：</b></div>
<div>    检查一个元素是在dicitonary 或set 是否存在这在Python 中非常快的。这是因为dict和set 使用哈希表来实现。查找效率可以达到O(1)。因此，如果您需要经常检查成员，使用set 或dict 做为你的容器.</div>
<div>
<pre class="lang:vim decode:true">&gt;&gt;&gt; mylist = ['a', 'b', 'c'] #Slower, check membership with list:
&gt;&gt;&gt; ‘c’ in mylist
&gt;&gt;&gt; True
&gt;&gt;&gt; myset = set(['a', 'b', 'c']) # Faster, check membership with set:
&gt;&gt;&gt; ‘c’ in myset:
&gt;&gt;&gt; True</pre>
</div>
<div><b>15. 使用 Schwartzian Transform 的 sort():</b></div>
<div>     原生的list.sort（）函数是非常快的。Python 会按自然顺序排序列表。有时，你需要非自然顺序的排序。例如，你要根据服务器位置排序的IP 地址。Python 支持自定义的比较，你可以使用list.sort（CMP（）），这会比list.sort（）慢，因为增加了函数调用的开销。如果性能有问题，你可以申请Guttman-Rosler Transform,基于Schwartzian Transform. 它只对实际的要用的算法有兴趣，它的简要工作原理是，你可以变换列表，并调用Python 内置list.sort（） - &gt; 更快，而无需使用list.sort（CMP（） ）-&gt;慢。</div>
<div></div>
<div><b>16. Python装饰器缓存结果：</b></div>
<div>“@”符号是Python 的装饰语法。它不只用于追查，锁或日志。你可以装饰一个Python函数，记住调用结果供后续使用。这种技术被称为memoization 的。下面是一个例子：</div>
<div>
<pre class="lang:vim decode:true">&gt;&gt;&gt; from functools import wraps
&gt;&gt;&gt; def memo(f):
&gt;&gt;&gt;     cache = { }
&gt;&gt;&gt;     @wraps(f)
&gt;&gt;&gt;     def wrap(*arg):
&gt;&gt;&gt;         if arg not in cache: cache['arg'] = f(*arg)
&gt;&gt;&gt;         return cache['arg']
&gt;&gt;&gt;     return wrap</pre>
我们也可以对Fibonacci 函数使用装饰器:

</div>
<div>
<pre class="lang:vim decode:true ">&gt;&gt;&gt; @memo
&gt;&gt;&gt; def fib(i):
&gt;&gt;&gt;     if i &lt; 2: return 1
&gt;&gt;&gt;     return fib(i-1) + fib(i-2)</pre>
这里的关键思想是:增强函数(装饰)函数,记住每个已经计算的Fibonacci 值;如果它们在缓存中,就不需要再计算了.

</div>
<div></div>
<div><b>17. 理解 Python的 GIL（全局解释器锁）：</b></div>
<div>     GIL 是必要的，因为CPython 的内存管理是非线程安全的。你不能简单地创建多个线程，并希望Python 能在多核心的机器上运行得更快。这是因为GIL 將会防止多个原生线程同时执行Python 字节码。换句话说，GIL 將序列化您的所有线程。然而，您可以使用线程管理多个派生进程加速程序，这些程序独立的运行于你的Python 代码外。</div>
<div></div>
<div><b>18. 像熟悉文档一样的熟悉 Python源代码：</b></div>
<div>Python 有些模块为了性能使用C 实现。当性能至关重要而官方文档不足时，可以自由探索源代码。你可以找到底层的数据结构和算法。Python 的源码库就是一个很棒的地方：<a href="http://svn.python.org/view/python/trunk/Modules">http://svn.python.org/view/python/trunk/Modules</a></div>
<div></div>
<div><b>结论：</b></div>
<div>     这些不能替代大脑思考. 打开引擎盖充分了解是开发者的职责,使得他们不会快速拼凑出一个垃圾设计. 本文的Python 建议可以帮助你获得好的性能. 如果速度还不够快, Python 將需要借助外力:分析和运行外部代码.我们將在本文的第二部分中涉及.</div>
<div></div>
<h3><b>第二部分</b></h3>
<div>     有益的提醒,静态编译的代码仍然重要. 仅例举几例, Chrome,Firefox,MySQL,MS Office 和Photoshop 都是高度优化的软件,我们每天都在使用. Python 作为解析语言,很明显不适合. 不能单靠Python 来满足那些性能是首要指示的领域. 这就是为什么Python 支持让你接触底层裸机基础设施的原因, 将更繁重的工作代理给更快的语言如C. 这高性能计算和嵌入式编程中是关键的功能. Python 性能鸡汤第一部分讨论了怎样高效的使用Python. 在第二部分, 我们將涉及监控和扩展Python.</div>
<div></div>
<div><b>1. 首先, 拒绝调优诱惑</b></div>
<div>     调优给你的代码增加复杂性. 集成其它语言之前, 请检查下面的列表. 如果你的算法是"足够好", 优化就没那么迫切了.</div>
<div>1. 你做了性能测试报告吗?</div>
<div>2. 你能减少硬盘的I/O 访问吗?</div>
<div>3. 你能减少网络I/O 访问吗?</div>
<div>4. 你能升级硬件吗?</div>
<div>5. 你是为其它开发者编译库吗?</div>
<div>6.你的第三方库软件是最新版吗?</div>
<div></div>
<div><b>2. 使用工具监控代码, 而不是直觉</b></div>
<div>     速度的问题可能很微妙, 所以不要依赖于直觉. 感谢"cprofiles" 模块, 通过简单的运行你就可以监控Python 代码“python -m cProfile myprogram.py”</div>
<div>     <img src="file:///C:/Users/beebol/AppData/Local/Temp/enhtmlclip/Image(2).png" alt="" /><a href="http://www.itopers.com/wp-content/uploads/2015/11/2.png"><img class="alignnone size-full wp-image-1128" src="http://www.itopers.com/wp-content/uploads/2015/11/2.png" alt="2" width="636" height="212" /></a></div>
<div>     我们写了个测试程序. 基于黑盒监控. 这里的瓶颈是"very_slow()" 函数调用. 我们还可以看到"fast()" 和"slow()"都被调用200次. 这意味着, 如果我们可以改善"fast()"和"slow()" 函数, 我们可以获得全面的性能提升. cprofiles 模块也可以在运行时导入. 这对于检查长时间运行的进程非常有用.</div>
<div>     <img src="file:///C:/Users/beebol/AppData/Local/Temp/enhtmlclip/Image(3).png" alt="" /><a href="http://www.itopers.com/wp-content/uploads/2015/11/2-2.png"><img class="alignnone size-full wp-image-1129" src="http://www.itopers.com/wp-content/uploads/2015/11/2-2.png" alt="2-2" width="260" height="274" /></a></div>
<div></div>
<div><b>3. 审查时间复杂度</b></div>
<div>     控制以后, 提供一个基本的算法性能分析. 恒定时间是理想值. 对数时间复度是稳定的. 阶乘复杂度很难扩展.</div>
<div>     O(1) -&gt; O(lg n) -&gt; O(n lg n) -&gt; O(n^2) -&gt; O(n^3) -&gt; O(n^k) -&gt; O(k^n) -&gt; O(n!)</div>
<div></div>
<div><b>4. 使用第三方包</b></div>
<div>     有很多为Python 设计的高性能的第三方库和工具. 下面是一些有用的加速包的简短列表.</div>
<div>1. NumPy: 一个开源的相当于MatLab 的包</div>
<div>2. SciPy: 另一个数值处理库</div>
<div>3. GPULib: 使用GPUs 加速代码</div>
<div>4. PyPy: 使用just-in-time 编译器优化Python 代码</div>
<div>5. Cython: 將Python 代码转成C</div>
<div>6. ShedSkin: 將Python 代码转成C++</div>
<div></div>
<b>5. 使用 multiprocessing模块实现真正的并发</b>
<div>     因为GIL 会序列化线程, Python 中的多线程不能在多核机器和集群中加速. 因此Python 提供了multiprocessing 模块, 可以派生额外的进程代替线程, 跳出GIL 的限制. 此外,你也可以在外部C 代码中结合该建议, 使得程序更快.</div>
<div>注意, 进程的开销通常比线程昂贵, 因为线程自动共享内存地址空间和文件描述符.意味着, 创建进程比创建线程会花费更多, 也可能花费更多内存. 这点在你计算使用多处理器时要牢记.</div>
<div></div>
<div><b>6. 本地代码</b></div>
<div>     好了, 现在你决定为了性能使用本地代码. 在标准的ctypes 模块中, 你可以直接加载已编程的二进制库(.dll 或.so 文件)到Python 中, 无需担心编写C/C++代码或构建依赖.例如, 我们可以写个程序加载libc 来生成随机数.然而, 绑定ctypes 的开销是非轻量级的. 你可以认为ctypes 是一个粘合操作系库函数或者硬件设备驱动的胶水. 有几个如SWIG, Cython 和Boost 此类Python 直接植入的库的调用比ctypes 开销要低. Python 支持面向对象特性, 如类和继承. 正如我们看到的例子, 我们可以保留常规的C++代码, 稍后导入. 这里的主要工作是编写一个包装器(行10~18).</div>
<div>    <a href="http://www.itopers.com/wp-content/uploads/2015/11/6.png"><img class="alignnone size-full wp-image-1130" src="http://www.itopers.com/wp-content/uploads/2015/11/6.png" alt="6" width="298" height="112" /></a>    <img src="file:///C:/Users/beebol/AppData/Local/Temp/enhtmlclip/Image(4).png" alt="" /></div>
<div>       <img src="file:///C:/Users/beebol/AppData/Local/Temp/enhtmlclip/Image.png" alt="" /></div>
<div>  <a href="http://www.itopers.com/wp-content/uploads/2015/11/6-2.png"><img class="alignnone size-full wp-image-1131" src="http://www.itopers.com/wp-content/uploads/2015/11/6-2.png" alt="6-2" width="355" height="377" /></a></div>
<div></div>
<div><b>总结:</b></div>
<div>     我希望这些Python 建议能让你成为一个更好的开发者. 最后, 我需要指出, 追求性能极限是一个有趣的游戏, 而过度优化就会变成嘲弄了. 虽然Python 授予你与C 接口无缝集成的能力, 你必须问自己你花数小时的艰辛优化工作用户是否买帐. 另一方面, 牺牲代码的可维护性换取几毫秒的提升是否值得. 团队中的成员常常会感谢你编写了简洁的代码. 尽量贴近Python 的方式, 因为人生苦短. :)</div>
<div></div>
<div>英文原文:http://blog.monitis.com/index.php/2012/02/13/python-performance-tips-part-1/</div>
<div>英文原文:http://blog.monitis.com/index.php/2012/03/21/python-performance-tips-part-2/</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1126</wp:post_id>
		<wp:post_date><![CDATA[2015-11-19 22:28:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-19 14:28:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90%e5%ad%a6%e4%b9%a0%e7%ac%94%e8%ae%b0%e3%80%91python%e6%80%a7%e8%83%bd%e9%b8%a1%e6%b1%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<category domain="post_tag" nicename="python-2"><![CDATA[python]]></category>
		<category domain="post_tag" nicename="%e4%bc%98%e5%8c%96"><![CDATA[优化]]></category>
		<category domain="category" nicename="%e7%bc%96%e7%a8%8b"><![CDATA[编程]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[56]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux-SVN】SVN服务器部署</title>
		<link>http://www.itopers.com/?p=1137</link>
		<pubDate>Wed, 25 Nov 2015 07:50:34 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1137</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>软件安装</h3>
<div>
<pre class="lang:vim decode:true">[root@localhost ~]# yum install svn –y</pre>
<h3>查看安装情况</h3>
</div>
<div align="justify">
<pre class="lang:vim decode:true ">[root@localhost ~]# rpm -ql subversion
/etc/subversion
/etc/sysconfig/svnserve
/run/svnserve
/usr/bin/svn
/usr/bin/svnadmin
/usr/bin/svndumpfilter
/usr/bin/svnlook
/usr/bin/svnrdump
/usr/bin/svnserve
/usr/bin/svnsync
/usr/bin/svnversion
/usr/lib/systemd/system/svnserve.service
/usr/lib/tmpfiles.d/svnserve.conf
/usr/share/bash-completion/completions/svn
...
</pre>
<h3>查看版本</h3>
</div>
<div>
<pre class="lang:vim decode:true ">[root@localhost ~]# svnserve --version
svnserve，版本 1.7.14 (r1542130)
   编译于 Sep  8 2015，18:10:16
版权所有 (C) 2013 Apache 软件基金会。
此软件包含了许多人的贡献，请查看文件 NOTICE 以获得更多信息。
Subversion 是开放源代码软件，请参阅 http://subversion.apache.org/ 站点。
下列版本库后端(FS) 模块可用:
* fs_base : 模块只能操作BDB版本库。
* fs_fs : 模块与文本文件(FSFS)版本库一起工作。
Cyrus SASL 认证可用。
</pre>
<h3>建立启动svn的用户</h3>
</div>
<div>
<pre class="lang:vim decode:true ">[root@localhost ~]# useradd svn</pre>
<h3>创建版本库</h3>
</div>
<div>
<pre class="lang:vim decode:true ">[root@localhost ~]# svnadmin create /home/svn/test</pre>
<h3>查看配置目录</h3>
</div>
<div>
<pre class="lang:vim decode:true ">[root@localhost ~]# ls /home/svn/test/conf
authz passwd svnserve.conf</pre>
authz文件是权限控制文件

passwd是帐号密码文件

</div>
<div>svnserve.conf SVN服务配置文件</div>
<h3>修改svnserve主配置</h3>
<div>
<pre class="lang:vim decode:true">[root@localhost ~]# vim /home/svn/test/conf/svnserve.conf</pre>
内容修改为：

</div>
<div>
<pre class="lang:vim decode:true ">[general]
anon-access = none
auth-access = write
password-db = passwd   #密码文件路径
authz-db = authz            #权限配置文件路径
realm = /home/svn/test</pre>
<h3>配置svn用户密码</h3>
</div>
<div>
<pre class="lang:vim decode:true">[root@localhost ~]# vim /home/svn/test/conf/passwd [users] test =123456</pre>
<h3>配置svn用户访问权限</h3>
</div>
<div>
<pre class="lang:vim decode:true">[root@localhost ~]# vim /home/svn/test/authz [groups] admin = test [/] @admin = rw</pre>
<h3>允许用户svn访问版本库</h3>
</div>
<div>
<pre class="lang:vim decode:true ">[root@localhost ~]# chown -R svn:svn /home/svn/test/</pre>
<h3>启动svn（使用普通用户）</h3>
</div>
<div>
<pre class="lang:vim decode:true">[root@localhost ~]# su - svn -c "svnserve -d --listen-port 3690 -r /home/svn/test"</pre>
<h3>停止svn</h3>
</div>
<div>
<pre class="lang:vim decode:true">[root@localhost ~]# killall svnserve</pre>
<h3>将svn加入到开机启动</h3>
</div>
<div>编辑/etc/rc.d/rc.local文件，加入如下启动命令：</div>
<div>
<pre class="lang:vim decode:true ">/usr/bin/su - svn -c "/usr/bin/svnserve -d --listen-port 3690 -r /home/svn/test"</pre>
<h3>注意：</h3>
</div>
<div>* 权限配置文件中出现的用户名必须已在用户配置文件中定义。</div>
<div>* 对权限配置文件的修改立即生效，不必重启svn。</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1137</wp:post_id>
		<wp:post_date><![CDATA[2015-11-25 15:50:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-25 07:50:34]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux-svn%e3%80%91svn%e6%9c%8d%e5%8a%a1%e5%99%a8%e9%83%a8%e7%bd%b2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[108]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux-SVN】authz配置文件</title>
		<link>http://www.itopers.com/?p=1142</link>
		<pubDate>Wed, 25 Nov 2015 08:43:12 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1142</guid>
		<description></description>
		<content:encoded><![CDATA[<h3><strong>用户组格式：</strong></h3>
<div>[groups]</div>
<div>groupname=user1 ,user2,user3</div>
<div>其中，1个用户组可以包含1个或多个用户，用户间以逗号分隔。</div>
<div></div>
<br />
<h3><strong>版本库目录格式：</strong></h3>
<div>[&lt;版本库&gt;:/项目/目录]</div>
<div>@&lt;用户组名&gt; = &lt;权限&gt;</div>
<div>&lt;用户名&gt; = &lt;权限&gt;</div>
<div>其中，方框号内部分可以有多种写法:</div>
<div>[/],表示根目录及以下，根目录是svnserve启动时指定的，我们指定为/home/svn/test，[/]就是表示对全部版本库设置权限。</div>
<div>[repos:/] 表示对版本库repos设置权限；</div>
<div>[repos:/abc] 表示对版本库repos中的abc项目设置权限；</div>
<div>[repos:/abc/aaa] 表示对版本库repos中的abc项目的aaa目录设置权限；</div>
<div>权限主体可以是用户组、用户或*，用户组在前面加@，*表示全部用户。</div>
<div>权限可以是w、r、wr和空，空表示没有任何权限。</div>
<div></div>
<div>ex:</div>
<div>[/]</div>
<div>@groupname = rw</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1142</wp:post_id>
		<wp:post_date><![CDATA[2015-11-25 16:43:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-25 08:43:12]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux-svn%e3%80%91authz%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="post_tag" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[54]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【Linux-SVN】SVN日常管理命令</title>
		<link>http://www.itopers.com/?p=1149</link>
		<pubDate>Wed, 25 Nov 2015 16:46:57 +0000</pubDate>
		<dc:creator><![CDATA[vaster]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1149</guid>
		<description></description>
		<content:encoded><![CDATA[1、检出
<pre class="lang:vim decode:true">svn co svn://path/ [local_path] --username username --password passwd
svn co &lt;=&gt; svn checkout</pre>
2、导出（ 导出一个干净的不带.svn文件夹的目录树）
<pre class="lang:vim decode:true">svn export [ -r 版本号 ] svn://path/ [ local_path ] --username username --password passwd
svn export 本地检出的（带.svn文件夹的）目录全路径 local_path
未指定版本号，则导出最新的</pre>
3、添加新文件/目录
<pre class="lang:vim decode:true ">svn add filename/pathname （必须提交才会真的生效，这里只是告诉SVN服务器要添加文件了）
svn mkdir path
svn mkdir -m "message" svn://path/dir
svn import http://localhost/svn/hehehehehhe -m=sdfsdf //可在任何目录下，将当前文件夹下的所以文件递归导入到 svn response 的hehehhhe 目录下。</pre>
4、提交
<pre class="lang:vim decode:true">svn ci -m "注释" [ -N ] [ --no-unlock ] filename
svn ci &lt;=&gt;svn commit
 --no-unlock 保持锁开关就用些选项</pre>
5、更新
<pre class="lang:vim decode:true ">svn update [ -r 版本号] [文件名]</pre>
6、删除文件
<pre class="lang:vim decode:true ">svn delete svn://path/ -m "注释" （必须提交才会真的生效，这里只是告诉SVN服务器要添加文件了）</pre>
推荐操作：
<pre class="lang:vim decode:true ">svn delete filename
svn ci -m "message"</pre>
7、加锁和解锁
<pre class="lang:vim decode:true ">svn lock -m "message" [ --force ] filename
svn unlock filename</pre>
8、比较差异
<pre class="lang:vim decode:true ">svn diff filename #与基础版本（最后检出或的版本）比较
svn diff -r head #与版本库中最新版本对比
svn diff -r 修改版本号m:修正版本号n filename</pre>
9、查看文件或目录状态
<pre class="lang:vim decode:true ">svn st path
svn st &lt;=&gt; svn status</pre>
目录下的文件和子目录状态，状态正常不显示；
？：不在SVN控制中；
M：内容被修改；
C：发生冲突；
A：预定加入到版本库；
K：被锁定
svn st -v path
显示文件和子目录状态（含子目录的文件）
第一列保持相同，第二列显示版本号，第三列和第四列显示最后一次修改的版本号和修改人

10、查看最新版本号
<pre class="lang:vim decode:true">svnlook youngest /svn/www
5</pre>
11、显示一个版本仓库中文件和目录的树形结构图
<pre class="lang:vim decode:true ">svnlook tree /svn/www/ --show-ids
/ &lt;0.0.r1/626&gt;
a &lt;0-1.0.r1/51&gt;
b &lt;3-1.0.r1/207&gt;
c &lt;5-1.0.r1/365&gt;</pre>
10、查看日志
<pre class="lang:vim decode:true ">svn log filename</pre>
11、查看文件详细信息
<pre class="lang:vim decode:true ">svn info filename</pre>
12、查看版本库下的文件和目录列表
<pre class="lang:vim decode:true ">svn list svn://path/</pre>
13、恢复本地修改
<pre class="lang:vim decode:true ">svn revert [--recursive] filename</pre>
14、把工作拷贝别的URL
<pre class="lang:vim decode:true ">svn switch svn://newpath localpath</pre>
15、不checkout而查看输出特定文件或URL的内容
<pre class="lang:vim decode:true ">svn cat svn://path/</pre>
16、新建一个分支copy
<pre class="lang:vim decode:true ">svn copy branchA branchB -m "message" //from A to B</pre>
17、合并内容到分支merge
<pre class="lang:vim decode:true ">svn merge branchA branchB //把对A的修改合并到B</pre>
18、解决冲突
<pre class="lang:vim decode:true ">svn resolved [localpath]</pre>
当有冲突时，会生成.mine,.r版本号的文件

19.显示被修改的文件
<pre class="lang:vim decode:true ">svnlook diff path</pre>
20、svn备份
<pre class="lang:vim decode:true ">svnadmin dump path &gt; /newpath #完全备份版本库，并保存为newpath
svnadmin dump path -r n --incremental &gt; /newpath #以增量把版本库版本n的信息并转存到newpath
svnadmin dump path -r 10：20 --incremental &gt; /root/www_bak_10-20 #对于一些较大的版本库可以分解备份</pre>
参数介绍：
-r [--revision] ARG : 指定版本 ARG (或 X:Y 范围)
--incremental : 以增量方式进行转存
--deltas : 在转存输出中使用差异
-q [--quiet] : 在标准错误输出不显示进度 (仅错误)
svnadmin hotcopy /svn/www/ /root/www_hotcopy #热拷贝www这个版本库，可以直接拿来用，但要确保权限

21、SVN还原
<pre class="lang:vim decode:true ">svnadmin load /svn/www/ &lt; /root/www_full_bak #还原完全备份 svnadmin dump /svn/www/ -r 5 --incremental &gt; /root/www_bak_1 #再还原增量备份
svnadmin dump /svn/www/ -r 10:20 --incremental &gt; /root/www_bak_1 #再还原增量备份
svnadmin dump /svn/www/ -r 21:40 --incremental &gt; /root/www_bak_1 #再还原增量备份</pre>
22、SVN合并
<pre class="lang:vim decode:true ">svnadmin create /svn/crazy #创建版本库crazy
svnadmin dump /svn/www &gt; /root/www_full_bak 备份/svn/www 和 /svn/redhat 版本库
svnadmin dump /svn/redhat/ &gt; /root/redhat_full_bak
svnadmin load /svn/crazy/ --parent-dir test &lt; /root/www_full_bak 合并版本库
svnadmin load /svn/crazy/ --parent-dir test1 &lt; /root/redhat_full_bak 23、SVN帮助 svn help svn help ci 以上所有协议可以是svn,http,https;不指定password，会提示输密码</pre>
&nbsp;

-------------------------------------------命令帮助---------------------------------

svn add

add: 把文件和目录放入版本控制中， 通过调度加到档案库。它们会在下一次提交时加入。

用法：add 路径...

有效选项：

--targets arg : 传递文件<span style="line-height: 1.5;">ARG 内容为附件参数</span>

-N [--non-recursive] : 只在单个目录操作

-q [--quiet] : 打印尽可能少

--config-dir arg : 从目录 ARG 读取用户配置文件

--force : 强制操作运行

--auto-props : 使自动属性有效

--no-auto-props : 使自动属性无效

eg.(下面的命令必须在工作拷贝目录下运行 ) sh&gt; svn add test.c //加一个文件
sh&gt; svn add test //加一个目录，目录下有任意结构的文件夹
sh&gt; svn import http://localhost/svn/hehehehehhe -m=sdfsdf //可在任何目录下，将当前文件夹下的所以文件递归导入到 svn response 的hehehhhe 目录下。

sh&gt;svn export
export: 产生一个无版本控制的目录树拷贝。
用法：1 、export [-r REV] URL[@PEGREV] [PATH]
2、export [-r REV] PATH1[@PEGREV] [PATH2]

1、从 URL 指定的档案库，导出一个干净的目录树到 PATH。如果有指定REV 的话，内容即为该修订版的，否则就是 HEAD 修订版。如果 PATH被省略的话，地址 (URL)的最后部份会被用来当成本地的目录名称。

2、在工作拷贝中，从指定的 PATH1 导出一个干净的目录树到 PATH2。如果有指定 REV 的话，会从指定的修订版导出，否则从 WORKING 导出。如果PATH2 被省略的话， PATH1 的最后部份会被用来当成本地的目录名称。如果没有指定 REV 的话，所有的本地修改都还会保持著，但是未纳入版本控制的文件不会被复制。
如果指定了 PEGREV ，将从指定的修订版本开始查找。
有效选项：
-r [--revision] arg : ARG (一些命令需要 ARG1:ARG2 )
修订版参数可以是：
数字 修订版号
"{" 日期 "}" 在指定时间以后的修订版 date
"HEAD" 最近的档案库
"BASE" 基线，基于修订版的工作条目
"COMMITTED" 最后提交或基线之前
"PREV" 修订版提交之前
-q [--quiet] : 打印尽可能少
-N [--non-recursive] : 只在单个目录操作
--force : 强制操作运行
--username arg : 指定用户 ARG
--password arg : 指定密码 ARG
--no-auth-cache : 不要缓冲用户验证
--non-interactive : 不要交互提示
--config-dir arg : 从目录 ARG 读取用户配置文件
--native-eol arg : 使用一个与标准不同的 EOL 标记
文件的系统标记是一个本地的 svn:eol-style 属性。
ARG 可能是一下之一 'LF'，'CR' ，'CRLF'
--ignore-externals : ignore externals definitions

eg.
sh&gt; svn export http://localhost/svn/hehehehehhhe

sh&gt; svn merge
merge: 将两个来源之间的差异应用至工作拷贝路径。
用法：1 、 merge sourceURL1[@N] sourceURL2[@M] [WCPATH]
2、merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]
3、merge -r N:M SOURCE[@REV] [WCPATH]

1、第一种形式中，来源 URL 各被指定到修订版 N 与 M。这两个就是作为比较的来源。如果没有指定修订版的话，默认为 HEAD
2、在第二种形式中，对应到两个来源的工作拷贝路径的 URL 定义出用以进行比较的来源。这里必须指定修订版。
3、第三种形式中， SOURCE 可为 URL 或工作拷贝项目，后者会使用对应的地址 (URL)。在修订版 REV 的 地址 (URL) 会以它存在于修订版 N 与 M 的路径来作比较。如果未指定 REV，就会假设为 HEAD。

WCPATH 是接受改变的工作拷贝路径。如果省略 WCPATH 的话，默认值为'.'，除非来源的主要名字符合 '.' 里的某个文件；在这种情况下，文件差异将会直接应用至该文件去。

有效选项：
-r [--revision] arg : ARG (一些命令需要 ARG1:ARG2 )
修订版参数可以是：
数字 修订版号
"{" 日期 "}" 在指定时间以后的修订版 date
"HEAD" 最近的档案库
"BASE" 基线，基于修订版的工作条目
"COMMITTED" 最后提交或基线之前
"PREV" 修订版提交之前
-N [--non-recursive] : 只在单个目录操作
-q [--quiet] : 打印尽可能少
--force : 强制操作运行
--dry-run : 尝试操作但不修改
--diff3-cmd arg : 使用 ARG 作为合并命令
--ignore-ancestry : 合并时忽略原始信息
--username arg : 指定用户 ARG
--password arg : 指定密码 ARG
--no-auth-cache : 不要缓冲用户验证
--non-interactive : 不要交互提示
--config-dir arg : 从目录 ARG 读取用户配置文件

svn help
用法：svn [options] [args]
Subversion 命令行客户端，版本 1.2.0。
请使用 “svn help ” 显示子命令的辅助说明。
大多数的子命令可接受文件或目录参数，对目录进行递回存取。
如无指定参数给命令，默认将会自当前的目录 (包含) 进
行递归存取。

可用的子命令：(括号内是子命令的简写 )
add
blame (praise, annotate, ann)
cat
checkout (co) //从源码库取出一个工作版本的拷贝
cleanup //
commit (ci) //提交当前工作拷贝的更改。这个地方是有可能出现代码冲突的。
copy (cp) //做一个工作拷贝的拷贝。
delete (del, remove, rm) //删除本地或者svn server response上的文件或者目录。
diff (di) //比较某个文件与库中的对应文件的不同，类似于系统的 diff命令。参数：文件名。
export //导出一个无版本控制的目录树拷贝。一般用于导出发行，或者投入运行的版本。
help (?, h)
import //将本地当前目录下的文件导入到 svn response 中。
info //当前目录下工作拷贝中某文件 (文件夹) 的信息，如 URL，版本，修改日期等。参数：要看的文件 (文件夹)
list (ls) //列出当前工作拷贝下的文件 ，相当于系统的ls命令，不过只能在工作拷贝目录下使用。
lock
log
merge //将两个来源之间的差异应用至工作拷贝路径。
mkdir //在本地或者 svn respon上新建一个文件夹.参数： URL或者路径
move (mv, rename, ren)
propdel (pdel, pd)
propedit (pedit, pe)
propget (pget, pg)
proplist (plist, pl)
propset (pset, ps)
resolved
revert
status (stat, st) //svn工作拷贝当前状态，与 svn server上的源码比较的结果。
switch (sw)
unlock
update (up) //将 svn server端文件同步到本地

&gt;svn co
checkout (co): Check out a working copy from a repository.
usage: checkout URL[@REV]... [PATH]

If specified, REV determines in which revision the URL is first
looked up.

If PATH is omitted, the basename of the URL will be used as
the destination. If multiple URLs are given each will be checked
out into a sub-directory of PATH, with the name of the sub-directory
being the basename of the URL.

有效选项：
-r [--revision] arg : ARG (一些命令需要 ARG1:ARG2 )
修订版参数可以是：
数字 修订版号
"{" 日期 "}" 在指定时间以后的修订版 date
"HEAD" 最近的档案库
"BASE" 基线，基于修订版的工作条目
"COMMITTED" 最后提交或基线之前
"PREV" 修订版提交之前
-q [--quiet] : 打印尽可能少
-N [--non-recursive] : 只在单个目录操作
--username arg : 指定用户 ARG
--password arg : 指定密码 ARG
--no-auth-cache : 不要缓冲用户验证
--non-interactive : 不要交互提示
--config-dir arg : 从目录 ARG 读取用户配置文件
--ignore-externals : ignore externals definitions]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1149</wp:post_id>
		<wp:post_date><![CDATA[2015-11-26 00:46:57]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-11-25 16:46:57]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90linux-svn%e3%80%91svn%e6%97%a5%e5%b8%b8%e7%ae%a1%e7%90%86%e5%91%bd%e4%bb%a4]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="linux"><![CDATA[Linux]]></category>
		<category domain="category" nicename="linux%e6%9c%8d%e5%8a%a1"><![CDATA[Linux服务]]></category>
		<category domain="post_tag" nicename="svn"><![CDATA[svn]]></category>
		<category domain="post_tag" nicename="%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4"><![CDATA[常用命令]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[71]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】一直都被误认为影响主从一致性的now()函数</title>
		<link>http://www.itopers.com/?p=1151</link>
		<pubDate>Mon, 14 Dec 2015 16:13:28 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1151</guid>
		<description></description>
		<content:encoded><![CDATA[一直以来，碰到now()函数，都认为是不安全函数，在STATEMENT-BASED下会导致主从数据不一致。今天一同事告诉我才特别注意下这个问题，其实它不会。首先来做个实验：
<pre class="lang:mysql decode:true ">mysql&gt; show variables like '%format%';
+---------------------+-------------------+
| Variable_name       | Value             |
+---------------------+-------------------+
| binlog_format       | STATEMENT         |
+---------------------+-------------------+</pre>
当然需要在statement replication下，row模式就不用说了，肯定不会影响。
<pre class="lang:mysql decode:true ">CREATE TABLE `t1` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `dt` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</pre>
先停掉同步：stop slave;
然后在主上进行insert操作：
<pre class="lang:mysql decode:true">mysql&gt; select * from t1;
Empty set (0.00 sec)

mysql&gt; insert into t1(dt)values(now());
Query OK, 1 row affected (0.01 sec)

mysql&gt; select * from t1;               
+----+---------------------+
| id | dt                  |
+----+---------------------+
|  1 | 2015-12-14 18:51:29 |
+----+---------------------+
1 row in set (0.00 sec)
</pre>
过几秒后，再start slave开启同步
再看看是否一致
<pre class="lang:mysql decode:true ">mysql&gt; start slave ;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; select * from t1;
+----+---------------------+
| id | dt                  |
+----+---------------------+
|  1 | 2015-12-14 18:51:29 |
+----+---------------------+
1 row in set (0.00 sec)</pre>
发现时间是一致的，没有出现一致性问题。
然后官网也有说明：
<pre class="lang:vim decode:true"> Statements using any of the following functions cannot be replicated properly using statement-based replication:

    LOAD_FILE()

    UUID(), UUID_SHORT()

    USER()

    FOUND_ROWS()

    SYSDATE() (unless both the master and the slave are started with the --sysdate-is-now option)

    GET_LOCK()

    IS_FREE_LOCK()

    IS_USED_LOCK()

    MASTER_POS_WAIT()

    RAND()

    RELEASE_LOCK()

    SLEEP()

    VERSION() 

However, all other functions are replicated correctly using statement-based replication, including NOW() and so forth.</pre>
now()函数和自增主键应该是有差不多实现方式的，仔细观察binlog会发现。自增主键会带一个
SET INSERT_ID=1/*!*/;

但同时也会带着一个时间  (now()是不是用的这个时间，待考证)
SET TIMESTAMP=1450090289/*!*/;

然后确认下这个时间点：
<pre class="lang:mysql decode:true">mysql&gt; SELECT FROM_UNIXTIME( 1450090289, '%Y-%m-%d_%H:%i:%s' ) ;
+--------------------------------------------------+
| FROM_UNIXTIME( 1450090289, '%Y-%m-%d_%H:%i:%s' ) |
+--------------------------------------------------+
| 2015-12-14_18:51:29                              |
+--------------------------------------------------+
#与插入的时间是一致的</pre>
&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1151</wp:post_id>
		<wp:post_date><![CDATA[2015-12-15 00:13:28]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-14 16:13:28]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91%e4%b8%80%e7%9b%b4%e9%83%bd%e8%a2%ab%e8%af%af%e8%ae%a4%e4%b8%ba%e5%bd%b1%e5%93%8d%e4%b8%bb%e4%bb%8e%e4%b8%80%e8%87%b4%e6%80%a7%e7%9a%84now%e5%87%bd%e6%95%b0]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="now"><![CDATA[now()]]></category>
		<category domain="post_tag" nicename="statement"><![CDATA[statement]]></category>
		<category domain="post_tag" nicename="%e4%b8%bb%e4%bb%8e%e5%a4%8d%e5%88%b6"><![CDATA[主从复制]]></category>
		<category domain="category" nicename="%e6%95%b0%e6%8d%ae%e5%ba%93"><![CDATA[数据库]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[47]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】一次奇怪的replace into死锁</title>
		<link>http://www.itopers.com/?p=1156</link>
		<pubDate>Thu, 24 Dec 2015 15:16:33 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1156</guid>
		<description></description>
		<content:encoded><![CDATA[最近碰到一次死锁，开始看比较奇怪，两个replace into不同记录怎么造成了死锁，其实没有想的这么简单。具体看如下图：

<img class="alignnone size-full wp-image-1164" src="http://www.itopers.com/wp-content/uploads/2015/12/replace.png" alt="replace" width="1783" height="744" />

单纯的看show engine innodb status的死锁信息，还不是很明确，因为只能看到目前事务1正在等待uk_a_b_c索引上的lock_mode X.而事务2已经持有lock_mode X,正在等等IX锁（lock_mode X locks gap before rec insert intention waiting）。两个都是在不同的记录上等待，

<strong>事务1的语句是：</strong>replace into tt (a,b,c,d)values(89,123,1,'xx-343s3');

<strong>事务2的语句是：</strong>replace into tt (a,b,c,d)values(86,123,1,'xx-3s3');

看到这里时，感觉很奇怪，为什么这两个sql会造成死锁，后面分析了全日志才知道，还存在一条sql。它是：replace into tt (a,b,c,d)values(89,123,1,'xx-3s3')，看到这条sql后，感觉发现了问题。

<strong>首先确认两个tips:</strong>
<pre class="lang:vim decode:true">1、replace into时，如果记录存在会加Next Key锁（x+gap）

2、对记录操作时，必须持有页锁（比如说修改记录得先申请页锁，然后再申请X，再修改数据页，如果需要等待锁，会立即释放掉页锁；获得X锁后，得重新申请页面锁）</pre>
实验环境：mysql 5.1.63  + redhat6u5

表结构：
<pre class="lang:mysql decode:true ">CREATE TABLE `tt` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `a` int(8) NOT NULL,
  `b` int(8) NOT NULL,
  `c` int(8) NOT NULL,
  `d` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_a_b_c` (`a`,`b`,`c`)
) ENGINE=InnoDB AUTO_INCREMENT=81 DEFAULT CHARSET=utf8</pre>
插入的数据：
<pre class="lang:mysql decode:true ">mysql&gt; select * from tt;          
+----+----+-----+---+----------+
| id | a  | b   | c | d        |
+----+----+-----+---+----------+
|  1 | 85 | 234 | 2 | zz       |
| 71 | 86 | 123 | 1 | yy-2xssd |
| 73 | 89 | 123 | 1 | yy-2sss  |
+----+----+-----+---+----------+</pre>
如下是具体的执行步骤：
<table style="height: 1016px; font-size: 14px; border: 1px solid;" border="1" width="732">
<tbody>
<tr >
<td style="border: 1px solid;"> session1</td>
<td style="border: 1px solid;"> session2</td>
<td style="border: 1px solid;"> session3</td>
</tr>
<tr>
<td style="border: 1px solid;"> start transaction;
replace into tt (a,b,c,d)values(89,123,1,'xx-3s3');
<span style="color: #ff0000;">记录存在，标记删除后，再insert新记录,持Next key锁</span></td>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"></td>
</tr>
<tr>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"> start transaction;
replace into tt (a,b,c,d)values(86,123,1,'xx-3s3');
<span style="color: #ff0000;">请求Next key锁，被session1中的Next key锁住，等待(lock_mode X waiting)</span></td>
</tr>
<tr>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"> start transaction;
replace into tt (a,b,c,d)values(89,123,1,'xx-343s3');
<span style="color: #ff0000;">获得页面锁，被session1锁定，释放页面锁，等待Next key锁；(lock_mode X waiting)</span></td>
<td style="border: 1px solid;"></td>
</tr>
<tr>
<td style="border: 1px solid;"> commit;</td>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"></td>
</tr>
<tr>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"><span style="color: #ff0000;"> session1提交后，成功获取Next key锁</span></td>
</tr>
<tr>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"><span style="color: #ff0000;"> session1提交后，发现记录已经被修改，restart,重新判断记录状态，成功获得页面锁，发现数据记录存在，准备获取Next key锁，由于session3已经有next key锁，等待（lock_mode X waiting）</span></td>
<td style="border: 1px solid;"></td>
</tr>
<tr>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"> <span style="color: #ff0000;">标记数据为删除状态，准备插入记录，请求IX锁，但被与session2请求的Next Key锁冲突（ lock_mode X locks gap before rec insert intention waiting）</span></td>
</tr>
<tr>
<td style="border: 1px solid;"></td>
<td style="border: 1px solid;"> ERROR 1213 (40001): Deadlock found when trying to get lock; try restarting transaction

<span style="color: #ff0000;">这里防止session2饿死，根据权重将session2回滚</span></td>
<td style="border: 1px solid;"></td>
</tr>
</tbody>
</table>
&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1156</wp:post_id>
		<wp:post_date><![CDATA[2015-12-24 23:16:33]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-24 15:16:33]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91%e4%b8%80%e6%ac%a1%e5%a5%87%e6%80%aa%e7%9a%84replace-into%e6%ad%bb%e9%94%81]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="gap%e9%94%81"><![CDATA[gap锁]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="next-key"><![CDATA[next key]]></category>
		<category domain="post_tag" nicename="replace-into"><![CDATA[replace into]]></category>
		<category domain="post_tag" nicename="%e6%ad%bb%e9%94%81"><![CDATA[死锁]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[39]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】创建索引时如何考虑order by查询</title>
		<link>http://www.itopers.com/?p=1177</link>
		<pubDate>Sun, 27 Dec 2015 08:06:04 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1177</guid>
		<description></description>
		<content:encoded><![CDATA[给表加索引时，其中一些查询会用到order by ,group by之类的，在低版本（有ICP之前版本）中可能会遇到一种情况，where查询用到索引，那么order by就无法用到索引，当然我们可以创建联合索引，那么什么情况下创建联合索引是有效的呢？可以通过explain 看order by是否有file sort,where是否使用到了索引。

那么order by 如何避免file sort，之后的索引应该如何创建，在这里做下总结：1、根据索引查询数据后，是否还需要排序，如果需要就会产生file sort,否则不会；所以在创建索引的时候需要特别注意，能将避免file sort的尽可能通过创建索引来解决，无法解决的就改sql，或者考虑其它办法。但需要考虑file sort不一定会慢，主要还得看数据量，有些情况还是允许file sort的，file sort也分为内存和磁盘，只有在sort buffer装载不下的情况，才能会磁盘中去进行分块排序。

2、联合索引使用长度需要注意，看联合索引用到了几列，什么样了sql会用到索引的程度。如，a为范围查询，&lt;、&gt;、!=，那么b就无法使用到（不支持ICP情况）。只能当前缀列为= 、&lt;=或者&gt;=时，后面的列才会用到。

如下是联合索引idx_a_b_c(a,b,c)各种查询条件下是否有file sort,另外使用到的索引情况。（mysql版本，5.1.63）

<img class="size-full wp-image-1182 alignleft" src="http://www.itopers.com/wp-content/uploads/2015/12/6A482D3A-0D68-403F-8380-78508CDE88AC-1.png" alt="6A482D3A-0D68-403F-8380-78508CDE88AC" width="1312" height="967" /> <img class="size-full wp-image-1184 alignleft" src="http://www.itopers.com/wp-content/uploads/2015/12/CFAC19ED-2009-45D2-9A31-673CE6055C4C.png" alt="CFAC19ED-2009-45D2-9A31-673CE6055C4C" width="1322" height="996" /><img class="size-full wp-image-1183 alignleft" src="http://www.itopers.com/wp-content/uploads/2015/12/C997B6B8-C40C-462F-BF1A-656648ED9081.png" alt="C997B6B8-C40C-462F-BF1A-656648ED9081" width="1350" height="474" />

&nbsp;

&nbsp;

思考：
<pre class="lang:vim decode:true">create table ttt (
    id int(10) NOT NULL AUTO_INCREMENT,
    uid int(10) NOT NULL,
    status tinyint(2) NOT NULL,
    ordertime int(11) NOT NULL,
    view varchar(20) NOT NULL
    primary key(id),
    key idx_status_rodertime(status,ordertime),
    key idx_uid(uid)
)engine = innodb;</pre>
此表有3000多w.其中uid和status,ordertime的distinct值。
<pre class="lang:mysql decode:true ">mysql&gt; select count(distinct uid) from ttt;
+------------------------+
| count(distinct uid) |
+------------------------+
|                   9112 |
+------------------------+
1 row in set (51.89 sec)

mysql&gt; select count(distinct status,ordertime) from ttt;      
+--------------------------------+
| count(distinct status,ordertime) |
+--------------------------------+
|                           5424 |
+--------------------------------+
1 row in set (51.77 sec)</pre>
上表有这样的一个查询 ：
<pre class="lang:mysql decode:true ">select * from ttt where status=6 and ordertime &gt;=1451012466 and ordertime &lt;=1451016066 order by uid asc limit 100;</pre>
在目前这种情况下，如何优化这条sql，为什么？(数据库版本不限)

&nbsp;

参考：http://imysql.com/2014/09/19/mysql-faq-is-composite-index-support-different-sort-order.shtml]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1177</wp:post_id>
		<wp:post_date><![CDATA[2015-12-27 16:06:04]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 08:06:04]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95%e6%97%b6%e5%a6%82%e4%bd%95%e8%80%83%e8%99%91order-by%e6%9f%a5%e8%af%a2]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="order-by"><![CDATA[order by]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[32]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>【mysql】mysql参数之autocommit</title>
		<link>http://www.itopers.com/?p=1190</link>
		<pubDate>Sun, 27 Dec 2015 09:00:27 +0000</pubDate>
		<dc:creator><![CDATA[beebol]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1190</guid>
		<description></description>
		<content:encoded><![CDATA[autocommit是一个改变事务提交方式参数，设置为1时，所有改变变的立即生效，也就是说为1时，语句执行完后，事务自动提交。如果设置为0时，需要通过commit或者rollback进行提交或者回滚事务。
纠正一种说法就是，set autocommit = 0时，会自动开启一个事务，准确来说是set autocommit = 0时下一个语句会自动开启一个事务。
set autocommit = 0与start transaction的区别：
前者下改变事务提交方式，是自动提交还是非自动提交，设置时不会导致前面的事务隐性提交；
后者是立即开启一个事务，并隐性提交前面的事务

set autocommit = 1 与 commit 的区别
两者都可以提交前面的事务，但在5.0、5.1的版本中会不一样，具体可以看下bug#54462

另外比较重要的点需要注意：
python使用MySQLdb连接mysql数据库时，autocommit默认会设置成OFF的，每个sql进来后，都需要主动commit来提交事务。代码中设置成ON,如果需要开一个事务，通过start transaction方式来开启。

参考：
http://venublog.com/2010/06/12/autocommit-implicit-commit-and-open-transactions/
http://bugs.mysql.com/bug.php?id=54462]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1190</wp:post_id>
		<wp:post_date><![CDATA[2015-12-27 17:00:27]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-27 09:00:27]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[%e3%80%90mysql%e3%80%91mysql%e5%8f%82%e6%95%b0%e4%b9%8bautocommit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="autocommmit"><![CDATA[autocommmit]]></category>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql-2"><![CDATA[mysql]]></category>
		<category domain="post_tag" nicename="mysqldb"><![CDATA[MySQLdb]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[3]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_e276454f9d7c0f590e609d677f603cf9]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d72d6131d1c65badd783f1801a9c0961]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[views]]></wp:meta_key>
			<wp:meta_value><![CDATA[41]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_21683fd2dead7267e46c3e7c40b12beb]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_d6b7758a60a8ae53df83b7d2e2934351]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>http://www.itopers.com/?p=1196</link>
		<pubDate>Wed, 13 Jan 2016 14:16:31 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
		<guid isPermaLink="false">http://www.itopers.com/?p=1196</guid>
		<description></description>
		<content:encoded><![CDATA[基本面]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1196</wp:post_id>
		<wp:post_date><![CDATA[2016-01-13 22:16:31]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-13 14:16:31]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[1196]]></wp:post_name>
		<wp:status><![CDATA[trash]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[未分类]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_status]]></wp:meta_key>
			<wp:meta_value><![CDATA[publish]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_wp_trash_meta_time]]></wp:meta_key>
			<wp:meta_value><![CDATA[1452932019]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
